C:\Users\SV1830\Downloads\Gestao-auditorias-django\manage.py

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\ativos\admin.py

# ativos/admin.py

from django.contrib import admin
from .models import Categoria, Marca, Modelo, Ativo


@admin.register(Categoria)
class CategoriaAdmin(admin.ModelAdmin):
    list_display = ('nome', 'ativo', 'data_cadastro')
    list_filter = ('ativo',)
    search_fields = ('nome',)


@admin.register(Marca)
class MarcaAdmin(admin.ModelAdmin):
    list_display = ('nome', 'ativo', 'data_cadastro')
    list_filter = ('ativo',)
    search_fields = ('nome',)


@admin.register(Modelo)
class ModeloAdmin(admin.ModelAdmin):
    list_display = ('nome', 'marca', 'ativo', 'data_cadastro')
    list_filter = ('ativo', 'marca')
    search_fields = ('nome', 'marca__nome')


@admin.register(Ativo)
class AtivoAdmin(admin.ModelAdmin):
    list_display = (
        'tag',
        'descricao',
        'categoria',
        'marca',
        'modelo',
        'estrutura_organizacional',  # Exibe o subsetor
        'ativo',
        'data_cadastro'
    )
    list_filter = ('ativo', 'categoria', 'marca', 'modelo',
                   'estrutura_organizacional__setor__area__empresa')  # Filtros úteis
    search_fields = (
        'tag',
        'descricao',
        'codigo_fabricante',
        'categoria__nome',
        'marca__nome',
        'modelo__nome',
        'estrutura_organizacional__nome',
        'estrutura_organizacional__setor__nome',
        'estrutura_organizacional__setor__area__nome',
        'estrutura_organizacional__setor__area__empresa__nome'
    )
    # Campos que aparecem no formulário de adicionar/editar
    fieldsets = (
        (None, {
            'fields': ('tag', 'descricao', 'custo', 'codigo_fabricante', 'imagem_ativo')
        }),
        ('Classificação', {
            'fields': ('categoria', 'marca', 'modelo')
        }),
        ('Localização', {
            'fields': ('estrutura_organizacional',)
        }),
        ('Status', {
            'fields': ('ativo',)
        }),
    )

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\ativos\apps.py

from django.apps import AppConfig


class AtivosConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'ativos'

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\ativos\models.py

# ativos/models.py

from django.db import models
# Importar o SubSetor para a Estrutura Organizacional
from organizacao.models import SubSetor


class Categoria(models.Model):
    nome = models.CharField(max_length=100, unique=True,
                            verbose_name="Nome da Categoria")
    descricao = models.TextField(
        null=True, blank=True, verbose_name="Descrição")
    ativo = models.BooleanField(default=True, verbose_name="Ativo")
    data_cadastro = models.DateTimeField(
        auto_now_add=True, verbose_name="Data de Cadastro")
    data_atualizacao = models.DateTimeField(
        auto_now=True, verbose_name="Última Atualização")

    class Meta:
        verbose_name = "Categoria"
        verbose_name_plural = "Categorias"
        ordering = ['nome']

    def __str__(self):
        return self.nome


class Marca(models.Model):
    nome = models.CharField(max_length=100, unique=True,
                            verbose_name="Nome da Marca")
    ativo = models.BooleanField(default=True, verbose_name="Ativo")
    data_cadastro = models.DateTimeField(
        auto_now_add=True, verbose_name="Data de Cadastro")
    data_atualizacao = models.DateTimeField(
        auto_now=True, verbose_name="Última Atualização")

    class Meta:
        verbose_name = "Marca"
        verbose_name_plural = "Marcas"
        ordering = ['nome']

    def __str__(self):
        return self.nome


class Modelo(models.Model):
    marca = models.ForeignKey(
        Marca, on_delete=models.CASCADE, verbose_name="Marca")
    nome = models.CharField(max_length=100, verbose_name="Nome do Modelo")
    descricao = models.TextField(
        null=True, blank=True, verbose_name="Descrição Detalhada")
    ativo = models.BooleanField(default=True, verbose_name="Ativo")
    data_cadastro = models.DateTimeField(
        auto_now_add=True, verbose_name="Data de Cadastro")
    data_atualizacao = models.DateTimeField(
        auto_now=True, verbose_name="Última Atualização")

    class Meta:
        verbose_name = "Modelo"
        verbose_name_plural = "Modelos"
        # Garante que um modelo é único para uma marca
        unique_together = ('marca', 'nome')
        ordering = ['marca__nome', 'nome']

    def __str__(self):
        return f"{self.nome} ({self.marca.nome})"


class Ativo(models.Model):
    tag = models.CharField(max_length=50, unique=True,
                           verbose_name="Tag do Ativo")
    descricao = models.CharField(max_length=255, verbose_name="Descrição")
    custo = models.DecimalField(
        max_digits=10, decimal_places=2, null=True, blank=True, verbose_name="Custo")
    codigo_fabricante = models.CharField(
        max_length=100, null=True, blank=True, verbose_name="Código do Fabricante")

    # Relações com outros modelos - ADICIONAR related_name AQUI
    categoria = models.ForeignKey(
        Categoria,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        verbose_name="Categoria",
        related_name='ativos_categoria'  # <-- Nome único para a relação reversa
    )
    marca = models.ForeignKey(
        Marca,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        verbose_name="Marca",
        related_name='ativos_marca'  # <-- Nome único
    )
    modelo = models.ForeignKey(
        Modelo,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        verbose_name="Modelo",
        related_name='ativos_modelo'  # <-- Nome único
    )
    estrutura_organizacional = models.ForeignKey(
        SubSetor,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        verbose_name="Estrutura Organizacional (Subsetor)",
        related_name='ativos_subsetor'  # <-- Nome único (e claro)
    )

    # Campos de controle
    ativo = models.BooleanField(default=True, verbose_name="Ativo")
    data_cadastro = models.DateTimeField(
        auto_now_add=True, verbose_name="Data de Cadastro")
    data_atualizacao = models.DateTimeField(
        auto_now=True, verbose_name="Última Atualização")

    # Campo para imagem do ativo
    imagem_ativo = models.ImageField(
        upload_to='ativos_imagens/', null=True, blank=True, verbose_name="Imagem do Ativo")

    class Meta:
        verbose_name = "Ativo"
        verbose_name_plural = "Ativos"
        ordering = ['tag']

    def __str__(self):
        return f"{self.tag} - {self.descricao}"

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\ativos\tests.py

from django.test import TestCase

# Create your tests here.

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\ativos\urls.py

# ativos/urls.py

from django.urls import path
from . import views

app_name = 'ativos'

urlpatterns = [
    # Dashboard
    path('', views.dashboard_ativos, name='dashboard'),
    
    # Categorias
    path('categorias/', views.lista_categorias, name='lista_categorias'),
    path('categorias/criar/', views.criar_categoria, name='criar_categoria'),
    path('categorias/<int:pk>/editar/', views.editar_categoria, name='editar_categoria'),
    path('categorias/<int:pk>/deletar/', views.deletar_categoria, name='deletar_categoria'),
    
    # Marcas
    path('marcas/', views.lista_marcas, name='lista_marcas'),
    path('marcas/criar/', views.criar_marca, name='criar_marca'),
    path('marcas/<int:pk>/editar/', views.editar_marca, name='editar_marca'),
    path('marcas/<int:pk>/deletar/', views.deletar_marca, name='deletar_marca'),
    
    # Modelos
    path('modelos/', views.lista_modelos, name='lista_modelos'),
    path('modelos/criar/', views.criar_modelo, name='criar_modelo'),
    path('modelos/<int:pk>/editar/', views.editar_modelo, name='editar_modelo'),
    path('modelos/<int:pk>/deletar/', views.deletar_modelo, name='deletar_modelo'),
    
    # Ativos
    path('ativos/', views.lista_ativos, name='lista_ativos'),
    path('ativos/criar/', views.criar_ativo, name='criar_ativo'),
    path('ativos/<int:pk>/editar/', views.editar_ativo, name='editar_ativo'),
    path('ativos/<int:pk>/deletar/', views.deletar_ativo, name='deletar_ativo'),
    
    # AJAX
    path('ajax/modelos-por-marca/', views.get_modelos_por_marca, name='get_modelos_por_marca'),
]
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\ativos\views.py

# ativos/views.py

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.core.paginator import Paginator
from django.db.models import Q, Count
from django.http import JsonResponse

from .models import Categoria, Marca, Modelo, Ativo
from organizacao.models import SubSetor


# ============================================================================
# DASHBOARD
# ============================================================================

@login_required
def dashboard_ativos(request):
    """Dashboard principal do módulo de ativos"""
    context = {
        'total_ativos': Ativo.objects.count(),
        'ativos_ativos': Ativo.objects.filter(ativo=True).count(),
        'total_categorias': Categoria.objects.count(),
        'total_marcas': Marca.objects.count(),
        'total_modelos': Modelo.objects.count(),
        'ativos_recentes': Ativo.objects.select_related(
            'categoria', 'marca', 'modelo', 'estrutura_organizacional'
        ).order_by('-data_cadastro')[:5],
    }
    return render(request, 'ativos/dashboard.html', context)


# ============================================================================
# VIEWS PARA CATEGORIAS
# ============================================================================

@login_required
def lista_categorias(request):
    """Lista todas as categorias de ativos"""
    search = request.GET.get('search', '')
    categorias = Categoria.objects.annotate(
        total_ativos=Count('ativos_categoria')
    )
    
    if search:
        categorias = categorias.filter(
            Q(nome__icontains=search) | Q(descricao__icontains=search)
        )
    
    paginator = Paginator(categorias, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    context = {
        'page_obj': page_obj,
        'search': search,
        'title': 'Categorias de Ativos',
        'singular': 'Categoria',
        'button_text': 'Nova Categoria',
        'create_url': 'ativos:criar_categoria',
        'artigo': 'a',
        'empty_message': 'Nenhuma categoria cadastrada',
        'empty_subtitle': 'Comece criando a primeira categoria.'
    }
    return render(request, 'ativos/categorias/lista.html', context)


@login_required
def criar_categoria(request):
    """Cria uma nova categoria"""
    if request.method == 'POST':
        nome = request.POST.get('nome')
        descricao = request.POST.get('descricao', '')
        ativo = request.POST.get('ativo') == 'on'
        
        if nome:
            try:
                Categoria.objects.create(
                    nome=nome,
                    descricao=descricao,
                    ativo=ativo
                )
                messages.success(request, 'Categoria criada com sucesso!')
                return redirect('ativos:lista_categorias')
            except Exception as e:
                messages.error(request, f'Erro ao criar categoria: {str(e)}')
        else:
            messages.error(request, 'Nome é obrigatório!')
    
    context = {
        'title': 'Criar Categoria',
        'back_url': 'ativos:lista_categorias'
    }
    return render(request, 'ativos/categorias/form.html', context)


@login_required
def editar_categoria(request, pk):
    """Edita uma categoria existente"""
    categoria = get_object_or_404(Categoria, pk=pk)
    
    if request.method == 'POST':
        categoria.nome = request.POST.get('nome')
        categoria.descricao = request.POST.get('descricao', '')
        categoria.ativo = request.POST.get('ativo') == 'on'
        
        try:
            categoria.save()
            messages.success(request, 'Categoria atualizada com sucesso!')
            return redirect('ativos:lista_categorias')
        except Exception as e:
            messages.error(request, f'Erro ao atualizar categoria: {str(e)}')
    
    context = {
        'categoria': categoria,
        'title': 'Editar Categoria',
        'back_url': 'ativos:lista_categorias'
    }
    return render(request, 'ativos/categorias/form.html', context)


@login_required
def deletar_categoria(request, pk):
    """Deleta uma categoria"""
    categoria = get_object_or_404(Categoria, pk=pk)
    
    if request.method == 'POST':
        try:
            categoria.delete()
            messages.success(request, 'Categoria deletada com sucesso!')
        except Exception as e:
            messages.error(request, f'Erro ao deletar categoria: {str(e)}')
        return redirect('ativos:lista_categorias')
    
    context = {
        'object': categoria,
        'title': 'Categoria'
    }
    return render(request, 'auditorias/deletar_generico.html', context)


# ============================================================================
# VIEWS PARA MARCAS
# ============================================================================

@login_required
def lista_marcas(request):
    """Lista todas as marcas"""
    search = request.GET.get('search', '')
    marcas = Marca.objects.annotate(
        total_modelos=Count('modelo'),
        total_ativos=Count('ativos_marca')
    )
    
    if search:
        marcas = marcas.filter(nome__icontains=search)
    
    paginator = Paginator(marcas, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    context = {
        'page_obj': page_obj,
        'search': search,
        'title': 'Marcas',
        'singular': 'Marca',
        'button_text': 'Nova Marca',
        'create_url': 'ativos:criar_marca',
        'artigo': 'a',
        'empty_message': 'Nenhuma marca cadastrada',
        'empty_subtitle': 'Comece criando a primeira marca.'
    }
    return render(request, 'ativos/marcas/lista.html', context)


@login_required
def criar_marca(request):
    """Cria uma nova marca"""
    if request.method == 'POST':
        nome = request.POST.get('nome')
        ativo = request.POST.get('ativo') == 'on'
        
        if nome:
            try:
                Marca.objects.create(
                    nome=nome,
                    ativo=ativo
                )
                messages.success(request, 'Marca criada com sucesso!')
                return redirect('ativos:lista_marcas')
            except Exception as e:
                messages.error(request, f'Erro ao criar marca: {str(e)}')
        else:
            messages.error(request, 'Nome é obrigatório!')
    
    context = {
        'title': 'Criar Marca',
        'back_url': 'ativos:lista_marcas'
    }
    return render(request, 'ativos/marcas/form.html', context)


@login_required
def editar_marca(request, pk):
    """Edita uma marca existente"""
    marca = get_object_or_404(Marca, pk=pk)
    
    if request.method == 'POST':
        marca.nome = request.POST.get('nome')
        marca.ativo = request.POST.get('ativo') == 'on'
        
        try:
            marca.save()
            messages.success(request, 'Marca atualizada com sucesso!')
            return redirect('ativos:lista_marcas')
        except Exception as e:
            messages.error(request, f'Erro ao atualizar marca: {str(e)}')
    
    context = {
        'marca': marca,
        'title': 'Editar Marca',
        'back_url': 'ativos:lista_marcas'
    }
    return render(request, 'ativos/marcas/form.html', context)


@login_required
def deletar_marca(request, pk):
    """Deleta uma marca"""
    marca = get_object_or_404(Marca, pk=pk)
    
    if request.method == 'POST':
        try:
            marca.delete()
            messages.success(request, 'Marca deletada com sucesso!')
        except Exception as e:
            messages.error(request, f'Erro ao deletar marca: {str(e)}')
        return redirect('ativos:lista_marcas')
    
    context = {
        'object': marca,
        'title': 'Marca'
    }
    return render(request, 'auditorias/deletar_generico.html', context)


# ============================================================================
# VIEWS PARA MODELOS
# ============================================================================

@login_required
def lista_modelos(request):
    """Lista todos os modelos"""
    search = request.GET.get('search', '')
    marca_filter = request.GET.get('marca', '')
    
    modelos = Modelo.objects.select_related('marca').annotate(
        total_ativos=Count('ativos_modelo')
    )
    
    if search:
        modelos = modelos.filter(
            Q(nome__icontains=search) | 
            Q(marca__nome__icontains=search) |
            Q(descricao__icontains=search)
        )
    
    if marca_filter:
        modelos = modelos.filter(marca_id=marca_filter)
    
    paginator = Paginator(modelos, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    context = {
        'page_obj': page_obj,
        'search': search,
        'marca_filter': marca_filter,
        'marcas': Marca.objects.filter(ativo=True),
        'title': 'Modelos',
        'singular': 'Modelo',
        'button_text': 'Novo Modelo',
        'create_url': 'ativos:criar_modelo',
        'artigo': 'o',
        'empty_message': 'Nenhum modelo cadastrado',
        'empty_subtitle': 'Comece criando o primeiro modelo.'
    }
    return render(request, 'ativos/modelos/lista.html', context)


@login_required
def criar_modelo(request):
    """Cria um novo modelo"""
    if request.method == 'POST':
        marca_id = request.POST.get('marca')
        nome = request.POST.get('nome')
        descricao = request.POST.get('descricao', '')
        ativo = request.POST.get('ativo') == 'on'
        
        if marca_id and nome:
            try:
                marca = Marca.objects.get(pk=marca_id)
                Modelo.objects.create(
                    marca=marca,
                    nome=nome,
                    descricao=descricao,
                    ativo=ativo
                )
                messages.success(request, 'Modelo criado com sucesso!')
                return redirect('ativos:lista_modelos')
            except Exception as e:
                messages.error(request, f'Erro ao criar modelo: {str(e)}')
        else:
            messages.error(request, 'Marca e nome são obrigatórios!')
    
    context = {
        'marcas': Marca.objects.filter(ativo=True),
        'title': 'Criar Modelo',
        'back_url': 'ativos:lista_modelos'
    }
    return render(request, 'ativos/modelos/form.html', context)


@login_required
def editar_modelo(request, pk):
    """Edita um modelo existente"""
    modelo = get_object_or_404(Modelo, pk=pk)
    
    if request.method == 'POST':
        marca_id = request.POST.get('marca')
        modelo.nome = request.POST.get('nome')
        modelo.descricao = request.POST.get('descricao', '')
        modelo.ativo = request.POST.get('ativo') == 'on'
        
        if marca_id:
            modelo.marca = Marca.objects.get(pk=marca_id)
        
        try:
            modelo.save()
            messages.success(request, 'Modelo atualizado com sucesso!')
            return redirect('ativos:lista_modelos')
        except Exception as e:
            messages.error(request, f'Erro ao atualizar modelo: {str(e)}')
    
    context = {
        'modelo': modelo,
        'marcas': Marca.objects.filter(ativo=True),
        'title': 'Editar Modelo',
        'back_url': 'ativos:lista_modelos'
    }
    return render(request, 'ativos/modelos/form.html', context)


@login_required
def deletar_modelo(request, pk):
    """Deleta um modelo"""
    modelo = get_object_or_404(Modelo, pk=pk)
    
    if request.method == 'POST':
        try:
            modelo.delete()
            messages.success(request, 'Modelo deletado com sucesso!')
        except Exception as e:
            messages.error(request, f'Erro ao deletar modelo: {str(e)}')
        return redirect('ativos:lista_modelos')
    
    context = {
        'object': modelo,
        'title': 'Modelo'
    }
    return render(request, 'auditorias/deletar_generico.html', context)


# ============================================================================
# VIEWS PARA ATIVOS
# ============================================================================

@login_required
def lista_ativos(request):
    """Lista todos os ativos"""
    search = request.GET.get('search', '')
    categoria_filter = request.GET.get('categoria', '')
    marca_filter = request.GET.get('marca', '')
    
    ativos = Ativo.objects.select_related(
        'categoria', 'marca', 'modelo', 'estrutura_organizacional'
    )
    
    if search:
        ativos = ativos.filter(
            Q(tag__icontains=search) |
            Q(descricao__icontains=search) |
            Q(codigo_fabricante__icontains=search)
        )
    
    if categoria_filter:
        ativos = ativos.filter(categoria_id=categoria_filter)
    
    if marca_filter:
        ativos = ativos.filter(marca_id=marca_filter)
    
    paginator = Paginator(ativos, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    context = {
        'page_obj': page_obj,
        'search': search,
        'categoria_filter': categoria_filter,
        'marca_filter': marca_filter,
        'categorias': Categoria.objects.filter(ativo=True),
        'marcas': Marca.objects.filter(ativo=True),
        'title': 'Ativos',
        'singular': 'Ativo',
        'button_text': 'Novo Ativo',
        'create_url': 'ativos:criar_ativo',
        'artigo': 'o',
        'empty_message': 'Nenhum ativo cadastrado',
        'empty_subtitle': 'Comece criando o primeiro ativo.'
    }
    return render(request, 'ativos/lista.html', context)


@login_required
def criar_ativo(request):
    """Cria um novo ativo"""
    if request.method == 'POST':
        tag = request.POST.get('tag')
        descricao = request.POST.get('descricao')
        custo = request.POST.get('custo') or None
        codigo_fabricante = request.POST.get('codigo_fabricante', '')
        categoria_id = request.POST.get('categoria') or None
        marca_id = request.POST.get('marca') or None
        modelo_id = request.POST.get('modelo') or None
        estrutura_id = request.POST.get('estrutura_organizacional') or None
        ativo = request.POST.get('ativo') == 'on'
        
        if tag and descricao:
            try:
                novo_ativo = Ativo.objects.create(
                    tag=tag,
                    descricao=descricao,
                    custo=custo,
                    codigo_fabricante=codigo_fabricante,
                    categoria_id=categoria_id,
                    marca_id=marca_id,
                    modelo_id=modelo_id,
                    estrutura_organizacional_id=estrutura_id,
                    ativo=ativo
                )
                
                # Processar imagem se fornecida
                if request.FILES.get('imagem_ativo'):
                    novo_ativo.imagem_ativo = request.FILES['imagem_ativo']
                    novo_ativo.save()
                
                messages.success(request, 'Ativo criado com sucesso!')
                return redirect('ativos:lista_ativos')
            except Exception as e:
                messages.error(request, f'Erro ao criar ativo: {str(e)}')
        else:
            messages.error(request, 'Tag e descrição são obrigatórios!')
    
    context = {
        'categorias': Categoria.objects.filter(ativo=True),
        'marcas': Marca.objects.filter(ativo=True),
        'modelos': Modelo.objects.filter(ativo=True),
        'subsetores': SubSetor.objects.filter(ativo=True),
        'title': 'Criar Ativo',
        'back_url': 'ativos:lista_ativos'
    }
    return render(request, 'ativos/ativos/form.html', context)


@login_required
def editar_ativo(request, pk):
    """Edita um ativo existente"""
    ativo_obj = get_object_or_404(Ativo, pk=pk)
    
    if request.method == 'POST':
        ativo_obj.tag = request.POST.get('tag')
        ativo_obj.descricao = request.POST.get('descricao')
        ativo_obj.custo = request.POST.get('custo') or None
        ativo_obj.codigo_fabricante = request.POST.get('codigo_fabricante', '')
        ativo_obj.categoria_id = request.POST.get('categoria') or None
        ativo_obj.marca_id = request.POST.get('marca') or None
        ativo_obj.modelo_id = request.POST.get('modelo') or None
        ativo_obj.estrutura_organizacional_id = request.POST.get('estrutura_organizacional') or None
        ativo_obj.ativo = request.POST.get('ativo') == 'on'
        
        try:
            # Processar imagem se fornecida
            if request.FILES.get('imagem_ativo'):
                ativo_obj.imagem_ativo = request.FILES['imagem_ativo']
            
            ativo_obj.save()
            messages.success(request, 'Ativo atualizado com sucesso!')
            return redirect('ativos:lista_ativos')
        except Exception as e:
            messages.error(request, f'Erro ao atualizar ativo: {str(e)}')
    
    context = {
        'ativo': ativo_obj,
        'categorias': Categoria.objects.filter(ativo=True),
        'marcas': Marca.objects.filter(ativo=True),
        'modelos': Modelo.objects.filter(ativo=True),
        'subsetores': SubSetor.objects.filter(ativo=True),
        'title': 'Editar Ativo',
        'back_url': 'ativos:lista_ativos'
    }
    return render(request, 'ativos/ativos/form.html', context)


@login_required
def deletar_ativo(request, pk):
    """Deleta um ativo"""
    ativo = get_object_or_404(Ativo, pk=pk)
    
    if request.method == 'POST':
        try:
            ativo.delete()
            messages.success(request, 'Ativo deletado com sucesso!')
        except Exception as e:
            messages.error(request, f'Erro ao deletar ativo: {str(e)}')
        return redirect('ativos:lista_ativos')
    
    context = {
        'object': ativo,
        'title': 'Ativo'
    }
    return render(request, 'auditorias/deletar_generico.html', context)


# ============================================================================
# VIEWS AJAX
# ============================================================================

@login_required
def get_modelos_por_marca(request):
    """Retorna modelos de uma marca via AJAX"""
    marca_id = request.GET.get('marca_id')
    modelos = Modelo.objects.filter(marca_id=marca_id, ativo=True).values('id', 'nome')
    return JsonResponse(list(modelos), safe=False)
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\ativos\__init__.py


_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\ativos\migrations\0001_initial.py

# Generated by Django 5.2.4 on 2025-07-28 12:35

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('organizacao', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Categoria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, unique=True, verbose_name='Nome da Categoria')),
                ('descricao', models.TextField(blank=True, null=True, verbose_name='Descrição')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
            ],
            options={
                'verbose_name': 'Categoria',
                'verbose_name_plural': 'Categorias',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='Marca',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, unique=True, verbose_name='Nome da Marca')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
            ],
            options={
                'verbose_name': 'Marca',
                'verbose_name_plural': 'Marcas',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='Modelo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome do Modelo')),
                ('descricao', models.TextField(blank=True, null=True, verbose_name='Descrição Detalhada')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('marca', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ativos.marca', verbose_name='Marca')),
            ],
            options={
                'verbose_name': 'Modelo',
                'verbose_name_plural': 'Modelos',
                'ordering': ['marca__nome', 'nome'],
                'unique_together': {('marca', 'nome')},
            },
        ),
        migrations.CreateModel(
            name='Ativo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(max_length=50, unique=True, verbose_name='Tag do Ativo')),
                ('descricao', models.CharField(max_length=255, verbose_name='Descrição')),
                ('custo', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Custo')),
                ('codigo_fabricante', models.CharField(blank=True, max_length=100, null=True, verbose_name='Código do Fabricante')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('imagem_ativo', models.ImageField(blank=True, null=True, upload_to='ativos_imagens/', verbose_name='Imagem do Ativo')),
                ('estrutura_organizacional', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ativos_subsetor', to='organizacao.subsetor', verbose_name='Estrutura Organizacional (Subsetor)')),
                ('categoria', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ativos_categoria', to='ativos.categoria', verbose_name='Categoria')),
                ('marca', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ativos_marca', to='ativos.marca', verbose_name='Marca')),
                ('modelo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ativos_modelo', to='ativos.modelo', verbose_name='Modelo')),
            ],
            options={
                'verbose_name': 'Ativo',
                'verbose_name_plural': 'Ativos',
                'ordering': ['tag'],
            },
        ),
    ]

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\ativos\migrations\__init__.py


_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\ativos\templates\ativos\dashboard.html

{% extends 'auditorias/base.html' %}

{% block title %}Dashboard de Ativos{% endblock %}
{% block page_title %}Dashboard de Ativos{% endblock %}

{% block content %}
<div class="content-header">
    <h2 class="content-title">Visão Geral de Ativos</h2>
    <p class="content-subtitle">Estatísticas e informações sobre os ativos cadastrados.</p>
</div>

<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 24px; margin-bottom: 32px;">
    <div class="card">
        <div class="card-body" style="padding: 24px;">
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <div>
                    <h3 style="font-size: 32px; font-weight: 700; color: var(--primary); margin-bottom: 8px;">{{ total_ativos }}</h3>
                    <p style="color: var(--text-secondary); font-size: 14px; margin: 0;">Total de Ativos</p>
                </div>
                <div style="font-size: 24px; color: var(--primary);"><i class="fas fa-box"></i></div>
            </div>
        </div>
    </div>
    <div class="card">
        <div class="card-body" style="padding: 24px;">
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <div>
                    <h3 style="font-size: 32px; font-weight: 700; color: var(--success); margin-bottom: 8px;">{{ ativos_ativos }}</h3>
                    <p style="color: var(--text-secondary); font-size: 14px; margin: 0;">Ativos em Operação</p>
                </div>
                <div style="font-size: 24px; color: var(--success);"><i class="fas fa-check-circle"></i></div>
            </div>
        </div>
    </div>
    <div class="card">
        <div class="card-body" style="padding: 24px;">
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <div>
                    <h3 style="font-size: 32px; font-weight: 700; color: var(--warning); margin-bottom: 8px;">{{ total_categorias }}</h3>
                    <p style="color: var(--text-secondary); font-size: 14px; margin: 0;">Categorias</p>
                </div>
                <div style="font-size: 24px; color: var(--warning);"><i class="fas fa-tags"></i></div>
            </div>
        </div>
    </div>
    <div class="card">
        <div class="card-body" style="padding: 24px;">
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <div>
                    <h3 style="font-size: 32px; font-weight: 700; color: var(--info); margin-bottom: 8px;">{{ total_marcas }}</h3>
                    <p style="color: var(--text-secondary); font-size: 14px; margin: 0;">Marcas</p>
                </div>
                <div style="font-size: 24px; color: var(--info);"><i class="fas fa-building"></i></div>
            </div>
        </div>
    </div>
</div>

<div style="display: grid; grid-template-columns: 2fr 1fr; gap: 32px;">
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Ativos Adicionados Recentemente</h3>
        </div>
        <div class="card-body">
            {% if ativos_recentes %}
                <div class="table-container">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Tag</th>
                                <th>Descrição</th>
                                <th>Categoria</th>
                                <th>Data Cadastro</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for ativo in ativos_recentes %}
                            <tr>
                                <td><a href="{% url 'ativos:editar_ativo' ativo.pk %}">{{ ativo.tag }}</a></td>
                                <td>{{ ativo.descricao }}</td>
                                <td><span class="badge badge-info">{{ ativo.categoria.nome|default:'N/A' }}</span></td>
                                <td>{{ ativo.data_cadastro|date:"d/m/Y" }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            {% else %}
                <p>Nenhum ativo cadastrado recentemente.</p>
            {% endif %}
        </div>
    </div>

    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Ações Rápidas</h3>
        </div>
        <div class="card-body" style="display: flex; flex-direction: column; gap: 12px;">
            <a href="{% url 'ativos:criar_ativo' %}" class="btn btn-primary"><i class="fas fa-plus"></i> Novo Ativo</a>
            <a href="{% url 'ativos:criar_categoria' %}" class="btn btn-secondary"><i class="fas fa-plus"></i> Nova Categoria</a>
            <a href="{% url 'ativos:criar_marca' %}" class="btn btn-secondary"><i class="fas fa-plus"></i> Nova Marca</a>
            <a href="{% url 'ativos:criar_modelo' %}" class="btn btn-secondary"><i class="fas fa-plus"></i> Novo Modelo</a>
        </div>
    </div>
</div>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\ativos\templates\ativos\form.html

{% extends 'auditorias/form_generico.html' %}

{% block form_content %}
<h4 style="color: var(--text-primary); margin-bottom: 16px; padding-bottom: 8px; border-bottom: 1px solid var(--border);">
    Identificação do Ativo
</h4>
<div class="form-row">
    <div class="form-group required">
        <label for="tag" class="form-label">TAG do Ativo</label>
        <input type="text" id="tag" name="tag" class="form-control" value="{{ ativo.tag|default:'' }}" required maxlength="50">
    </div>
    <div class="form-group required">
        <label for="descricao" class="form-label">Descrição</label>
        <input type="text" id="descricao" name="descricao" class="form-control" value="{{ ativo.descricao|default:'' }}" required maxlength="255">
    </div>
</div>
<div class="form-row">
    <div class="form-group">
        <label for="custo" class="form-label">Custo (R$)</label>
        <input type="number" step="0.01" id="custo" name="custo" class="form-control" value="{{ ativo.custo|default:'' }}">
    </div>
    <div class="form-group">
        <label for="codigo_fabricante" class="form-label">Código do Fabricante</label>
        <input type="text" id="codigo_fabricante" name="codigo_fabricante" class="form-control" value="{{ ativo.codigo_fabricante|default:'' }}" maxlength="100">
    </div>
</div>
<div class="form-group">
    <label for="imagem_ativo" class="form-label">Imagem do Ativo</label>
    {% if ativo.imagem_ativo %}
    <p>Imagem atual: <a href="{{ ativo.imagem_ativo.url }}" target="_blank">{{ ativo.imagem_ativo.name }}</a></p>
    {% endif %}
    <input type="file" id="imagem_ativo" name="imagem_ativo" class="form-control">
</div>

<h4 style="color: var(--text-primary); margin: 32px 0 16px; padding-bottom: 8px; border-bottom: 1px solid var(--border);">
    Classificação e Localização
</h4>
<div class="form-row triple">
    <div class="form-group">
        <label for="categoria" class="form-label">Categoria</label>
        <select id="categoria" name="categoria" class="form-control form-select">
            <option value="">Selecione...</option>
            {% for cat in categorias %}<option value="{{ cat.pk }}" {% if ativo.categoria.pk == cat.pk %}selected{% endif %}>{{ cat.nome }}</option>{% endfor %}
        </select>
    </div>
    <div class="form-group">
        <label for="marca" class="form-label">Marca</label>
        <select id="marca" name="marca" class="form-control form-select">
            <option value="">Selecione...</option>
            {% for marca in marcas %}<option value="{{ marca.pk }}" {% if ativo.marca.pk == marca.pk %}selected{% endif %}>{{ marca.nome }}</option>{% endfor %}
        </select>
    </div>
    <div class="form-group">
        <label for="modelo" class="form-label">Modelo</label>
        <select id="modelo" name="modelo" class="form-control form-select">
            <option value="">Selecione uma marca primeiro</option>
            {% if ativo.modelo %}
                <option value="{{ ativo.modelo.pk }}" selected>{{ ativo.modelo.nome }}</option>
            {% endif %}
        </select>
    </div>
</div>
<div class="form-row">
     <div class="form-group">
        <label for="estrutura_organizacional" class="form-label">Local (Subsetor)</label>
        <select id="estrutura_organizacional" name="estrutura_organizacional" class="form-control form-select">
            <option value="">Selecione...</option>
            {% for subsetor in subsetores %}<option value="{{ subsetor.pk }}" {% if ativo.estrutura_organizacional.pk == subsetor.pk %}selected{% endif %}>{{ subsetor }}</option>{% endfor %}
        </select>
    </div>
</div>
<div class="form-group">
    <label class="form-label">Status</label>
    <div style="display: flex; align-items: center; gap: 12px;">
        <label class="toggle-switch">
            <input type="checkbox" name="ativo" {% if ativo.ativo|default:True %}checked{% endif %}>
            <span class="toggle-slider"></span>
        </label>
        <span style="color: var(--text-secondary); font-size: 14px;">Ativo no sistema</span>
    </div>
</div>

{% endblock %}

{% block extra_js %}
{{ block.super }}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const marcaSelect = document.getElementById('marca');
    const modeloSelect = document.getElementById('modelo');

    marcaSelect.addEventListener('change', function() {
        const marcaId = this.value;
        modeloSelect.innerHTML = '<option value="">Carregando...</option>';

        if (marcaId) {
            fetch(`{% url 'ativos:get_modelos_por_marca' %}?marca_id=${marcaId}`)
                .then(response => response.json())
                .then(data => {
                    modeloSelect.innerHTML = '<option value="">Selecione um modelo</option>';
                    data.forEach(modelo => {
                        const option = document.createElement('option');
                        option.value = modelo.id;
                        option.textContent = modelo.nome;
                        modeloSelect.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Erro ao buscar modelos:', error);
                    modeloSelect.innerHTML = '<option value="">Erro ao carregar</option>';
                });
        } else {
            modeloSelect.innerHTML = '<option value="">Selecione uma marca primeiro</option>';
        }
    });
});
</script>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\ativos\templates\ativos\lista.html

{% extends 'auditorias/lista_generica.html' %}

{% block table_headers %}
    <th>Tag</th>
    <th>Descrição</th>
    <th>Categoria</th>
    <th>Marca</th>
    <th>Modelo</th>
    <th>Status</th>
    <th style="width: 120px;">Ações</th>
{% endblock %}

{% block table_row %}
    <td>
        <div style="font-weight: 600; color: var(--text-primary);">
            {{ object.tag }}
        </div>
    </td>
    <td>{{ object.descricao|truncatechars:40 }}</td>
    <td>{{ object.categoria.nome|default:"—" }}</td>
    <td>{{ object.marca.nome|default:"—" }}</td>
    <td>{{ object.modelo.nome|default:"—" }}</td>
    <td>
        {% if object.ativo %}
            <span class="badge badge-success"><i class="fas fa-check-circle"></i> Ativo</span>
        {% else %}
            <span class="badge badge-error"><i class="fas fa-times-circle"></i> Inativo</span>
        {% endif %}
    </td>
    <td>
        <div class="action-buttons">
            <a href="{% url 'ativos:editar_ativo' object.pk %}" class="btn btn-secondary btn-icon" title="Editar Ativo">
                <i class="fas fa-edit"></i>
            </a>
            <button type="button" class="btn btn-danger btn-icon" title="Deletar Ativo"
                    onclick="confirmDelete('{% url 'ativos:deletar_ativo' object.pk %}', '{{ object.tag }}')">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    </td>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\ativos\templates\ativos\categorias\form.html

{% extends 'auditorias/form_generico.html' %}

{% block form_content %}
<div class="form-row single">
    <div class="form-group required">
        <label for="nome" class="form-label">Nome da Categoria</label>
        <input type="text" id="nome" name="nome" class="form-control" value="{{ categoria.nome|default:'' }}" required maxlength="100">
    </div>
</div>

<div class="form-row single">
    <div class="form-group">
        <label for="descricao" class="form-label">Descrição</label>
        <textarea id="descricao" name="descricao" class="form-control" rows="4">{{ categoria.descricao|default:'' }}</textarea>
    </div>
</div>

<div class="form-row single">
    <div class="form-group">
        <label class="form-label">Status</label>
        <div style="display: flex; align-items: center; gap: 12px;">
            <label class="toggle-switch">
                <input type="checkbox" name="ativo" {% if categoria.ativo|default:True %}checked{% endif %}>
                <span class="toggle-slider"></span>
            </label>
            <span style="color: var(--text-secondary); font-size: 14px;">
                Categoria ativa no sistema
            </span>
        </div>
    </div>
</div>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\ativos\templates\ativos\categorias\lista.html

{% extends 'auditorias/lista_generica.html' %}

{% block table_headers %}
    <th>Nome da Categoria</th>
    <th>Total de Ativos</th>
    <th>Status</th>
    <th>Data de Cadastro</th>
    <th style="width: 120px;">Ações</th>
{% endblock %}

{% block table_row %}
    <td>
        <div style="font-weight: 600; color: var(--text-primary);">
            {{ object.nome }}
        </div>
    </td>
    <td>{{ object.total_ativos }}</td>
    <td>
        {% if object.ativo %}
            <span class="badge badge-success"><i class="fas fa-check-circle"></i> Ativo</span>
        {% else %}
            <span class="badge badge-error"><i class="fas fa-times-circle"></i> Inativo</span>
        {% endif %}
    </td>
    <td>{{ object.data_cadastro|date:"d/m/Y" }}</td>
    <td>
        <div class="action-buttons">
            <a href="{% url 'ativos:editar_categoria' object.pk %}" class="btn btn-secondary btn-icon" title="Editar Categoria">
                <i class="fas fa-edit"></i>
            </a>
            <button type="button" class="btn btn-danger btn-icon" title="Deletar Categoria"
                    onclick="confirmDelete('{% url 'ativos:deletar_categoria' object.pk %}', '{{ object.nome }}')">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    </td>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\ativos\templates\ativos\marcas\form.html

{% extends 'auditorias/form_generico.html' %}

{% block form_content %}
<div class="form-row single">
    <div class="form-group required">
        <label for="nome" class="form-label">Nome da Marca</label>
        <input type="text" id="nome" name="nome" class="form-control" value="{{ marca.nome|default:'' }}" required maxlength="100">
    </div>
</div>

<div class="form-row single">
    <div class="form-group">
        <label class="form-label">Status</label>
        <div style="display: flex; align-items: center; gap: 12px;">
            <label class="toggle-switch">
                <input type="checkbox" name="ativo" {% if marca.ativo|default:True %}checked{% endif %}>
                <span class="toggle-slider"></span>
            </label>
            <span style="color: var(--text-secondary); font-size: 14px;">
                Marca ativa no sistema
            </span>
        </div>
    </div>
</div>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\ativos\templates\ativos\marcas\lista.html

{% extends 'auditorias/lista_generica.html' %}

{% block table_headers %}
    <th>Nome da Marca</th>
    <th>Modelos</th>
    <th>Ativos</th>
    <th>Status</th>
    <th style="width: 120px;">Ações</th>
{% endblock %}

{% block table_row %}
    <td>
        <div style="font-weight: 600; color: var(--text-primary);">
            {{ object.nome }}
        </div>
    </td>
    <td>{{ object.total_modelos }}</td>
    <td>{{ object.total_ativos }}</td>
    <td>
        {% if object.ativo %}
            <span class="badge badge-success"><i class="fas fa-check-circle"></i> Ativo</span>
        {% else %}
            <span class="badge badge-error"><i class="fas fa-times-circle"></i> Inativo</span>
        {% endif %}
    </td>
    <td>
        <div class="action-buttons">
            <a href="{% url 'ativos:editar_marca' object.pk %}" class="btn btn-secondary btn-icon" title="Editar Marca">
                <i class="fas fa-edit"></i>
            </a>
            <button type="button" class="btn btn-danger btn-icon" title="Deletar Marca"
                    onclick="confirmDelete('{% url 'ativos:deletar_marca' object.pk %}', '{{ object.nome }}')">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    </td>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\ativos\templates\ativos\modelos\form.html

{% extends 'auditorias/form_generico.html' %}

{% block form_content %}
<div class="form-row">
    <div class="form-group required">
        <label for="marca" class="form-label">Marca</label>
        <select id="marca" name="marca" class="form-control form-select" required>
            <option value="">Selecione uma marca...</option>
            {% for marca in marcas %}
            <option value="{{ marca.pk }}" {% if modelo.marca.pk == marca.pk %}selected{% endif %}>
                {{ marca.nome }}
            </option>
            {% endfor %}
        </select>
    </div>
    <div class="form-group required">
        <label for="nome" class="form-label">Nome do Modelo</label>
        <input type="text" id="nome" name="nome" class="form-control" value="{{ modelo.nome|default:'' }}" required maxlength="100">
    </div>
</div>

<div class="form-row single">
    <div class="form-group">
        <label for="descricao" class="form-label">Descrição</label>
        <textarea id="descricao" name="descricao" class="form-control" rows="4">{{ modelo.descricao|default:'' }}</textarea>
    </div>
</div>

<div class="form-row single">
    <div class="form-group">
        <label class="form-label">Status</label>
        <div style="display: flex; align-items: center; gap: 12px;">
            <label class="toggle-switch">
                <input type="checkbox" name="ativo" {% if modelo.ativo|default:True %}checked{% endif %}>
                <span class="toggle-slider"></span>
            </label>
            <span style="color: var(--text-secondary); font-size: 14px;">
                Modelo ativo no sistema
            </span>
        </div>
    </div>
</div>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\ativos\templates\ativos\modelos\lista.html

{% extends 'auditorias/lista_generica.html' %}

{% block table_headers %}
    <th>Nome do Modelo</th>
    <th>Marca</th>
    <th>Total de Ativos</th>
    <th>Status</th>
    <th style="width: 120px;">Ações</th>
{% endblock %}

{% block table_row %}
    <td>
        <div style="font-weight: 600; color: var(--text-primary);">
            {{ object.nome }}
        </div>
    </td>
    <td>{{ object.marca.nome }}</td>
    <td>{{ object.total_ativos }}</td>
    <td>
        {% if object.ativo %}
            <span class="badge badge-success"><i class="fas fa-check-circle"></i> Ativo</span>
        {% else %}
            <span class="badge badge-error"><i class="fas fa-times-circle"></i> Inativo</span>
        {% endif %}
    </td>
    <td>
        <div class="action-buttons">
            <a href="{% url 'ativos:editar_modelo' object.pk %}" class="btn btn-secondary btn-icon" title="Editar Modelo">
                <i class="fas fa-edit"></i>
            </a>
            <button type="button" class="btn btn-danger btn-icon" title="Deletar Modelo"
                    onclick="confirmDelete('{% url 'ativos:deletar_modelo' object.pk %}', '{{ object.nome }}')">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    </td>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\admin.py

# auditorias/admin.py

from django.contrib import admin
from .models import (
    Pilar,
    CategoriaAuditoria,
    Norma,
    RequisitoNorma,
    FerramentaDigital,
    Checklist,
    FerramentaCausaRaiz,
    ModeloAuditoria,
    Auditoria,
    AuditoriaInstancia,
    Topico,
    Pergunta,
    OpcaoResposta,
    OpcaoPorcentagem,
)

@admin.register(Pilar)
class PilarAdmin(admin.ModelAdmin):
    list_display = ('nome', 'descricao', 'ativo', 'data_cadastro')
    list_filter = ('ativo',)
    search_fields = ('nome', 'descricao')
    fieldsets = (
        (None, {
            'fields': ('nome', 'descricao', 'ativo')
        }),
    )

@admin.register(CategoriaAuditoria)
class CategoriaAuditoriaAdmin(admin.ModelAdmin):
    list_display = ('id', 'pilar', 'descricao', 'ativo', 'data_cadastro')
    list_filter = ('ativo', 'pilar')
    search_fields = ('descricao', 'pilar__nome')
    fieldsets = (
        (None, {
            'fields': ('pilar', 'descricao', 'ativo')
        }),
    )

class RequisitoNormaInline(admin.TabularInline):
    model = RequisitoNorma
    extra = 0
    min_num = 1
    fields = ('codigo', 'requisito', 'descricao', 'ativo')

@admin.register(Norma)
class NormaAdmin(admin.ModelAdmin):
    list_display = ('descricao', 'revisao', 'ativo', 'data_cadastro')
    list_filter = ('ativo',)
    search_fields = ('descricao', 'revisao')
    inlines = [RequisitoNormaInline]
    fieldsets = (
        (None, {
            'fields': ('descricao', 'revisao', 'ativo')
        }),
    )

@admin.register(FerramentaDigital)
class FerramentaDigitalAdmin(admin.ModelAdmin):
    list_display = ('nome',)
    search_fields = ('nome',)

@admin.register(FerramentaCausaRaiz)
class FerramentaCausaRaizAdmin(admin.ModelAdmin):
    list_display = ('nome',)
    search_fields = ('nome',)

@admin.register(ModeloAuditoria)
class ModeloAuditoriaAdmin(admin.ModelAdmin):
    list_display = (
        'descricao',
        'checklist',
        'categoria',
        'ferramenta_causa_raiz',
        'ativo',
        'iniciar_por_codigo_qr',
        'data_cadastro'
    )
    list_filter = (
        'ativo',
        'iniciar_por_codigo_qr',
        'checklist',
        'categoria',
        'ferramenta_causa_raiz'
    )
    search_fields = (
        'descricao',
        'checklist__nome',
        'categoria__descricao',
        'ferramenta_causa_raiz__nome'
    )
    fieldsets = (
        (None, {
            'fields': ('descricao', 'checklist', 'categoria', 'ferramenta_causa_raiz', 'ativo', 'iniciar_por_codigo_qr')
        }),
    )

@admin.register(Auditoria)
class AuditoriaAdmin(admin.ModelAdmin):
    list_display = (
        'id',
        'responsavel',
        'nivel_organizacional',
        'ferramenta',
        'data_inicio',
        'data_fim',
        'data_criacao'
    )
    list_filter = (
        'nivel_organizacional',
        'ferramenta',
        'responsavel',
        'data_inicio'
    )
    search_fields = (
        'responsavel__first_name',
        'responsavel__last_name',
        'responsavel__username',
        'local_empresa__nome',
        'local_area__nome',
        'local_setor__nome',
        'local_subsetor__nome'
    )
    filter_horizontal = ('modelos', 'ativos_auditados', 'turnos')
    fieldsets = (
        ("Informações Gerais", {
            'fields': ('ferramenta', 'responsavel', 'categoria_auditoria')
        }),
        ("Localização", {
            'fields': ('nivel_organizacional', 'local_empresa', 'local_area', 'local_setor', 'local_subsetor')
        }),
        ("Seleção de Conteúdo", {
            'fields': ('modelos', 'ativos_auditados')
        }),
        ("Programação", {
            'fields': ('data_inicio', 'data_fim', ('por_frequencia', 'por_intervalo'), 'frequencia', 'intervalo', 'numero_repeticoes', 'pular_finais_semana', 'contem_turnos', 'turnos')
        }),
    )

@admin.register(AuditoriaInstancia)
class AuditoriaInstanciaAdmin(admin.ModelAdmin):
    list_display = ('auditoria_agendada', 'data_execucao', 'executada')
    list_filter = ('executada', 'data_execucao')
    search_fields = ('auditoria_agendada__descricao',)

class OpcaoRespostaInline(admin.TabularInline):
    model = OpcaoResposta
    extra = 0
    fields = ('descricao', 'status')

class OpcaoPorcentagemInline(admin.TabularInline):
    model = OpcaoPorcentagem
    extra = 0
    fields = ('descricao', 'peso', 'cor')

@admin.register(Pergunta)
class PerguntaAdmin(admin.ModelAdmin):
    list_display = ('topico', 'descricao', 'obrigatoria', 'campo_desabilitado')
    list_filter = ('obrigatoria', 'campo_desabilitado')
    search_fields = ('descricao',)
    inlines = [OpcaoRespostaInline, OpcaoPorcentagemInline]

class PerguntaInline(admin.TabularInline):
    model = Pergunta
    extra = 0
    fields = ('descricao', 'obrigatoria', 'campo_desabilitado', 'ordem')

@admin.register(Topico)
class TopicoAdmin(admin.ModelAdmin):
    list_display = ('checklist', 'descricao', 'ordem')
    list_filter = ('checklist',)
    search_fields = ('descricao',)
    inlines = [PerguntaInline]

class TopicoInline(admin.TabularInline):
    model = Topico
    extra = 0
    fields = ('descricao', 'ordem')

@admin.register(Checklist)
class ChecklistAdmin(admin.ModelAdmin):
    list_display = (
        'nome',
        'ativo',
        'ferramenta',
    )
    list_filter = ('ativo', 'ferramenta')
    search_fields = ('nome',)
    inlines = [TopicoInline]
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\apps.py

from django.apps import AppConfig


class AuditoriasConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'auditorias'

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\models.py

# auditorias/models.py

from django.db import models
from django.contrib.auth.models import User
from organizacao.models import Empresa, Area, Setor, SubSetor
from ativos.models import Ativo
from cadastros_base.models import Turno
from django.conf import settings

from django.utils import timezone
from datetime import timedelta
from dateutil.relativedelta import relativedelta


class Pilar(models.Model):
    nome = models.CharField(max_length=100, unique=True,
                            verbose_name="Nome do Pilar")
    descricao = models.TextField(
        null=True, blank=True, verbose_name="Descrição")
    ativo = models.BooleanField(default=True, verbose_name="Ativo")
    data_cadastro = models.DateTimeField(
        auto_now_add=True, verbose_name="Data de Cadastro")
    data_atualizacao = models.DateTimeField(
        auto_now=True, verbose_name="Última Atualização")

    class Meta:
        verbose_name = "Pilar"
        verbose_name_plural = "Pilares"
        ordering = ['nome']

    def __str__(self):
        return self.nome


class CategoriaAuditoria(models.Model):
    pilar = models.ForeignKey(
        Pilar,
        on_delete=models.CASCADE,
        verbose_name="Pilar",
        related_name='categorias_auditoria'
    )
    descricao = models.CharField(
        max_length=255, verbose_name="Descrição da Categoria")
    ativo = models.BooleanField(default=True, verbose_name="Ativo")
    data_cadastro = models.DateTimeField(
        auto_now_add=True, verbose_name="Data de Cadastro")
    data_atualizacao = models.DateTimeField(
        auto_now=True, verbose_name="Última Atualização")

    class Meta:
        verbose_name = "Categoria de Auditoria"
        verbose_name_plural = "Categorias de Auditorias"
        unique_together = ('pilar', 'descricao')
        ordering = ['pilar__nome', 'descricao']

    def __str__(self):
        return f"{self.descricao} ({self.pilar.nome})"


class Norma(models.Model):
    descricao = models.CharField(
        max_length=255, unique=True, verbose_name="Descrição da Norma")
    revisao = models.CharField(max_length=100, verbose_name="Revisão")
    ativo = models.BooleanField(default=True, verbose_name="Ativo")
    data_cadastro = models.DateTimeField(
        auto_now_add=True, verbose_name="Data de Cadastro")
    data_atualizacao = models.DateTimeField(
        auto_now=True, verbose_name="Última Atualização")

    class Meta:
        verbose_name = "Norma"
        verbose_name_plural = "Normas"
        unique_together = ('descricao', 'revisao')
        ordering = ['descricao', 'revisao']

    def __str__(self):
        return f"{self.descricao} (Rev. {self.revisao})"


class RequisitoNorma(models.Model):
    norma = models.ForeignKey(
        Norma,
        on_delete=models.CASCADE,
        verbose_name="Norma",
        related_name='requisitos'
    )
    codigo = models.CharField(max_length=50, verbose_name="Código")
    requisito = models.CharField(max_length=255, verbose_name="Requisito")
    descricao = models.TextField(
        null=True, blank=True, verbose_name="Descrição")
    ativo = models.BooleanField(default=True, verbose_name="Ativo")
    data_cadastro = models.DateTimeField(
        auto_now_add=True, verbose_name="Data de Cadastro")
    data_atualizacao = models.DateTimeField(
        auto_now=True, verbose_name="Última Atualização")

    class Meta:
        verbose_name = "Requisito de Norma"
        verbose_name_plural = "Requisitos de Normas"
        unique_together = ('norma', 'codigo')
        ordering = ['norma__descricao', 'codigo']

    def __str__(self):
        return f"{self.codigo} - {self.norma.descricao}"


class FerramentaDigital(models.Model):
    nome = models.CharField(max_length=100, unique=True,
                            verbose_name="Nome da Ferramenta")

    class Meta:
        verbose_name = "Ferramenta Digital"
        verbose_name_plural = "Ferramentas Digitais"
        ordering = ['nome']

    def __str__(self):
        return self.nome


class Checklist(models.Model):
    nome = models.CharField(max_length=255, verbose_name="Nome do Checklist")
    ativo = models.BooleanField(default=True, verbose_name="Ativo")
    ferramenta = models.ForeignKey(
        FerramentaDigital,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        verbose_name="Ferramenta Digital",
        related_name='checklists'
    )
    data_cadastro = models.DateTimeField(
        auto_now_add=True, verbose_name="Data de Cadastro")
    data_atualizacao = models.DateTimeField(
        auto_now=True, verbose_name="Última Atualização")

    class Meta:
        verbose_name = "Checklist"
        verbose_name_plural = "Checklists"
        ordering = ['nome']

    def __str__(self):
        return self.nome


class Topico(models.Model):
    checklist = models.ForeignKey(
        Checklist,
        on_delete=models.CASCADE,
        verbose_name="Checklist",
        related_name='topicos'
    )
    descricao = models.CharField(
        max_length=255, verbose_name="Descrição do Tópico")
    ordem = models.IntegerField(default=0, verbose_name="Ordem")

    class Meta:
        verbose_name = "Tópico"
        verbose_name_plural = "Tópicos"
        unique_together = ('checklist', 'descricao')
        ordering = ['ordem', 'descricao']

    def __str__(self):
        return self.descricao


class Pergunta(models.Model):
    topico = models.ForeignKey(
        Topico,
        on_delete=models.CASCADE,
        verbose_name="Tópico",
        related_name='perguntas'
    )
    descricao = models.TextField(verbose_name="Descrição da Pergunta")

    # Novos campos para tipos de resposta
    resposta_livre = models.BooleanField(
        default=False, verbose_name="Permitir Resposta Livre")
    foto = models.BooleanField(default=False, verbose_name="Permitir Foto")
    criar_opcao = models.BooleanField(
        default=True, verbose_name="Permitir Criar uma Opção")
    porcentagem = models.BooleanField(
        default=False, verbose_name="Permitir Porcentagem")

    # Campo para definir se a resposta é obrigatória
    obrigatoria = models.BooleanField(
        default=False, verbose_name="Resposta Obrigatória")

    campo_obrigatorio = models.BooleanField(
        default=False, verbose_name="Campo Obrigatório")
    campo_desabilitado = models.BooleanField(
        default=False, verbose_name="Campo Desabilitado")
    ordem = models.IntegerField(default=0, verbose_name="Ordem")

    class Meta:
        verbose_name = "Pergunta"
        verbose_name_plural = "Perguntas"
        unique_together = ('topico', 'descricao')
        ordering = ['ordem', 'descricao']

    def __str__(self):
        return self.descricao[:50] + '...' if len(self.descricao) > 50 else self.descricao


class OpcaoResposta(models.Model):
    pergunta = models.ForeignKey(
        Pergunta, on_delete=models.CASCADE, related_name='opcoes_resposta')
    descricao = models.CharField(
        max_length=255, verbose_name="Descrição da Opção")
    status = models.CharField(
        max_length=20,
        choices=[
            ('CONFORME', 'Conforme'),
            ('NAO_CONFORME', 'Não Conforme'),
            ('DESVIO_SOLUCIONADO', 'Desvio Solucionado'),
            ('NA', 'N/A'),
        ],
        verbose_name="Status Vinculado"
    )

    class Meta:
        verbose_name = "Opção de Resposta"
        verbose_name_plural = "Opções de Resposta"
        ordering = ['descricao']

    def __str__(self):
        return f"{self.descricao} ({self.get_status_display()})"


class OpcaoPorcentagem(models.Model):
    pergunta = models.ForeignKey(
        Pergunta, on_delete=models.CASCADE, related_name='opcoes_porcentagem')
    descricao = models.CharField(max_length=255, verbose_name="Descrição")
    peso = models.PositiveIntegerField(verbose_name="Peso (%)")
    # Para armazenar o código hexadecimal da cor
    cor = models.CharField(max_length=7, default='#FFFFFF', verbose_name="Cor")

    class Meta:
        verbose_name = "Opção de Porcentagem"
        verbose_name_plural = "Opções de Porcentagem"
        ordering = ['peso']

    def __str__(self):
        return f"{self.descricao} - {self.peso}%"


class FerramentaCausaRaiz(models.Model):
    nome = models.CharField(max_length=100, unique=True,
                            verbose_name="Nome da Ferramenta")

    class Meta:
        verbose_name = "Ferramenta de Causa Raiz"
        verbose_name_plural = "Ferramentas de Causa Raiz"
        ordering = ['nome']

    def __str__(self):
        return self.nome


class ModeloAuditoria(models.Model):
    descricao = models.CharField(
        max_length=255, verbose_name="Descrição do Modelo")
    ativo = models.BooleanField(default=True, verbose_name="Ativo")
    iniciar_por_codigo_qr = models.BooleanField(
        default=False, verbose_name="Iniciar por Código QR")
    checklist = models.ForeignKey(
        Checklist,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        verbose_name="Checklist",
        related_name='modelos_auditoria'
    )
    categoria = models.ForeignKey(
        CategoriaAuditoria,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        verbose_name="Categoria",
        related_name='modelos_auditoria'
    )
    ferramenta_causa_raiz = models.ForeignKey(
        FerramentaCausaRaiz,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        verbose_name="Ferramenta para Causa Raiz",
        related_name='modelos_auditoria'
    )
    data_cadastro = models.DateTimeField(
        auto_now_add=True, verbose_name="Data de Cadastro")
    data_atualizacao = models.DateTimeField(
        auto_now=True, verbose_name="Última Atualização")

    class Meta:
        verbose_name = "Modelo de Auditoria"
        verbose_name_plural = "Modelos de Auditoria"
        ordering = ['descricao']

    def __str__(self):
        return self.descricao


NIVEIS_ORGANIZACIONAIS = [
    ('EMPRESA', 'Empresa'),
    ('AREA', 'Área'),
    ('SETOR', 'Setor'),
    ('SUBSETOR', 'Subsetor'),
]

CATEGORIAS_AUDITORIA = [
    ('APP', 'App'),
    ('WEB', 'Web'),
]

FREQUENCIAS_AGENDAMENTO = [
    ('DIARIO', 'Diário'),
    ('SEMANAL', 'Semanal'),
    ('QUINZENAL', 'Quinzenal'),
    ('MENSAL', 'Mensal'),
    ('ANUAL', 'Anual'),
]


class Auditoria(models.Model):
    ferramenta = models.ForeignKey(
        FerramentaDigital,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        verbose_name="Ferramenta Digital"
    )
    responsavel = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        verbose_name="Responsável"
    )
    nivel_organizacional = models.CharField(
        max_length=50,
        choices=[
            ('EMPRESA', 'Empresa'),
            ('AREA', 'Área'),
            ('SETOR', 'Setor'),
            ('SUBSETOR', 'Subsetor'),
        ],
        verbose_name="Nível"
    )
    local_empresa = models.ForeignKey(
        'organizacao.Empresa',
        on_delete=models.SET_NULL,
        null=True, blank=True,
        verbose_name="Local (Empresa)"
    )
    local_area = models.ForeignKey(
        'organizacao.Area',
        on_delete=models.SET_NULL,
        null=True, blank=True,
        verbose_name="Local (Área)"
    )
    local_setor = models.ForeignKey(
        'organizacao.Setor',
        on_delete=models.SET_NULL,
        null=True, blank=True,
        verbose_name="Local (Setor)"
    )
    local_subsetor = models.ForeignKey(
        'organizacao.SubSetor',
        on_delete=models.SET_NULL,
        null=True, blank=True,
        verbose_name="Local (Subsetor)"
    )
    modelos = models.ManyToManyField(
        ModeloAuditoria, verbose_name="Modelos de Auditoria")
    ativos_auditados = models.ManyToManyField(
        Ativo, verbose_name="Ativos Auditados", related_name='auditorias_agendadas')
    categoria_auditoria = models.CharField(
        max_length=10,
        choices=CATEGORIAS_AUDITORIA,
        verbose_name="Categoria"
    )
    turnos = models.ManyToManyField(
        Turno,
        blank=True,
        verbose_name="Turnos"
    )
    data_inicio = models.DateField(verbose_name="Data de Início")
    data_fim = models.DateField(
        null=True, blank=True, verbose_name="Data de Fim")
    por_frequencia = models.BooleanField(
        default=False, verbose_name="Por Frequência")
    por_intervalo = models.BooleanField(
        default=False, verbose_name="Por Intervalo")
    frequencia = models.CharField(
        max_length=10,
        choices=FREQUENCIAS_AGENDAMENTO,
        null=True, blank=True,
        verbose_name="Frequência"
    )
    intervalo = models.IntegerField(
        null=True, blank=True, verbose_name="Intervalo")
    numero_repeticoes = models.IntegerField(
        null=True, blank=True, verbose_name="Número de Repetições")
    pular_finais_semana = models.BooleanField(
        default=False, verbose_name="Pular Finais de Semana")
    contem_turnos = models.BooleanField(
        default=False, verbose_name="Contém Turnos")
    data_criacao = models.DateTimeField(
        auto_now_add=True, verbose_name="Data de Criação")
    data_atualizacao = models.DateTimeField(
        auto_now=True, verbose_name="Última Atualização")

    class Meta:
        verbose_name = "Auditoria Agendada"
        verbose_name_plural = "Auditorias Agendadas"
        ordering = ['-data_criacao']

    def __str__(self):
        return f"Auditoria agendada para {self.get_nivel_organizacional_display()} - {self.data_inicio}"

    def save(self, *args, **kwargs):
        is_new = self._state.adding
        super().save(*args, **kwargs)

        if not is_new:
            self.instancias.filter(
                executada=False,
                data_execucao__gte=timezone.now().date()
            ).delete()

        # Lógica de geração de instâncias (VERSÃO CORRIGIDA)
        if self.data_inicio:
            dates_to_create = []
            current_date = self.data_inicio
            repetitions = self.numero_repeticoes if self.numero_repeticoes and self.numero_repeticoes > 0 else 1

            # CASO 1: SEM DATA FINAL (AUDITORIA ÚNICA)
            if not self.data_fim:
                if not (self.pular_finais_semana and current_date.weekday() >= 5):
                    for _ in range(repetitions):
                        dates_to_create.append(current_date)

            # CASO 2: COM DATA FINAL
            else:
                loop_limit = 365 * 5
                loops = 0
                while current_date <= self.data_fim and loops < loop_limit:
                    loops += 1

                    if not (self.pular_finais_semana and current_date.weekday() >= 5):
                        for _ in range(repetitions):
                            dates_to_create.append(current_date)

                    # Calcula a próxima data
                    if self.por_intervalo:
                        # LÓGICA DE INTERVALO CORRIGIDA
                        interval = self.intervalo if self.intervalo else 0
                        current_date += timedelta(days=interval + 1)
                    elif self.por_frequencia:
                        if self.frequencia == 'DIARIO':
                            current_date += timedelta(days=1)
                        elif self.frequencia == 'SEMANAL':
                            current_date += timedelta(weeks=1)
                        elif self.frequencia == 'QUINZENAL':
                            current_date += timedelta(weeks=2)
                        elif self.frequencia == 'MENSAL':
                            current_date += relativedelta(months=1)
                        elif self.frequencia == 'ANUAL':
                            current_date += relativedelta(years=1)
                        else:  # Fallback para diário se frequência for inválida
                            current_date += timedelta(days=1)
                    else:  # Intervalo simples de datas
                        current_date += timedelta(days=1)

            # Cria as instâncias no banco de uma forma otimizada
            for dt in dates_to_create:
                AuditoriaInstancia.objects.get_or_create(
                    auditoria_agendada=self,
                    data_execucao=dt
                )


class AuditoriaInstancia(models.Model):
    auditoria_agendada = models.ForeignKey(
        Auditoria,
        on_delete=models.CASCADE,
        verbose_name="Auditoria Agendada",
        related_name='instancias'
    )
    data_execucao = models.DateField(verbose_name="Data de Execução")
    executada = models.BooleanField(default=False, verbose_name="Executada?")

    class Meta:
        verbose_name = "Instância de Auditoria"
        verbose_name_plural = "Instâncias de Auditoria"
        ordering = ['data_execucao']

    def __str__(self):
        return f"Execução em {self.data_execucao} de {self.auditoria_agendada}"


class Resposta(models.Model):

    auditoria_instancia = models.ForeignKey(
        AuditoriaInstancia,
        on_delete=models.CASCADE,
        related_name='respostas',
        verbose_name="Instância da Auditoria"
    )
    pergunta = models.ForeignKey(
        Pergunta,
        on_delete=models.CASCADE,
        related_name='respostas',
        verbose_name="Pergunta"
    )
    # Campos para cada tipo de resposta possível (a maioria será nula)
    opcao_resposta = models.ForeignKey(
        OpcaoResposta,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        verbose_name="Opção de Resposta Selecionada"
    )
    opcao_porcentagem = models.ForeignKey(
        OpcaoPorcentagem,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        verbose_name="Opção de Porcentagem Selecionada"
    )
    resposta_livre_texto = models.TextField(
        null=True, blank=True,
        verbose_name="Texto da Resposta Livre"
    )
    data_resposta = models.DateTimeField(
        auto_now_add=True, verbose_name="Data da Resposta")

    class Meta:
        verbose_name = "Resposta"
        verbose_name_plural = "Respostas"
        # Garante que só haja uma resposta por pergunta em cada auditoria
        unique_together = ('auditoria_instancia', 'pergunta')

    def __str__(self):
        return f"Resposta para '{self.pergunta.descricao[:30]}...' na auditoria {self.auditoria_instancia.id}"


class AnexoResposta(models.Model):
    """
    Armazena os arquivos (fotos) anexados a uma resposta.
    """
    resposta = models.ForeignKey(
        Resposta,
        on_delete=models.CASCADE,
        related_name='anexos',
        verbose_name="Resposta"
    )
    arquivo = models.FileField(
        upload_to='anexos_respostas/', verbose_name="Arquivo")
    data_upload = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = "Anexo da Resposta"
        verbose_name_plural = "Anexos das Respostas"

    def __str__(self):
        return f"Anexo para a resposta {self.resposta.id}"

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\serializers.py

# auditorias/serializers.py

from rest_framework import serializers
from .models import (
    Auditoria, AuditoriaInstancia, Checklist, Topico, Pergunta,
    OpcaoResposta, OpcaoPorcentagem, Resposta, AnexoResposta
)

import base64
import uuid
from django.core.files.base import ContentFile
from rest_framework import serializers


class Base64ImageField(serializers.ImageField):
    """
    Um campo de serializer que lida com imagens codificadas em Base64.
    """

    def to_internal_value(self, data):
        # Verifica se o dado recebido é uma string e tem o formato Base64
        if isinstance(data, str) and data.startswith('data:image'):
            # Separa o formato do conteúdo Base64
            format, imgstr = data.split(';base64,')
            ext = format.split('/')[-1]

            # Gera um nome de arquivo único
            file_name = f"{uuid.uuid4()}.{ext}"
            # Decodifica a string Base64 e a transforma em um arquivo que o Django entende
            data = ContentFile(base64.b64decode(imgstr), name=file_name)

        return super().to_internal_value(data)


# --- Serializers para a estrutura do Checklist ---


class OpcaoRespostaSerializer(serializers.ModelSerializer):
    class Meta:
        model = OpcaoResposta
        fields = ['id', 'descricao', 'status']


class OpcaoPorcentagemSerializer(serializers.ModelSerializer):
    class Meta:
        model = OpcaoPorcentagem
        fields = ['id', 'descricao', 'peso', 'cor']


class PerguntaSerializer(serializers.ModelSerializer):
    opcoes_resposta = OpcaoRespostaSerializer(many=True, read_only=True)
    opcoes_porcentagem = OpcaoPorcentagemSerializer(many=True, read_only=True)

    class Meta:
        model = Pergunta
        fields = [
            'id', 'descricao', 'ordem', 'obrigatoria',
            'resposta_livre', 'foto', 'criar_opcao', 'porcentagem',
            'opcoes_resposta', 'opcoes_porcentagem'
        ]


class TopicoSerializer(serializers.ModelSerializer):
    perguntas = PerguntaSerializer(many=True, read_only=True)

    class Meta:
        model = Topico
        fields = ['id', 'descricao', 'ordem', 'perguntas']


class ChecklistSerializer(serializers.ModelSerializer):
    topicos = TopicoSerializer(many=True, read_only=True)

    class Meta:
        model = Checklist
        fields = ['id', 'nome', 'topicos']


# --- Serializers para a Auditoria (simplificado) ---

class AuditoriaPaiSerializer(serializers.ModelSerializer):
    """ Serializer enriquecido para a Auditoria 'pai' """
    modelo_auditoria_nome = serializers.SerializerMethodField()
    checklist_nome = serializers.SerializerMethodField()
    # NOVO CAMPO: Para o nome do local
    local_nome = serializers.SerializerMethodField()
    # FORMATANDO A DATA
    data_criacao = serializers.DateTimeField(format="%d/%m/%Y", read_only=True)

    class Meta:
        model = Auditoria
        fields = [
            'id',
            'data_criacao',
            'modelo_auditoria_nome',
            'checklist_nome',
            'local_nome',  # Usaremos este campo unificado
        ]

    def get_modelo_auditoria_nome(self, obj):
        primeiro_modelo = obj.modelos.first()
        return primeiro_modelo.descricao if primeiro_modelo else 'N/A'

    def get_checklist_nome(self, obj):
        primeiro_modelo = obj.modelos.first()
        if primeiro_modelo and primeiro_modelo.checklist:
            return primeiro_modelo.checklist.nome
        return 'N/A'

    def get_local_nome(self, obj):
        """
        Retorna o nome do local específico com base no nível organizacional.
        """
        if obj.nivel_organizacional == 'SUBSETOR' and obj.local_subsetor:
            return obj.local_subsetor.nome
        if obj.nivel_organizacional == 'SETOR' and obj.local_setor:
            return obj.local_setor.nome
        if obj.nivel_organizacional == 'AREA' and obj.local_area:
            return obj.local_area.nome
        if obj.nivel_organizacional == 'EMPRESA' and obj.local_empresa:
            return obj.local_empresa.nome
        return 'Local não definido'

# --- Serializer para os Detalhes de UMA Auditoria ---


class AuditoriaInstanciaDetailSerializer(serializers.ModelSerializer):
    """
    Serializer completo para uma única Instância de Auditoria,
    incluindo o checklist completo.
    """
    # Usamos um SerializerMethodField para buscar o checklist de forma customizada
    checklist = serializers.SerializerMethodField()

    class Meta:
        model = AuditoriaInstancia
        fields = ['id', 'data_execucao', 'checklist']

    def get_checklist(self, obj):
        # Uma Auditoria (pai) pode ter vários Modelos, e cada Modelo um Checklist.
        # Para a API, vamos assumir que a instância se refere ao checklist do primeiro modelo associado.
        # Esta lógica pode ser ajustada se a regra de negócio for diferente.
        primeiro_modelo = obj.auditoria_agendada.modelos.first()
        if primeiro_modelo and primeiro_modelo.checklist:
            return ChecklistSerializer(primeiro_modelo.checklist).data
        return None


class AuditoriaInstanciaListSerializer(serializers.ModelSerializer):
    # Esta parte continua a mesma, mas agora o 'auditoria_info' virá com os novos campos
    auditoria_info = AuditoriaPaiSerializer(
        source='auditoria_agendada', read_only=True)

    class Meta:
        model = AuditoriaInstancia
        fields = [
            'id',
            'data_execucao',
            'executada',
            'auditoria_agendada',
            'auditoria_info'
        ]


class RespostaSerializer(serializers.ModelSerializer):
    """
    Serializer para receber, validar e CRIAR os dados de uma única resposta,
    incluindo anexos de fotos.
    """
    pergunta_id = serializers.IntegerField(write_only=True)
    # Novo campo para receber uma lista de imagens em Base64
    anexos_base64 = serializers.ListField(
        child=Base64ImageField(),
        required=False,    # O campo não é obrigatório
        write_only=True    # Usado apenas para receber dados, não para exibir
    )

    class Meta:
        model = Resposta
        fields = [
            'pergunta_id',
            'opcao_resposta',
            'opcao_porcentagem',
            'resposta_livre_texto',
            'anexos_base64',  # Adicione o novo campo aqui
        ]

    def create(self, validated_data):
        # Pega a lista de anexos (fotos) e remove do dicionário principal
        anexos_data = validated_data.pop('anexos_base64', [])

        # Pega a instância da auditoria que passamos da view
        instancia = self.context['auditoria_instancia']

        # Cria o objeto Resposta com os dados restantes
        resposta = Resposta.objects.create(
            auditoria_instancia=instancia,
            **validated_data
        )

        # Se houver anexos, cria os objetos AnexoResposta
        for anexo_file in anexos_data:
            AnexoResposta.objects.create(resposta=resposta, arquivo=anexo_file)

        return resposta

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\tests.py

from django.test import TestCase

# Create your tests here.

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\urls.py

# auditorias/urls.py

from django.urls import path
from . import views

app_name = 'auditorias'

urlpatterns = [
    path('dashboard/', views.dashboard_auditorias, name='dashboard'),

    path('pilares/', views.lista_pilares, name='lista_pilares'),
    path('pilares/criar/', views.criar_pilar, name='criar_pilar'),
    path('pilares/<int:pk>/editar/', views.editar_pilar, name='editar_pilar'),
    path('pilares/<int:pk>/deletar/', views.deletar_pilar, name='deletar_pilar'),

    path('categorias/', views.lista_categorias_auditoria,
         name='lista_categorias_auditoria'),
    path('categorias/criar/', views.criar_categoria_auditoria,
         name='criar_categoria_auditoria'),
    path('categorias/<int:pk>/editar/', views.editar_categoria_auditoria,
         name='editar_categoria_auditoria'),
    path('categorias/<int:pk>/deletar/', views.deletar_categoria_auditoria,
         name='deletar_categoria_auditoria'),

    path('normas/', views.lista_normas, name='lista_normas'),
    path('normas/criar/', views.criar_norma, name='criar_norma'),
    path('normas/<int:pk>/editar/', views.editar_norma, name='editar_norma'),
    path('normas/<int:pk>/deletar/', views.deletar_norma, name='deletar_norma'),

    path('ferramentas-digitais/', views.lista_ferramentas_digitais,
         name='lista_ferramentas_digitais'),
    path('ferramentas-digitais/criar/', views.criar_ferramenta_digital,
         name='criar_ferramenta_digital'),
    path('ferramentas-digitais/<int:pk>/editar/',
         views.editar_ferramenta_digital, name='editar_ferramenta_digital'),
    path('ferramentas-digitais/<int:pk>/deletar/',
         views.deletar_ferramenta_digital, name='deletar_ferramenta_digital'),

    path('checklists/', views.lista_checklists, name='lista_checklists'),
    path('checklists/criar/', views.criar_checklist, name='criar_checklist'),
    path('checklists/<int:pk>/editar/',
         views.editar_checklist, name='editar_checklist'),
    path('checklists/<int:pk>/deletar/',
         views.deletar_checklist, name='deletar_checklist'),

    path('modelos-auditoria/', views.lista_modelos_auditoria,
         name='lista_modelos_auditoria'),
    path('modelos-auditoria/criar/', views.criar_modelo_auditoria,
         name='criar_modelo_auditoria'),
    path('modelos-auditoria/<int:pk>/editar/',
         views.editar_modelo_auditoria, name='editar_modelo_auditoria'),
    path('modelos-auditoria/<int:pk>/deletar/',
         views.deletar_modelo_auditoria, name='deletar_modelo_auditoria'),

    path('auditorias/', views.lista_auditorias, name='lista_auditorias'),
    path('auditorias/criar/', views.criar_auditoria, name='criar_auditoria'),
    path('auditorias/<int:pk>/editar/',
         views.editar_auditoria, name='editar_auditoria'),
    path('auditorias/<int:pk>/deletar/',
         views.deletar_auditoria, name='deletar_auditoria'),

    path('ajax/areas-por-empresa/', views.get_areas_por_empresa,
         name='get_areas_por_empresa'),
    path('ajax/setores-por-area/', views.get_setores_por_area,
         name='get_setores_por_area'),
    path('ajax/subsetores-por-setor/', views.get_subsetores_por_setor,
         name='get_subsetores_por_setor'),
    path('ajax/ativos-por-local/', views.get_ativos_por_local,
         name='get_ativos_por_local'),

    path('ajax/preview-dates/', views.preview_audit_dates,
         name='preview_audit_dates'),

]

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\views.py

# auditorias/views.py

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.core.paginator import Paginator
from django.db.models import Q
from django.http import JsonResponse
from django.urls import reverse
from django.views.decorators.http import require_http_methods
from django.views.decorators.csrf import csrf_exempt
import json
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta

from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework import status
from .serializers import RespostaSerializer

# Altere ListAPIView para incluir RetrieveAPIView
from rest_framework.generics import ListAPIView, RetrieveAPIView
from rest_framework.permissions import IsAuthenticated
# Altere a importação dos serializers
from .serializers import AuditoriaInstanciaListSerializer, AuditoriaInstanciaDetailSerializer

from .models import (
    Pilar, CategoriaAuditoria, Norma, RequisitoNorma, FerramentaDigital,
    Checklist, Topico, Pergunta, OpcaoResposta, OpcaoPorcentagem,
    FerramentaCausaRaiz, ModeloAuditoria, Auditoria, AuditoriaInstancia, Resposta
)
from organizacao.models import Empresa, Area, Setor, SubSetor
from ativos.models import Ativo
from cadastros_base.models import Turno
from usuarios.models import Usuario


# ============================================================================
# VIEWS PRINCIPAIS - DASHBOARD E LISTAGENS
# ============================================================================

@login_required
def dashboard_auditorias(request):
    """Dashboard principal do módulo de auditorias"""
    context = {
        'total_auditorias': Auditoria.objects.count(),
        'total_modelos': ModeloAuditoria.objects.count(),
        'total_checklists': Checklist.objects.count(),
        'total_pilares': Pilar.objects.count(),
        'auditorias_recentes': Auditoria.objects.order_by('-data_criacao')[:5],
        'instancias_pendentes': AuditoriaInstancia.objects.filter(executada=False).count(),
    }
    return render(request, 'auditorias/dashboard.html', context)


# ============================================================================
# VIEWS PARA PILARES
# ============================================================================

@login_required
def lista_pilares(request):
    """Lista todos os pilares com busca e paginação"""
    search = request.GET.get('search', '')
    pilares = Pilar.objects.all()

    if search:
        pilares = pilares.filter(
            Q(nome__icontains=search) | Q(descricao__icontains=search)
        )

    paginator = Paginator(pilares, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'page_obj': page_obj,
        'search': search,
        'title': 'Pilares',
        'singular': 'Pilar',
        'button_text': 'Novo Pilar',
        'create_url': 'auditorias:criar_pilar',
        'artigo': 'o',
        'empty_message': 'Nenhum pilar cadastrado',
        'empty_subtitle': 'Comece criando o primeiro pilar.'
    }
    return render(request, 'auditorias/pilares/lista.html', context)


@login_required
def criar_pilar(request):
    """Cria um novo pilar"""
    if request.method == 'POST':
        nome = request.POST.get('nome')
        descricao = request.POST.get('descricao', '')
        ativo = request.POST.get('ativo') == 'on'

        if nome:
            try:
                Pilar.objects.create(
                    nome=nome,
                    descricao=descricao,
                    ativo=ativo
                )
                messages.success(request, 'Pilar criado com sucesso!')
                return redirect('auditorias:lista_pilares')
            except Exception as e:
                messages.error(request, f'Erro ao criar pilar: {repr(e)}')
        else:
            messages.error(request, 'Nome é obrigatório!')

    context = {
        'title': 'Criar Pilar',
        'back_url': 'auditorias:lista_pilares'
    }
    return render(request, 'auditorias/pilares/form.html', context)


@login_required
def editar_pilar(request, pk):
    """Edita um pilar existente"""
    pilar = get_object_or_404(Pilar, pk=pk)

    if request.method == 'POST':
        pilar.nome = request.POST.get('nome')
        pilar.descricao = request.POST.get('descricao', '')
        pilar.ativo = request.POST.get('ativo') == 'on'

        try:
            pilar.save()
            messages.success(request, 'Pilar atualizado com sucesso!')
            return redirect('auditorias:lista_pilares')
        except Exception as e:
            messages.error(request, f'Erro ao atualizar pilar: {repr(e)}')

    context = {
        'pilar': pilar,
        'title': 'Editar Pilar',
        'back_url': 'auditorias:lista_pilares'
    }
    return render(request, 'auditorias/pilares/form.html', context)


@login_required
def deletar_pilar(request, pk):
    """Deleta um pilar"""
    pilar = get_object_or_404(Pilar, pk=pk)

    if request.method == 'POST':
        try:
            pilar.delete()
            messages.success(request, 'Pilar deletado com sucesso!')
        except Exception as e:
            messages.error(request, f'Erro ao deletar pilar: {repr(e)}')
        return redirect('auditorias:lista_pilares')

    context = {
        'object': pilar,
        'title': 'Pilar'
    }
    return render(request, 'auditorias/deletar_generico.html', context)


# ============================================================================
# VIEWS PARA CATEGORias DE AUDITORIA
# ============================================================================

@login_required
def lista_categorias_auditoria(request):
    """Lista todas as categorias de auditoria"""
    search = request.GET.get('search', '')
    categorias = CategoriaAuditoria.objects.select_related('pilar').all()

    if search:
        categorias = categorias.filter(
            Q(descricao__icontains=search) | Q(pilar__nome__icontains=search)
        )

    paginator = Paginator(categorias, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'page_obj': page_obj,
        'search': search,
        'title': 'Categorias de Auditoria',
        'singular': 'Categoria de Auditoria',
        'button_text': 'Nova Categoria de Auditoria',
        'create_url': 'auditorias:criar_categoria_auditoria',
        'artigo': 'a',
        'empty_message': 'Nenhuma categoria de auditoria cadastrada',
        'empty_subtitle': 'Comece criando a primeira categoria de auditoria.'
    }
    return render(request, 'auditorias/categorias/lista.html', context)


@login_required
def criar_categoria_auditoria(request):
    """Cria uma nova categoria de auditoria"""
    if request.method == 'POST':
        pilar_id = request.POST.get('pilar')
        descricao = request.POST.get('descricao')
        ativo = request.POST.get('ativo') == 'on'

        if pilar_id and descricao:
            try:
                pilar = Pilar.objects.get(pk=pilar_id)
                CategoriaAuditoria.objects.create(
                    pilar=pilar,
                    descricao=descricao,
                    ativo=ativo
                )
                messages.success(request, 'Categoria criada com sucesso!')
                return redirect('auditorias:lista_categorias_auditoria')
            except Exception as e:
                messages.error(request, f'Erro ao criar categoria: {repr(e)}')
        else:
            messages.error(request, 'Pilar e descrição são obrigatórios!')

    context = {
        'pilares': Pilar.objects.filter(ativo=True),
        'title': 'Criar Categoria de Auditoria',
        'back_url': 'auditorias:lista_categorias_auditoria'
    }
    return render(request, 'auditorias/categorias/form.html', context)


@login_required
def editar_categoria_auditoria(request, pk):
    """Edita uma categoria de auditoria existente"""
    categoria = get_object_or_404(CategoriaAuditoria, pk=pk)

    if request.method == 'POST':
        pilar_id = request.POST.get('pilar')
        categoria.descricao = request.POST.get('descricao')
        categoria.ativo = request.POST.get('ativo') == 'on'

        if pilar_id:
            categoria.pilar = Pilar.objects.get(pk=pilar_id)

        try:
            categoria.save()
            messages.success(request, 'Categoria atualizada com sucesso!')
            return redirect('auditorias:lista_categorias_auditoria')
        except Exception as e:
            messages.error(request, f'Erro ao atualizar categoria: {repr(e)}')

    context = {
        'categoria': categoria,
        'pilares': Pilar.objects.filter(ativo=True),
        'title': 'Editar Categoria de Auditoria',
        'back_url': 'auditorias:lista_categorias_auditoria'
    }
    return render(request, 'auditorias/categorias/form.html', context)


@login_required
def deletar_categoria_auditoria(request, pk):
    """Deleta uma categoria de auditoria"""
    categoria = get_object_or_404(CategoriaAuditoria, pk=pk)

    if request.method == 'POST':
        try:
            categoria.delete()
            messages.success(request, 'Categoria deletada com sucesso!')
        except Exception as e:
            messages.error(request, f'Erro ao deletar categoria: {repr(e)}')
        return redirect('auditorias:lista_categorias_auditoria')

    context = {
        'object': categoria,
        'title': 'Categoria de Auditoria'
    }
    return render(request, 'auditorias/deletar_generico.html', context)


# ============================================================================
# VIEWS PARA NORMAS
# ============================================================================

@login_required
def lista_normas(request):
    """Lista todas as normas"""
    search = request.GET.get('search', '')
    normas = Norma.objects.all()

    if search:
        normas = normas.filter(
            Q(descricao__icontains=search) | Q(revisao__icontains=search)
        )

    paginator = Paginator(normas, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'page_obj': page_obj,
        'search': search,
        'title': 'Normas',
        'singular': 'Norma',
        'button_text': 'Nova Norma',
        'create_url': 'auditorias:criar_norma',
        'artigo': 'a',
        'empty_message': 'Nenhuma norma cadastrada',
        'empty_subtitle': 'Comece criando a primeira norma.'
    }
    return render(request, 'auditorias/normas/lista.html', context)


@login_required
def criar_norma(request):
    """Cria uma nova norma"""
    if request.method == 'POST':
        descricao = request.POST.get('descricao')
        revisao = request.POST.get('revisao')
        ativo = request.POST.get('ativo') == 'on'

        if descricao and revisao:
            try:
                Norma.objects.create(
                    descricao=descricao,
                    revisao=revisao,
                    ativo=ativo
                )
                messages.success(request, 'Norma criada com sucesso!')
                return redirect('auditorias:lista_normas')
            except Exception as e:
                messages.error(request, f'Erro ao criar norma: {repr(e)}')
        else:
            messages.error(request, 'Descrição e revisão são obrigatórios!')

    context = {
        'title': 'Criar Norma',
        'back_url': 'auditorias:lista_normas'
    }
    return render(request, 'auditorias/normas/form.html', context)


@login_required
def editar_norma(request, pk):
    """Edita uma norma existente"""
    norma = get_object_or_404(Norma, pk=pk)

    if request.method == 'POST':
        norma.descricao = request.POST.get('descricao')
        norma.revisao = request.POST.get('revisao')
        norma.ativo = request.POST.get('ativo') == 'on'

        try:
            norma.save()
            messages.success(request, 'Norma atualizada com sucesso!')
            return redirect('auditorias:lista_normas')
        except Exception as e:
            messages.error(request, f'Erro ao atualizar norma: {repr(e)}')

    context = {
        'norma': norma,
        'title': 'Editar Norma',
        'back_url': 'auditorias:lista_normas'
    }
    return render(request, 'auditorias/normas/form.html', context)


@login_required
def deletar_norma(request, pk):
    """Deleta uma norma"""
    norma = get_object_or_404(Norma, pk=pk)

    if request.method == 'POST':
        try:
            norma.delete()
            messages.success(request, 'Norma deletada com sucesso!')
        except Exception as e:
            messages.error(request, f'Erro ao deletar norma: {repr(e)}')
        return redirect('auditorias:lista_normas')

    context = {
        'object': norma,
        'title': 'Norma'
    }
    return render(request, 'auditorias/deletar_generico.html', context)


# ============================================================================
# VIEWS PARA FERRAMENTAS DIGITAIS
# ============================================================================

@login_required
def lista_ferramentas_digitais(request):
    """Lista todas as ferramentas digitais"""
    search = request.GET.get('search', '')
    ferramentas = FerramentaDigital.objects.all()

    if search:
        ferramentas = ferramentas.filter(nome__icontains=search)

    paginator = Paginator(ferramentas, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'page_obj': page_obj,
        'search': search,
        'title': 'Ferramentas Digitais',
        'singular': 'Ferramenta Digital',
        'button_text': 'Nova Ferramenta Digital',
        'create_url': 'auditorias:criar_ferramenta_digital',
        'artigo': 'a',
        'empty_message': 'Nenhuma ferramenta digital cadastrada',
        'empty_subtitle': 'Comece criando a primeira ferramenta digital.'
    }
    return render(request, 'auditorias/ferramentas_digitais/lista.html', context)


@login_required
def criar_ferramenta_digital(request):
    """Cria uma nova ferramenta digital"""
    if request.method == 'POST':
        nome = request.POST.get('nome')

        if nome:
            try:
                FerramentaDigital.objects.create(nome=nome)
                messages.success(
                    request, 'Ferramenta digital criada com sucesso!')
                return redirect('auditorias:lista_ferramentas_digitais')
            except Exception as e:
                messages.error(request, f'Erro ao criar ferramenta: {repr(e)}')
        else:
            messages.error(request, 'Nome é obrigatório!')

    context = {
        'title': 'Criar Ferramenta Digital',
        'back_url': 'auditorias:lista_ferramentas_digitais'
    }
    return render(request, 'auditorias/ferramentas_digitais/form.html', context)


@login_required
def editar_ferramenta_digital(request, pk):
    """Edita uma ferramenta digital existente"""
    ferramenta = get_object_or_404(FerramentaDigital, pk=pk)

    if request.method == 'POST':
        ferramenta.nome = request.POST.get('nome')

        try:
            ferramenta.save()
            messages.success(
                request, 'Ferramenta digital atualizada com sucesso!')
            return redirect('auditorias:lista_ferramentas_digitais')
        except Exception as e:
            messages.error(request, f'Erro ao atualizar ferramenta: {repr(e)}')

    context = {
        'ferramenta': ferramenta,
        'title': 'Editar Ferramenta Digital',
        'back_url': 'auditorias:lista_ferramentas_digitais'
    }
    return render(request, 'auditorias/ferramentas_digitais/form.html', context)


@login_required
def deletar_ferramenta_digital(request, pk):
    """Deleta uma ferramenta digital"""
    ferramenta = get_object_or_404(FerramentaDigital, pk=pk)

    if request.method == 'POST':
        try:
            ferramenta.delete()
            messages.success(
                request, 'Ferramenta digital deletada com sucesso!')
        except Exception as e:
            messages.error(request, f'Erro ao deletar ferramenta: {repr(e)}')
        return redirect('auditorias:lista_ferramentas_digitais')

    context = {
        'object': ferramenta,
        'title': 'Ferramenta Digital'
    }
    return render(request, 'auditorias/deletar_generico.html', context)


# ============================================================================
# VIEWS PARA CHECKLISTS
# ============================================================================

@login_required
def lista_checklists(request):
    """Lista todos os checklists"""
    search = request.GET.get('search', '')
    checklists = Checklist.objects.select_related('ferramenta').all()

    if search:
        checklists = checklists.filter(nome__icontains=search)

    paginator = Paginator(checklists, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'page_obj': page_obj,
        'search': search,
        'title': 'Checklists',
        'create_url': 'auditorias:criar_checklist'
    }
    return render(request, 'auditorias/checklists/lista.html', context)


@login_required
def criar_checklist(request):
    """Cria um novo checklist com estrutura completa."""
    if request.method == 'POST':
        nome = request.POST.get('nome')
        ferramenta_id = request.POST.get('ferramenta')
        ativo = request.POST.get('ativo') == 'on'

        if nome:
            try:
                # Criar o checklist básico
                checklist = Checklist.objects.create(
                    nome=nome,
                    ativo=ativo
                )

                if ferramenta_id:
                    checklist.ferramenta_id = ferramenta_id
                    checklist.save()

                # Processar tópicos e perguntas
                processar_estrutura_checklist(request, checklist)

                messages.success(request, 'Checklist criado com sucesso!')
                return redirect('auditorias:lista_checklists')
            except Exception as e:
                messages.error(request, f'Erro ao criar checklist: {repr(e)}')
                import traceback
                print(traceback.format_exc())
        else:
            messages.error(request, 'Nome é obrigatório!')

    context = {
        'ferramentas': FerramentaDigital.objects.all(),
        'status_opcoes': OpcaoResposta._meta.get_field('status').choices,
        'title': 'Criar Checklist',
        'back_url': 'auditorias:lista_checklists'
    }
    return render(request, 'auditorias/checklists/form.html', context)


@login_required
def editar_checklist(request, pk):
    """Edita um checklist existente, incluindo seus tópicos, perguntas e opções."""
    checklist = get_object_or_404(Checklist.objects.prefetch_related(
        'topicos__perguntas__opcoes_resposta',
        'topicos__perguntas__opcoes_porcentagem'
    ), pk=pk)

    if request.method == 'POST':
        try:
            # 1. ATUALIZAR DADOS DO CHECKLIST
            checklist.nome = request.POST.get('nome')
            checklist.ativo = request.POST.get('ativo') == 'on'
            ferramenta_id = request.POST.get('ferramenta')
            checklist.ferramenta_id = ferramenta_id if ferramenta_id else None
            checklist.save()

            # Processar estrutura completa
            processar_estrutura_checklist(request, checklist)

            messages.success(request, 'Checklist atualizado com sucesso!')
            return redirect('auditorias:lista_checklists')

        except Exception as e:
            messages.error(request, f'Erro ao atualizar checklist: {repr(e)}')
            import traceback
            print(traceback.format_exc())

    context = {
        'checklist': checklist,
        'object': checklist,
        'ferramentas': FerramentaDigital.objects.all(),
        'status_opcoes': OpcaoResposta._meta.get_field('status').choices,
        'title': 'Editar Checklist',
        'back_url': 'auditorias:lista_checklists'
    }
    return render(request, 'auditorias/checklists/form.html', context)


def processar_estrutura_checklist(request, checklist):
    """Processa e salva toda a estrutura de tópicos, perguntas e opções do checklist."""

    # Rastrear IDs processados para identificar o que deve ser deletado
    topicos_ids_processados = set()
    perguntas_ids_processadas = set()
    opcoes_resposta_ids_processadas = set()
    opcoes_porcentagem_ids_processadas = set()

    # Coletar todos os tópicos do POST
    topicos_data = {}
    for key in request.POST:
        if key.startswith('topico-descricao['):
            topico_id = key.split('[')[1].split(']')[0]
            topicos_data[topico_id] = {
                'descricao': request.POST.get(key),
                'ordem': request.POST.get(f'topico-ordem[{topico_id}]', 0)
            }

    print(f"Processando {len(topicos_data)} tópicos")

    # Processar cada tópico
    for topico_id_str, topico_info in topicos_data.items():
        # Criar ou atualizar tópico
        if topico_id_str.startswith('new-'):
            topico = Topico.objects.create(
                checklist=checklist,
                descricao=topico_info['descricao'],
                ordem=int(topico_info['ordem']) if topico_info['ordem'] else 0
            )
            print(f"Novo tópico criado: {topico.id}")
        else:
            try:
                topico = Topico.objects.get(
                    pk=int(topico_id_str), checklist=checklist)
                topico.descricao = topico_info['descricao']
                topico.ordem = int(
                    topico_info['ordem']) if topico_info['ordem'] else 0
                topico.save()
                print(f"Tópico atualizado: {topico.id}")
            except Topico.DoesNotExist:
                print(f"Tópico {topico_id_str} não encontrado, pulando...")
                continue

        topicos_ids_processados.add(topico.id)

        # Processar perguntas do tópico
        perguntas_data = {}
        for key in request.POST:
            if key.startswith(f'pergunta-descricao[{topico_id_str}-'):
                pergunta_id_full = key.split('[')[1].split(']')[0]
                pergunta_id = pergunta_id_full.replace(f'{topico_id_str}-', '')
                perguntas_data[pergunta_id] = {
                    'descricao': request.POST.get(key),
                    'ordem': request.POST.get(f'pergunta-ordem[{pergunta_id_full}]', 0),
                    'obrigatoria': request.POST.get(f'pergunta-obrigatorio[{pergunta_id_full}]') == 'on',
                    'resposta_livre': request.POST.get(f'pergunta-resposta_livre[{pergunta_id_full}]') == 'on',
                    'foto': request.POST.get(f'pergunta-foto[{pergunta_id_full}]') == 'on',
                    'criar_opcao': request.POST.get(f'pergunta-criar_opcao[{pergunta_id_full}]') == 'on',
                    'porcentagem': request.POST.get(f'pergunta-porcentagem[{pergunta_id_full}]') == 'on',
                    'id_full': pergunta_id_full
                }

        print(
            f"  Processando {len(perguntas_data)} perguntas do tópico {topico.id}")

        for pergunta_id_str, pergunta_info in perguntas_data.items():
            # Criar ou atualizar pergunta
            if pergunta_id_str.startswith('new-'):
                pergunta = Pergunta.objects.create(
                    topico=topico,
                    descricao=pergunta_info['descricao'],
                    ordem=int(pergunta_info['ordem']
                              ) if pergunta_info['ordem'] else 0,
                    obrigatoria=pergunta_info['obrigatoria'],
                    resposta_livre=pergunta_info['resposta_livre'],
                    foto=pergunta_info['foto'],
                    criar_opcao=pergunta_info['criar_opcao'],
                    porcentagem=pergunta_info['porcentagem']
                )
                print(f"    Nova pergunta criada: {pergunta.id}")
            else:
                try:
                    pergunta = Pergunta.objects.get(
                        pk=int(pergunta_id_str), topico=topico)
                    pergunta.descricao = pergunta_info['descricao']
                    pergunta.ordem = int(
                        pergunta_info['ordem']) if pergunta_info['ordem'] else 0
                    pergunta.obrigatoria = pergunta_info['obrigatoria']
                    pergunta.resposta_livre = pergunta_info['resposta_livre']
                    pergunta.foto = pergunta_info['foto']
                    pergunta.criar_opcao = pergunta_info['criar_opcao']
                    pergunta.porcentagem = pergunta_info['porcentagem']
                    pergunta.save()
                    print(f"    Pergunta atualizada: {pergunta.id}")
                except Pergunta.DoesNotExist:
                    print(
                        f"    Pergunta {pergunta_id_str} não encontrada, pulando...")
                    continue

            perguntas_ids_processadas.add(pergunta.id)

            # Processar opções de resposta
            if pergunta_info['criar_opcao']:
                opcoes_resposta_data = {}
                for key in request.POST:
                    if key.startswith(f'opcao-resposta-descricao[{pergunta_info["id_full"]}-'):
                        opcao_id_full = key.split('[')[1].split(']')[0]
                        opcao_id = opcao_id_full.replace(
                            f'{pergunta_info["id_full"]}-', '')
                        opcoes_resposta_data[opcao_id] = {
                            'descricao': request.POST.get(key),
                            'status': request.POST.get(f'opcao-resposta-status[{opcao_id_full}]', 'CONFORME')
                        }

                print(
                    f"      Processando {len(opcoes_resposta_data)} opções de resposta")

                for opcao_id_str, opcao_info in opcoes_resposta_data.items():
                    if opcao_id_str.startswith('new-'):
                        opcao = OpcaoResposta.objects.create(
                            pergunta=pergunta,
                            descricao=opcao_info['descricao'],
                            status=opcao_info['status']
                        )
                        print(
                            f"        Nova opção de resposta criada: {opcao.id}")
                    else:
                        try:
                            opcao = OpcaoResposta.objects.get(
                                pk=int(opcao_id_str), pergunta=pergunta)
                            opcao.descricao = opcao_info['descricao']
                            opcao.status = opcao_info['status']
                            opcao.save()
                            print(
                                f"        Opção de resposta atualizada: {opcao.id}")
                        except OpcaoResposta.DoesNotExist:
                            print(
                                f"        Opção de resposta {opcao_id_str} não encontrada")
                            continue

                    opcoes_resposta_ids_processadas.add(opcao.id)

            # Processar opções de porcentagem
            if pergunta_info['porcentagem']:
                opcoes_porcentagem_data = {}
                for key in request.POST:
                    if key.startswith(f'opcao-porcentagem-descricao[{pergunta_info["id_full"]}-'):
                        opcao_id_full = key.split('[')[1].split(']')[0]
                        opcao_id = opcao_id_full.replace(
                            f'{pergunta_info["id_full"]}-', '')
                        opcoes_porcentagem_data[opcao_id] = {
                            'descricao': request.POST.get(key),
                            'peso': request.POST.get(f'opcao-porcentagem-peso[{opcao_id_full}]', 0),
                            'cor': request.POST.get(f'opcao-porcentagem-cor[{opcao_id_full}]', '#FFFFFF')
                        }

                print(
                    f"      Processando {len(opcoes_porcentagem_data)} opções de porcentagem")

                for opcao_id_str, opcao_info in opcoes_porcentagem_data.items():
                    if opcao_id_str.startswith('new-'):
                        opcao = OpcaoPorcentagem.objects.create(
                            pergunta=pergunta,
                            descricao=opcao_info['descricao'],
                            peso=int(opcao_info['peso']
                                     ) if opcao_info['peso'] else 0,
                            cor=opcao_info['cor']
                        )
                        print(
                            f"        Nova opção de porcentagem criada: {opcao.id}")
                    else:
                        try:
                            opcao = OpcaoPorcentagem.objects.get(
                                pk=int(opcao_id_str), pergunta=pergunta)
                            opcao.descricao = opcao_info['descricao']
                            opcao.peso = int(
                                opcao_info['peso']) if opcao_info['peso'] else 0
                            opcao.cor = opcao_info['cor']
                            opcao.save()
                            print(
                                f"        Opção de porcentagem atualizada: {opcao.id}")
                        except OpcaoPorcentagem.DoesNotExist:
                            print(
                                f"        Opção de porcentagem {opcao_id_str} não encontrada")
                            continue

                    opcoes_porcentagem_ids_processadas.add(opcao.id)

    # Deletar itens que foram removidos do formulário
    print("\nRemovendo itens não processados...")

    # Deletar opções não processadas
    opcoes_resposta_deletadas = OpcaoResposta.objects.filter(
        pergunta__topico__checklist=checklist
    ).exclude(id__in=opcoes_resposta_ids_processadas).delete()
    print(f"Opções de resposta deletadas: {opcoes_resposta_deletadas}")

    opcoes_porcentagem_deletadas = OpcaoPorcentagem.objects.filter(
        pergunta__topico__checklist=checklist
    ).exclude(id__in=opcoes_porcentagem_ids_processadas).delete()
    print(f"Opções de porcentagem deletadas: {opcoes_porcentagem_deletadas}")

    # Deletar perguntas não processadas
    perguntas_deletadas = Pergunta.objects.filter(
        topico__checklist=checklist
    ).exclude(id__in=perguntas_ids_processadas).delete()
    print(f"Perguntas deletadas: {perguntas_deletadas}")

    # Deletar tópicos não processados
    topicos_deletados = Topico.objects.filter(
        checklist=checklist
    ).exclude(id__in=topicos_ids_processados).delete()
    print(f"Tópicos deletados: {topicos_deletados}")

    print(f"\nProcessamento concluído para checklist {checklist.id}")


@login_required
def deletar_checklist(request, pk):
    """Deleta um checklist"""
    checklist = get_object_or_404(Checklist, pk=pk)

    if request.method == 'POST':
        try:
            checklist.delete()
            messages.success(request, 'Checklist deletado com sucesso!')
        except Exception as e:
            messages.error(request, f'Erro ao deletar checklist: {repr(e)}')
        return redirect('auditorias:lista_checklists')

    context = {
        'object': checklist,
        'title': 'Checklist'
    }
    return render(request, 'auditorias/deletar_generico.html', context)

# ============================================================================
# VIEWS PARA MODELOS DE AUDITORIA
# ============================================================================


@login_required
def lista_modelos_auditoria(request):
    """Lista todos os modelos de auditoria"""
    search = request.GET.get('search', '')
    modelos = ModeloAuditoria.objects.select_related(
        'checklist', 'categoria', 'ferramenta_causa_raiz').all()

    if search:
        modelos = modelos.filter(descricao__icontains=search)

    paginator = Paginator(modelos, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'page_obj': page_obj,
        'search': search,
        'title': 'Modelos de Auditoria',
        'singular': 'Modelo de Auditoria',
        'button_text': 'Novo Modelo de Auditoria',
        'create_url': 'auditorias:criar_modelo_auditoria',
        'artigo': 'o',
        'empty_message': 'Nenhum modelo de auditoria cadastrado',
        'empty_subtitle': 'Comece criando o primeiro modelo de auditoria.'
    }
    return render(request, 'auditorias/modelos_auditoria/lista.html', context)


@login_required
def criar_modelo_auditoria(request):
    """Cria um novo modelo de auditoria"""
    if request.method == 'POST':
        descricao = request.POST.get('descricao')
        ativo = request.POST.get('ativo') == 'on'
        iniciar_por_codigo_qr = request.POST.get(
            'iniciar_por_codigo_qr') == 'on'
        checklist_id = request.POST.get('checklist')
        categoria_id = request.POST.get('categoria')
        ferramenta_causa_raiz_id = request.POST.get('ferramenta_causa_raiz')

        if descricao:
            try:
                modelo = ModeloAuditoria.objects.create(
                    descricao=descricao,
                    ativo=ativo,
                    iniciar_por_codigo_qr=iniciar_por_codigo_qr
                )

                if checklist_id:
                    modelo.checklist = Checklist.objects.get(pk=checklist_id)
                if categoria_id:
                    modelo.categoria = CategoriaAuditoria.objects.get(
                        pk=categoria_id)
                if ferramenta_causa_raiz_id:
                    modelo.ferramenta_causa_raiz = FerramentaCausaRaiz.objects.get(
                        pk=ferramenta_causa_raiz_id)

                modelo.save()
                messages.success(
                    request, 'Modelo de auditoria criado com sucesso!')
                return redirect('auditorias:lista_modelos_auditoria')
            except Exception as e:
                messages.error(request, f'Erro ao criar modelo: {repr(e)}')
        else:
            messages.error(request, 'Descrição é obrigatória!')

    context = {
        'checklists': Checklist.objects.filter(ativo=True),
        'categorias': CategoriaAuditoria.objects.filter(ativo=True),
        'ferramentas_causa_raiz': FerramentaCausaRaiz.objects.all(),
        'title': 'Criar Modelo de Auditoria',
        'back_url': 'auditorias:lista_modelos_auditoria'
    }
    return render(request, 'auditorias/modelos_auditoria/form.html', context)


@login_required
def editar_modelo_auditoria(request, pk):
    """Edita um modelo de auditoria existente"""
    modelo = get_object_or_404(ModeloAuditoria, pk=pk)

    if request.method == 'POST':
        modelo.descricao = request.POST.get('descricao')
        modelo.ativo = request.POST.get('ativo') == 'on'
        modelo.iniciar_por_codigo_qr = request.POST.get(
            'iniciar_por_codigo_qr') == 'on'

        checklist_id = request.POST.get('checklist')
        categoria_id = request.POST.get('categoria')
        ferramenta_causa_raiz_id = request.POST.get('ferramenta_causa_raiz')

        if checklist_id:
            modelo.checklist = Checklist.objects.get(pk=checklist_id)
        else:
            modelo.checklist = None

        if categoria_id:
            modelo.categoria = CategoriaAuditoria.objects.get(pk=categoria_id)
        else:
            modelo.categoria = None

        if ferramenta_causa_raiz_id:
            modelo.ferramenta_causa_raiz = FerramentaCausaRaiz.objects.get(
                pk=ferramenta_causa_raiz_id)
        else:
            modelo.ferramenta_causa_raiz = None

        try:
            modelo.save()
            messages.success(
                request, 'Modelo de auditoria atualizado com sucesso!')
            return redirect('auditorias:lista_modelos_auditoria')
        except Exception as e:
            messages.error(request, f'Erro ao atualizar modelo: {repr(e)}')

    context = {
        'modelo': modelo,
        'checklists': Checklist.objects.filter(ativo=True),
        'categorias': CategoriaAuditoria.objects.filter(ativo=True),
        'ferramentas_causa_raiz': FerramentaCausaRaiz.objects.all(),
        'title': 'Editar Modelo de Auditoria',
        'back_url': 'auditorias:lista_modelos_auditoria'
    }
    return render(request, 'auditorias/modelos_auditoria/form.html', context)


@login_required
def deletar_modelo_auditoria(request, pk):
    """Deleta um modelo de auditoria"""
    modelo = get_object_or_404(ModeloAuditoria, pk=pk)

    if request.method == 'POST':
        try:
            modelo.delete()
            messages.success(
                request, 'Modelo de auditoria deletado com sucesso!')
        except Exception as e:
            messages.error(request, f'Erro ao deletar modelo: {repr(e)}')
        return redirect('auditorias:lista_modelos_auditoria')

    context = {
        'object': modelo,
        'title': 'Modelo de Auditoria'
    }
    return render(request, 'auditorias/deletar_generico.html', context)


# ============================================================================
# VIEWS PARA AUDITORIAS
# ============================================================================

@login_required
def lista_auditorias(request):
    """Lista todas as auditorias agendadas"""
    search = request.GET.get('search', '')
    auditorias = Auditoria.objects.select_related(
        'responsavel', 'ferramenta').prefetch_related('modelos').all()

    if search:
        auditorias = auditorias.filter(
            Q(responsavel__first_name__icontains=search) |
            Q(responsavel__last_name__icontains=search) |
            Q(ferramenta__nome__icontains=search)
        )

    paginator = Paginator(auditorias, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'page_obj': page_obj,
        'search': search,
        'title': 'Auditorias Agendadas',
        'singular': 'Auditoria',
        'button_text': 'Nova Auditoria',
        'create_url': 'auditorias:criar_auditoria',
        'artigo': 'a',
        'empty_message': 'Nenhuma auditoria agendada',
        'empty_subtitle': 'Comece criando a primeira auditoria.'
    }
    return render(request, 'auditorias/auditorias/lista.html', context)


@login_required
def criar_auditoria(request):
    """Cria uma nova auditoria agendada"""
    if request.method == 'POST':
        # --- Captura todos os dados do formulário primeiro ---
        ferramenta_id = request.POST.get('ferramenta')
        responsavel_id = request.POST.get('responsavel')
        nivel_organizacional = request.POST.get('nivel_organizacional')
        data_inicio_str = request.POST.get('data_inicio')
        data_fim_str = request.POST.get('data_fim')

        local_empresa_id = request.POST.get('local_empresa') or None
        local_area_id = request.POST.get('local_area') or None
        local_setor_id = request.POST.get('local_setor') or None
        local_subsetor_id = request.POST.get('local_subsetor') or None

        modelos_ids = request.POST.getlist('modelos')
        ativos_ids = request.POST.getlist('ativos_auditados')
        turnos_ids = request.POST.getlist('turnos')

        if ferramenta_id and responsavel_id and nivel_organizacional and data_inicio_str:
            try:
                data_inicio = datetime.strptime(
                    data_inicio_str, '%Y-%m-%d').date()
                data_fim = datetime.strptime(
                    data_fim_str, '%Y-%m-%d').date() if data_fim_str else None

                # --- Monta o objeto com TODOS os dados ANTES de salvar ---
                auditoria = Auditoria(
                    ferramenta_id=ferramenta_id,
                    responsavel_id=responsavel_id,
                    nivel_organizacional=nivel_organizacional,
                    data_inicio=data_inicio,
                    data_fim=data_fim,
                    # Atribui todos os locais aqui
                    local_empresa_id=local_empresa_id,
                    local_area_id=local_area_id,
                    local_setor_id=local_setor_id,
                    local_subsetor_id=local_subsetor_id,
                    # Outros campos...
                    categoria_auditoria=request.POST.get(
                        'categoria_auditoria'),
                    por_frequencia=request.POST.get('por_frequencia') == 'on',
                    por_intervalo=request.POST.get('por_intervalo') == 'on',
                    frequencia=request.POST.get('frequencia') or None,
                    intervalo=int(request.POST.get('intervalo')
                                  ) if request.POST.get('intervalo') else None,
                    numero_repeticoes=int(request.POST.get('numero_repeticoes')) if request.POST.get(
                        'numero_repeticoes') else None,
                    pular_finais_semana=request.POST.get(
                        'pular_finais_semana') == 'on',
                    contem_turnos=request.POST.get('contem_turnos') == 'on'
                )

                # --- Salva TUDO de uma vez (isso também dispara a criação das instâncias) ---
                auditoria.save()

                # Define as relações ManyToMany DEPOIS do primeiro save
                if modelos_ids:
                    auditoria.modelos.set(modelos_ids)
                if ativos_ids:
                    auditoria.ativos_auditados.set(ativos_ids)
                if turnos_ids:
                    auditoria.turnos.set(turnos_ids)

                messages.success(request, 'Auditoria criada com sucesso!')
                return redirect('auditorias:lista_auditorias')

            except Exception as e:
                messages.error(request, f'Erro ao criar auditoria: {repr(e)}')
        else:
            messages.error(request, 'Campos obrigatórios não preenchidos!')

    # O contexto para o método GET continua o mesmo
    context = {
        'ferramentas': FerramentaDigital.objects.all(),
        'usuarios': Usuario.objects.filter(is_active=True),
        'empresas': Empresa.objects.filter(ativo=True),
        'areas': Area.objects.filter(ativo=True),
        'setores': Setor.objects.filter(ativo=True),
        'subsetores': SubSetor.objects.filter(ativo=True),
        'modelos': ModeloAuditoria.objects.filter(ativo=True),
        'ativos': Ativo.objects.filter(ativo=True),
        'turnos': Turno.objects.filter(ativo=True),
        'title': 'Criar Auditoria',
        'back_url': 'auditorias:lista_auditorias'
    }
    return render(request, 'auditorias/auditorias/form.html', context)


@login_required
def editar_auditoria(request, pk):
    """Edita uma auditoria existente"""
    auditoria = get_object_or_404(Auditoria, pk=pk)

    if request.method == 'POST':
        try:
            # --- Captura todos os dados do formulário primeiro ---
            data_inicio_str = request.POST.get('data_inicio')
            data_fim_str = request.POST.get('data_fim')

            # --- Atualiza todos os campos do objeto ANTES de salvar ---
            auditoria.ferramenta_id = request.POST.get('ferramenta')
            auditoria.responsavel_id = request.POST.get('responsavel')
            auditoria.nivel_organizacional = request.POST.get(
                'nivel_organizacional')
            auditoria.categoria_auditoria = request.POST.get(
                'categoria_auditoria')

            # Converte as datas de string para objeto de data
            auditoria.data_inicio = datetime.strptime(
                data_inicio_str, '%Y-%m-%d').date()
            auditoria.data_fim = datetime.strptime(
                data_fim_str, '%Y-%m-%d').date() if data_fim_str else None

            # Atualiza todos os locais
            auditoria.local_empresa_id = request.POST.get(
                'local_empresa') or None
            auditoria.local_area_id = request.POST.get('local_area') or None
            auditoria.local_setor_id = request.POST.get('local_setor') or None
            auditoria.local_subsetor_id = request.POST.get(
                'local_subsetor') or None

            # Atualiza os dados de programação
            auditoria.por_frequencia = request.POST.get(
                'por_frequencia') == 'on'
            auditoria.por_intervalo = request.POST.get('por_intervalo') == 'on'
            auditoria.frequencia = request.POST.get('frequencia') or None
            auditoria.intervalo = int(request.POST.get(
                'intervalo')) if request.POST.get('intervalo') else None
            auditoria.numero_repeticoes = int(request.POST.get(
                'numero_repeticoes')) if request.POST.get('numero_repeticoes') else None
            auditoria.pular_finais_semana = request.POST.get(
                'pular_finais_semana') == 'on'
            auditoria.contem_turnos = request.POST.get('contem_turnos') == 'on'

            # --- Salva TUDO de uma vez (isso também vai recriar as instâncias futuras) ---
            auditoria.save()

            # Atualiza as relações ManyToMany
            auditoria.modelos.set(request.POST.getlist('modelos'))
            auditoria.ativos_auditados.set(
                request.POST.getlist('ativos_auditados'))
            auditoria.turnos.set(request.POST.getlist('turnos'))

            messages.success(request, 'Auditoria atualizada com sucesso!')
            return redirect('auditorias:lista_auditorias')

        except Exception as e:
            messages.error(request, f'Erro ao atualizar auditoria: {repr(e)}')

    # O contexto para o método GET (para exibir o formulário preenchido)
    context = {
        'auditoria': auditoria,
        'ferramentas': FerramentaDigital.objects.all(),
        'usuarios': Usuario.objects.filter(is_active=True),
        'empresas': Empresa.objects.filter(ativo=True),
        'areas': Area.objects.filter(ativo=True),
        'setores': Setor.objects.filter(ativo=True),
        'subsetores': SubSetor.objects.filter(ativo=True),
        'modelos': ModeloAuditoria.objects.filter(ativo=True),
        'ativos': Ativo.objects.filter(ativo=True),
        'turnos': Turno.objects.filter(ativo=True),
        'title': 'Editar Auditoria',
        'back_url': 'auditorias:lista_auditorias'
    }
    return render(request, 'auditorias/auditorias/form.html', context)


@login_required
def deletar_auditoria(request, pk):
    """Deleta uma auditoria"""
    auditoria = get_object_or_404(Auditoria, pk=pk)

    if request.method == 'POST':
        try:
            auditoria.delete()
            messages.success(request, 'Auditoria deletada com sucesso!')
        except Exception as e:
            messages.error(request, f'Erro ao deletar auditoria: {repr(e)}')
        return redirect('auditorias:lista_auditorias')

    context = {
        'object': auditoria,
        'title': 'Auditoria'
    }
    return render(request, 'auditorias/deletar_generico.html', context)


# ============================================================================
# VIEWS AJAX PARA FILTROS DINÂMICOS
# ============================================================================

@login_required
def get_areas_por_empresa(request):
    """Retorna áreas de uma empresa via AJAX"""
    empresa_id = request.GET.get('empresa_id')
    areas = Area.objects.filter(
        empresa_id=empresa_id, ativo=True).values('id', 'nome')
    return JsonResponse(list(areas), safe=False)


@login_required
def get_setores_por_area(request):
    """Retorna setores de uma área via AJAX"""
    area_id = request.GET.get('area_id')
    setores = Setor.objects.filter(
        area_id=area_id, ativo=True).values('id', 'nome')
    return JsonResponse(list(setores), safe=False)


@login_required
def get_subsetores_por_setor(request):
    """Retorna subsetores de um setor via AJAX"""
    setor_id = request.GET.get('setor_id')
    subsetores = SubSetor.objects.filter(
        setor_id=setor_id, ativo=True).values('id', 'nome')
    return JsonResponse(list(subsetores), safe=False)


@login_required
def get_ativos_por_local(request):
    """Retorna ativos filtrados por localização via AJAX"""
    nivel = request.GET.get('nivel')
    local_id = request.GET.get('local_id')

    ativos = Ativo.objects.filter(ativo=True)

    if nivel == 'EMPRESA' and local_id:
        ativos = ativos.filter(
            estrutura_organizacional__setor__area__empresa_id=local_id)
    elif nivel == 'AREA' and local_id:
        ativos = ativos.filter(
            estrutura_organizacional__setor__area_id=local_id)
    elif nivel == 'SETOR' and local_id:
        ativos = ativos.filter(estrutura_organizacional__setor_id=local_id)
    elif nivel == 'SUBSETOR' and local_id:
        ativos = ativos.filter(estrutura_organizacional_id=local_id)

    ativos_data = ativos.values('id', 'tag', 'descricao')
    return JsonResponse(list(ativos_data), safe=False)


@login_required
def lista_perguntas(request, checklist_pk):
    """Lista todas as perguntas de um checklist, agrupadas por tópico."""
    checklist = get_object_or_404(Checklist, pk=checklist_pk)
    topicos_com_perguntas = checklist.topicos.prefetch_related(
        'perguntas').order_by('ordem')

    context = {
        'checklist': checklist,
        'topicos_com_perguntas': topicos_com_perguntas,
        'title': f'Perguntas do Checklist: {checklist.nome}',
        'back_url': 'auditorias:lista_checklists'
    }
    return render(request, 'auditorias/perguntas/lista.html', context)


@login_required
def criar_pergunta(request, checklist_pk):
    """Cria uma nova pergunta para um tópico dentro de um checklist."""
    checklist = get_object_or_404(Checklist, pk=checklist_pk)

    if request.method == 'POST':
        topico_id = request.POST.get('topico')
        descricao = request.POST.get('descricao')

        if topico_id and descricao:
            try:
                Pergunta.objects.create(
                    topico_id=topico_id,
                    descricao=descricao,
                    campo_obrigatorio=request.POST.get(
                        'campo_obrigatorio') == 'on',
                    campo_desabilitado=request.POST.get(
                        'campo_desabilitado') == 'on',
                    ordem=int(request.POST.get('ordem', 0))
                )
                messages.success(request, 'Pergunta criada com sucesso!')
                return redirect('auditorias:lista_perguntas', checklist_pk=checklist.pk)
            except Exception as e:
                messages.error(request, f'Erro ao criar pergunta: {e}')
        else:
            messages.error(request, 'Tópico e Descrição são obrigatórios.')

    context = {
        'checklist': checklist,
        'topicos': checklist.topicos.order_by('ordem'),
        'title': 'Criar Nova Pergunta',
        'back_url': reverse('auditorias:lista_perguntas', kwargs={'checklist_pk': checklist.pk}),
    }
    return render(request, 'auditorias/perguntas/form.html', context)


@login_required
def editar_pergunta(request, pk):
    """Edita uma pergunta existente."""
    pergunta = get_object_or_404(Pergunta.objects.select_related(
        'topico__checklist').prefetch_related('opcoes_resposta', 'opcoes_porcentagem'), pk=pk)
    checklist = pergunta.topico.checklist

    if request.method == 'POST':
        topico_id = request.POST.get('topico')
        descricao = request.POST.get('descricao')

        if topico_id and descricao:
            try:
                pergunta.topico_id = topico_id
                pergunta.descricao = descricao
                pergunta.campo_obrigatorio = request.POST.get(
                    'campo_obrigatorio') == 'on'
                pergunta.campo_desabilitado = request.POST.get(
                    'campo_desabilitado') == 'on'
                pergunta.ordem = int(request.POST.get('ordem', 0))
                pergunta.save()

                messages.success(request, 'Pergunta atualizada com sucesso!')
                return redirect('auditorias:lista_perguntas', checklist_pk=checklist.pk)
            except Exception as e:
                messages.error(request, f'Erro ao atualizar pergunta: {e}')
        else:
            messages.error(request, 'Tópico e Descrição são obrigatórios.')

    context = {
        'object': pergunta,
        'checklist': checklist,
        'topicos': checklist.topicos.order_by('ordem'),
        'title': 'Editar Pergunta',
        'back_url': reverse('auditorias:lista_perguntas', kwargs={'checklist_pk': checklist.pk}),
    }
    return render(request, 'auditorias/perguntas/form.html', context)


@login_required
def deletar_pergunta(request, pk):
    """Deleta uma pergunta."""
    pergunta = get_object_or_404(
        Pergunta.objects.select_related('topico__checklist'), pk=pk)
    checklist_pk = pergunta.topico.checklist.pk

    if request.method == 'POST':
        try:
            pergunta.delete()
            messages.success(request, 'Pergunta deletada com sucesso!')
        except Exception as e:
            messages.error(request, f'Erro ao deletar pergunta: {e}')
        return redirect('auditorias:lista_perguntas', checklist_pk=checklist_pk)

    context = {
        'object': pergunta,
        'title': 'Pergunta',
        'back_url': reverse('auditorias:lista_perguntas', kwargs={'checklist_pk': checklist_pk}),
    }
    return render(request, 'auditorias/deletar_pergunta.html', context)


@login_required
def lista_topicos(request):
    """Lista todos os tópicos com busca e paginação."""
    search = request.GET.get('search', '')
    topicos = Topico.objects.select_related(
        'checklist').order_by('checklist__nome', 'ordem')

    if search:
        topicos = topicos.filter(
            Q(descricao__icontains=search) | Q(
                checklist__nome__icontains=search)
        )

    paginator = Paginator(topicos, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'page_obj': page_obj,
        'search': search,
        'title': 'Tópicos de Checklist',
        'singular': 'Tópico',
        'button_text': 'Novo Tópico',
        'create_url': 'auditorias:criar_topico',
        'artigo': 'o',
        'empty_message': 'Nenhum tópico cadastrado.',
        'empty_subtitle': 'Comece criando o primeiro tópico.'
    }
    return render(request, 'auditorias/topicos/lista.html', context)


@login_required
def criar_topico(request):
    """Cria um novo tópico."""
    if request.method == 'POST':
        descricao = request.POST.get('descricao')
        checklist_id = request.POST.get('checklist')
        ordem = request.POST.get('ordem', 0)

        if descricao and checklist_id:
            try:
                Topico.objects.create(
                    descricao=descricao,
                    checklist_id=checklist_id,
                    ordem=int(ordem)
                )
                messages.success(request, 'Tópico criado com sucesso!')
                return redirect('auditorias:lista_topicos')
            except Exception as e:
                messages.error(request, f'Erro ao criar tópico: {e}')
        else:
            messages.error(request, 'Descrição e Checklist são obrigatórios.')

    context = {
        'title': 'Criar Tópico',
        'back_url': 'auditorias:lista_topicos',
        'checklists': Checklist.objects.filter(ativo=True)
    }
    return render(request, 'auditorias/topicos/form.html', context)


@login_required
def editar_topico(request, pk):
    """Edita um tópico existente."""
    topico = get_object_or_404(Topico, pk=pk)
    if request.method == 'POST':
        topico.descricao = request.POST.get('descricao')
        topico.checklist_id = request.POST.get('checklist')
        topico.ordem = int(request.POST.get('ordem', 0))

        if topico.descricao and topico.checklist_id:
            try:
                topico.save()
                messages.success(request, 'Tópico atualizado com sucesso!')
                return redirect('auditorias:lista_topicos')
            except Exception as e:
                messages.error(request, f'Erro ao atualizar tópico: {e}')
        else:
            messages.error(request, 'Descrição e Checklist são obrigatórios.')

    context = {
        'object': topico,
        'title': 'Editar Tópico',
        'back_url': 'auditorias:lista_topicos',
        'checklists': Checklist.objects.filter(ativo=True)
    }
    return render(request, 'auditorias/topicos/form.html', context)


@login_required
def deletar_topico(request, pk):
    """Deleta um tópico."""
    topico = get_object_or_404(Topico, pk=pk)
    if request.method == 'POST':
        try:
            topico.delete()
            messages.success(request, 'Tópico deletado com sucesso!')
        except Exception as e:
            messages.error(request, f'Erro ao deletar tópico: {e}')
        return redirect('auditorias:lista_topicos')

    context = {
        'object': topico,
        'title': 'Tópico'
    }
    return render(request, 'auditorias/deletar_generico.html', context)


class AuditoriasPendentesAPIView(ListAPIView):
    """
    Endpoint da API que retorna a lista de instâncias de auditoria
    pendentes para o usuário autenticado.
    """
    serializer_class = AuditoriaInstanciaListSerializer
    # Garante que apenas usuários logados acessem
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        """
        Este método é sobrescrito para retornar apenas os objetos
        relevantes para o usuário que fez a requisição.
        """
        user = self.request.user
        # Filtra as instâncias não executadas
        # E que a auditoria pai tenha o usuário logado como responsável
        return AuditoriaInstancia.objects.filter(
            executada=False,
            auditoria_agendada__responsavel=user
        ).select_related(  # Otimiza a consulta ao banco de dados
            'auditoria_agendada__local_empresa',
            'auditoria_agendada__local_area',
            'auditoria_agendada__local_setor',
            'auditoria_agendada__local_subsetor'
        ).order_by('data_execucao')


class AuditoriaInstanciaDetailAPIView(RetrieveAPIView):
    """
    Endpoint da API que retorna os detalhes completos de uma
    única instância de auditoria, incluindo o checklist.
    """
    serializer_class = AuditoriaInstanciaDetailSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        """
        Garante que o usuário só possa ver instâncias de auditorias
        pelas quais ele é o responsável.
        """
        user = self.request.user
        return AuditoriaInstancia.objects.filter(auditoria_agendada__responsavel=user)


class SubmeterAuditoriaAPIView(APIView):
    """
    Endpoint para submeter as respostas de uma instância de auditoria.
    """
    permission_classes = [IsAuthenticated]

    def post(self, request, pk):
        try:
            instancia = AuditoriaInstancia.objects.get(
                pk=pk,
                auditoria_agendada__responsavel=request.user,
                executada=False
            )
        except AuditoriaInstancia.DoesNotExist:
            return Response(
                {"detail": "Instância de auditoria não encontrada ou já finalizada."},
                status=status.HTTP_404_NOT_FOUND
            )

        respostas_data = request.data.get('respostas', [])

        # Passamos a instância para o serializer através do "contexto"
        contexto = {'auditoria_instancia': instancia}

        respostas_serializer = RespostaSerializer(
            data=respostas_data, many=True, context=contexto)

        if respostas_serializer.is_valid():
            # O método .save() agora vai chamar o método .create() que escrevemos no serializer
            respostas_serializer.save()

            # Marcamos a auditoria como executada
            instancia.executada = True
            instancia.save()

            return Response(
                {"detail": "Auditoria submetida com sucesso!"},
                status=status.HTTP_200_OK
            )

        return Response(respostas_serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class AuditoriasConcluidasAPIView(ListAPIView):
    """
    Endpoint da API que retorna o histórico de instâncias de auditoria
    concluídas pelo usuário autenticado.
    """
    serializer_class = AuditoriaInstanciaListSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        """
        Filtra as instâncias para retornar apenas as que foram executadas
        pelo usuário que fez a requisição, ordenadas pela mais recente.
        """
        user = self.request.user
        return AuditoriaInstancia.objects.filter(
            executada=True,  # <-- A ÚNICA MUDANÇA É AQUI
            auditoria_agendada__responsavel=user
        ).select_related(
            'auditoria_agendada__local_empresa',
            'auditoria_agendada__local_area',
            'auditoria_agendada__local_setor',
            'auditoria_agendada__local_subsetor'
            # Ordena da mais recente para a mais antiga
        ).order_by('-data_execucao')


@login_required
def preview_audit_dates(request):
    """
    Endpoint AJAX que calcula e retorna as datas de auditoria com base
    nos parâmetros do formulário. (VERSÃO FINAL COM REPETIÇÃO AJUSTADA)
    """
    try:
        start_date_str = request.GET.get('data_inicio')
        end_date_str = request.GET.get('ate_dia')
        schedule_type = request.GET.get('schedule_type')
        frequency = request.GET.get('frequencia')
        interval_str = request.GET.get('intervalo')
        repetitions_str = request.GET.get('numero_repeticoes')
        skip_weekends = request.GET.get('pular_fins_semana') == 'true'

        if not start_date_str:
            return JsonResponse({'dates': []})

        start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date()
        end_date = datetime.strptime(
            end_date_str, '%Y-%m-%d').date() if end_date_str else None

        # AQUI ESTÁ A MUDANÇA: Capturamos o número de repetições
        repetitions = int(repetitions_str) if repetitions_str and repetitions_str.isdigit(
        ) and int(repetitions_str) > 0 else 1

        dates = []
        current_date = start_date
        loop_limit = 365 * 5
        loops = 0

        if not end_date:
            if not (skip_weekends and start_date.weekday() >= 5):
                # AQUI ESTÁ A MUDANÇA: Adicionamos a data apenas UMA vez
                dates.append(start_date)
        else:
            while current_date <= end_date and loops < loop_limit:
                loops += 1

                if not (skip_weekends and current_date.weekday() >= 5):
                    # AQUI ESTÁ A MUDANÇA: Adicionamos a data apenas UMA vez
                    dates.append(current_date)

                # A lógica de cálculo da próxima data permanece a mesma
                if schedule_type == 'por_intervalo':
                    interval = int(
                        interval_str) if interval_str and interval_str.isdigit() else 0
                    current_date += timedelta(days=interval + 1)
                elif schedule_type == 'por_frequencia':
                    if frequency == 'DIARIO':
                        current_date += timedelta(days=1)
                    # ... (resto da lógica de frequência)
                    elif frequency == 'SEMANAL':
                        current_date += timedelta(weeks=1)
                    elif frequency == 'QUINZENAL':
                        current_date += timedelta(weeks=2)
                    elif frequency == 'MENSAL':
                        current_date += relativedelta(months=1)
                    elif frequency == 'ANUAL':
                        current_date += relativedelta(years=1)
                else:
                    current_date += timedelta(days=1)

        # Formatação final para a resposta JSON
        dias_semana = ["seg.", "ter.", "qua.", "qui.", "sex.", "sáb.", "dom."]
        meses = ["jan.", "fev.", "mar.", "abr.", "mai.", "jun.",
                 "jul.", "ago.", "set.", "out.", "nov.", "dez."]

        formatted_dates = [{
            'auditoria_num': i + 1,
            # <-- AQUI ESTÁ A MUDANÇA: Usamos o número de repetições para todas as linhas
            'repeticao_num': repetitions,
            'dia_semana': dias_semana[date.weekday()],
            'dia': date.strftime('%d'),
            'mes': meses[date.month - 1],
            'ano': date.year
        } for i, date in enumerate(dates)]

        return JsonResponse({'dates': formatted_dates})

    except (ValueError, TypeError) as e:
        return JsonResponse({'error': f'Parâmetros inválidos: {repr(e)}'}, status=400)

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\__init__.py


_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\migrations\0001_initial.py

# Generated by Django 5.2.3 on 2025-09-01 12:22

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Pilar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, unique=True, verbose_name='Nome do Pilar')),
                ('descricao', models.TextField(blank=True, null=True, verbose_name='Descrição')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
            ],
            options={
                'verbose_name': 'Pilar',
                'verbose_name_plural': 'Pilares',
                'ordering': ['nome'],
            },
        ),
    ]

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\migrations\0002_categoriaauditoria.py

# Generated by Django 5.2.3 on 2025-09-01 12:26

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auditorias', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CategoriaAuditoria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', models.CharField(max_length=255, verbose_name='Descrição da Categoria')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('pilar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categorias_auditoria', to='auditorias.pilar', verbose_name='Pilar')),
            ],
            options={
                'verbose_name': 'Categoria de Auditoria',
                'verbose_name_plural': 'Categorias de Auditorias',
                'ordering': ['pilar__nome', 'descricao'],
                'unique_together': {('pilar', 'descricao')},
            },
        ),
    ]

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\migrations\0003_norma_requisitonorma.py

# Generated by Django 5.2.3 on 2025-09-01 12:34

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auditorias', '0002_categoriaauditoria'),
    ]

    operations = [
        migrations.CreateModel(
            name='Norma',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', models.CharField(max_length=255, unique=True, verbose_name='Descrição da Norma')),
                ('revisao', models.CharField(max_length=100, verbose_name='Revisão')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
            ],
            options={
                'verbose_name': 'Norma',
                'verbose_name_plural': 'Normas',
                'ordering': ['descricao', 'revisao'],
                'unique_together': {('descricao', 'revisao')},
            },
        ),
        migrations.CreateModel(
            name='RequisitoNorma',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo', models.CharField(max_length=50, verbose_name='Código')),
                ('requisito', models.CharField(max_length=255, verbose_name='Requisito')),
                ('descricao', models.TextField(blank=True, null=True, verbose_name='Descrição')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('norma', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requisitos', to='auditorias.norma', verbose_name='Norma')),
            ],
            options={
                'verbose_name': 'Requisito de Norma',
                'verbose_name_plural': 'Requisitos de Normas',
                'ordering': ['norma__descricao', 'codigo'],
                'unique_together': {('norma', 'codigo')},
            },
        ),
    ]

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\migrations\0004_ferramentadigital_tipoquestao_modeloavaliacao_and_more.py

# Generated by Django 5.2.3 on 2025-09-01 16:31

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auditorias', '0003_norma_requisitonorma'),
    ]

    operations = [
        migrations.CreateModel(
            name='FerramentaDigital',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, unique=True, verbose_name='Nome da Ferramenta')),
            ],
            options={
                'verbose_name': 'Ferramenta Digital',
                'verbose_name_plural': 'Ferramentas Digitais',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='TipoQuestao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, unique=True, verbose_name='Nome do Tipo de Questão')),
                ('descricao', models.TextField(verbose_name='Descrição')),
                ('icone', models.ImageField(blank=True, null=True, upload_to='icones_tipos_questao/', verbose_name='Ícone')),
            ],
            options={
                'verbose_name': 'Tipo de Questão',
                'verbose_name_plural': 'Tipos de Questão',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='ModeloAvaliacao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, unique=True, verbose_name='Nome do Modelo de Avaliação')),
                ('descricao', models.TextField(verbose_name='Descrição do Modelo')),
                ('tipos_questao_suportados', models.ManyToManyField(related_name='modelos_avaliacao', to='auditorias.tipoquestao', verbose_name='Tipos de Questão Suportados')),
            ],
            options={
                'verbose_name': 'Modelo de Avaliação',
                'verbose_name_plural': 'Modelos de Avaliação',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='Checklist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=255, verbose_name='Nome do Checklist')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('ferramentas', models.ManyToManyField(related_name='checklists', to='auditorias.ferramentadigital', verbose_name='Ferramentas Digitais')),
                ('modelo_avaliacao', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='checklists', to='auditorias.modeloavaliacao', verbose_name='Modelo de Avaliação')),
                ('tipo_questao', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='checklists', to='auditorias.tipoquestao', verbose_name='Tipo de Questão')),
            ],
            options={
                'verbose_name': 'Checklist',
                'verbose_name_plural': 'Checklists',
                'ordering': ['nome'],
            },
        ),
    ]

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\migrations\0005_remove_checklist_ferramentas_checklist_ferramenta.py

# Generated by Django 5.2.3 on 2025-09-01 16:44

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auditorias', '0004_ferramentadigital_tipoquestao_modeloavaliacao_and_more'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='checklist',
            name='ferramentas',
        ),
        migrations.AddField(
            model_name='checklist',
            name='ferramenta',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='checklists', to='auditorias.ferramentadigital', verbose_name='Ferramenta Digital'),
        ),
    ]

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\migrations\0006_ferramentacausaraiz_modeloauditoria.py

# Generated by Django 5.2.3 on 2025-09-01 16:59

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auditorias', '0005_remove_checklist_ferramentas_checklist_ferramenta'),
    ]

    operations = [
        migrations.CreateModel(
            name='FerramentaCausaRaiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, unique=True, verbose_name='Nome da Ferramenta')),
            ],
            options={
                'verbose_name': 'Ferramenta de Causa Raiz',
                'verbose_name_plural': 'Ferramentas de Causa Raiz',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='ModeloAuditoria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', models.CharField(max_length=255, verbose_name='Descrição do Modelo')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('iniciar_por_codigo_qr', models.BooleanField(default=False, verbose_name='Iniciar por Código QR')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('categoria', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modelos_auditoria', to='auditorias.categoriaauditoria', verbose_name='Categoria')),
                ('checklist', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modelos_auditoria', to='auditorias.checklist', verbose_name='Checklist')),
                ('ferramenta_causa_raiz', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modelos_auditoria', to='auditorias.ferramentacausaraiz', verbose_name='Ferramenta para Causa Raiz')),
            ],
            options={
                'verbose_name': 'Modelo de Auditoria',
                'verbose_name_plural': 'Modelos de Auditoria',
                'ordering': ['descricao'],
            },
        ),
    ]

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\migrations\0007_auditoria_auditoriainstancia.py

# Generated by Django 5.2.3 on 2025-09-01 17:25

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('ativos', '0001_initial'),
        ('auditorias', '0006_ferramentacausaraiz_modeloauditoria'),
        ('organizacao', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Auditoria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nivel_organizacional', models.CharField(choices=[('EMPRESA', 'Empresa'), ('AREA', 'Área'), ('SETOR', 'Setor'), ('SUBSETOR', 'Subsetor')], max_length=50, verbose_name='Nível')),
                ('categoria_auditoria', models.CharField(choices=[('APP', 'App'), ('WEB', 'Web')], max_length=10, verbose_name='Categoria')),
                ('data_inicio', models.DateField(verbose_name='Data de Início')),
                ('data_fim', models.DateField(blank=True, null=True, verbose_name='Data de Fim')),
                ('por_frequencia', models.BooleanField(default=False, verbose_name='Por Frequência')),
                ('por_intervalo', models.BooleanField(default=False, verbose_name='Por Intervalo')),
                ('frequencia', models.CharField(blank=True, choices=[('DIARIO', 'Diário'), ('SEMANAL', 'Semanal'), ('QUINZENAL', 'Quinzenal'), ('MENSAL', 'Mensal'), ('ANUAL', 'Anual')], max_length=10, null=True, verbose_name='Frequência')),
                ('intervalo', models.IntegerField(blank=True, null=True, verbose_name='Intervalo')),
                ('numero_repeticoes', models.IntegerField(blank=True, null=True, verbose_name='Número de Repetições')),
                ('pular_finais_semana', models.BooleanField(default=False, verbose_name='Pular Finais de Semana')),
                ('contem_turnos', models.BooleanField(default=False, verbose_name='Contém Turnos')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('ativos_auditados', models.ManyToManyField(related_name='auditorias_agendadas', to='ativos.ativo', verbose_name='Ativos Auditados')),
                ('ferramenta', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='auditorias.ferramentadigital', verbose_name='Ferramenta Digital')),
                ('local_area', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='organizacao.area', verbose_name='Local (Área)')),
                ('local_empresa', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='organizacao.empresa', verbose_name='Local (Empresa)')),
                ('local_setor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='organizacao.setor', verbose_name='Local (Setor)')),
                ('local_subsetor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='organizacao.subsetor', verbose_name='Local (Subsetor)')),
                ('modelos', models.ManyToManyField(to='auditorias.modeloauditoria', verbose_name='Modelos de Auditoria')),
                ('responsavel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Responsável')),
            ],
            options={
                'verbose_name': 'Auditoria Agendada',
                'verbose_name_plural': 'Auditorias Agendadas',
                'ordering': ['-data_criacao'],
            },
        ),
        migrations.CreateModel(
            name='AuditoriaInstancia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_execucao', models.DateField(verbose_name='Data de Execução')),
                ('executada', models.BooleanField(default=False, verbose_name='Executada?')),
                ('auditoria_agendada', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instancias', to='auditorias.auditoria', verbose_name='Auditoria Agendada')),
            ],
            options={
                'verbose_name': 'Instância de Auditoria',
                'verbose_name_plural': 'Instâncias de Auditoria',
                'ordering': ['data_execucao'],
            },
        ),
    ]

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\migrations\0008_auditoria_turnos.py

# Generated by Django 5.2.3 on 2025-09-01 17:38

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auditorias', '0007_auditoria_auditoriainstancia'),
        ('cadastros_base', '0002_alter_turno_options_remove_turno_hora_fim_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='auditoria',
            name='turnos',
            field=models.ManyToManyField(blank=True, to='cadastros_base.turno', verbose_name='Turnos'),
        ),
    ]

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\migrations\0009_remove_checklist_tipo_questao_topico_pergunta_and_more.py

# Generated by Django 5.2.4 on 2025-09-02 12:49

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auditorias', '0008_auditoria_turnos'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='checklist',
            name='tipo_questao',
        ),
        migrations.CreateModel(
            name='Topico',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', models.CharField(max_length=255, verbose_name='Descrição do Tópico')),
                ('ordem', models.IntegerField(default=0, verbose_name='Ordem')),
                ('checklist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topicos', to='auditorias.checklist', verbose_name='Checklist')),
            ],
            options={
                'verbose_name': 'Tópico',
                'verbose_name_plural': 'Tópicos',
                'ordering': ['ordem', 'descricao'],
                'unique_together': {('checklist', 'descricao')},
            },
        ),
        migrations.CreateModel(
            name='Pergunta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', models.TextField(verbose_name='Descrição da Pergunta')),
                ('campo_obrigatorio', models.BooleanField(default=False, verbose_name='Campo Obrigatório')),
                ('campo_desabilitado', models.BooleanField(default=False, verbose_name='Campo Desabilitado')),
                ('ordem', models.IntegerField(default=0, verbose_name='Ordem')),
                ('tipo_questao', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='perguntas', to='auditorias.tipoquestao', verbose_name='Tipo de Questão')),
                ('topico', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='perguntas', to='auditorias.topico', verbose_name='Tópico')),
            ],
            options={
                'verbose_name': 'Pergunta',
                'verbose_name_plural': 'Perguntas',
                'ordering': ['ordem', 'descricao'],
                'unique_together': {('topico', 'descricao')},
            },
        ),
        migrations.CreateModel(
            name='OpcaoPergunta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', models.CharField(max_length=100, verbose_name='Descrição da Opção')),
                ('tipo_status', models.CharField(choices=[('CONFORME', 'Conforme'), ('NAO_CONFORME', 'Não Conforme'), ('DESVIO_SOLUCIONADO', 'Desvio Solucionado'), ('NA', 'N/A')], max_length=20, verbose_name='Tipo de Status')),
                ('pergunta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='opcoes', to='auditorias.pergunta', verbose_name='Pergunta')),
            ],
            options={
                'verbose_name': 'Opção de Pergunta',
                'verbose_name_plural': 'Opções de Perguntas',
                'unique_together': {('pergunta', 'descricao')},
            },
        ),
    ]

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\migrations\0010_opcaopergunta_instrucoes_usuario_and_more.py

# Generated by Django 5.2.4 on 2025-09-02 13:21

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auditorias', '0009_remove_checklist_tipo_questao_topico_pergunta_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='opcaopergunta',
            name='instrucoes_usuario',
            field=models.TextField(blank=True, null=True, verbose_name='Instruções do Usuário'),
        ),
        migrations.AlterField(
            model_name='opcaopergunta',
            name='tipo_status',
            field=models.CharField(choices=[('CONFORME', 'Conforme'), ('NAO_CONFORME', 'Não Conforme'), ('NA', 'N/A'), ('DESVIO_SOLUCIONADO', 'Desvio Solucionado')], max_length=20, verbose_name='Tipo de Status'),
        ),
    ]

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\migrations\0011_remove_checklist_modelo_avaliacao_and_more.py

# Generated by Django 5.2.6 on 2025-09-29 16:47

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auditorias', '0010_opcaopergunta_instrucoes_usuario_and_more'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='checklist',
            name='modelo_avaliacao',
        ),
        migrations.AlterUniqueTogether(
            name='opcaopergunta',
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name='opcaopergunta',
            name='pergunta',
        ),
        migrations.RemoveField(
            model_name='pergunta',
            name='tipo_questao',
        ),
        migrations.AddField(
            model_name='pergunta',
            name='criar_opcao',
            field=models.BooleanField(default=True, verbose_name='Permitir Criar uma Opção'),
        ),
        migrations.AddField(
            model_name='pergunta',
            name='foto',
            field=models.BooleanField(default=False, verbose_name='Permitir Foto'),
        ),
        migrations.AddField(
            model_name='pergunta',
            name='obrigatoria',
            field=models.BooleanField(default=False, verbose_name='Resposta Obrigatória'),
        ),
        migrations.AddField(
            model_name='pergunta',
            name='porcentagem',
            field=models.BooleanField(default=False, verbose_name='Permitir Porcentagem'),
        ),
        migrations.AddField(
            model_name='pergunta',
            name='resposta_livre',
            field=models.BooleanField(default=False, verbose_name='Permitir Resposta Livre'),
        ),
        migrations.CreateModel(
            name='OpcaoPorcentagem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', models.CharField(max_length=255, verbose_name='Descrição')),
                ('peso', models.PositiveIntegerField(verbose_name='Peso (%)')),
                ('cor', models.CharField(default='#FFFFFF', max_length=7, verbose_name='Cor')),
                ('pergunta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='opcoes_porcentagem', to='auditorias.pergunta')),
            ],
            options={
                'verbose_name': 'Opção de Porcentagem',
                'verbose_name_plural': 'Opções de Porcentagem',
                'ordering': ['peso'],
            },
        ),
        migrations.CreateModel(
            name='OpcaoResposta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', models.CharField(max_length=255, verbose_name='Descrição da Opção')),
                ('status', models.CharField(choices=[('CONFORME', 'Conforme'), ('NAO_CONFORME', 'Não Conforme'), ('DESVIO_SOLUCIONADO', 'Desvio Solucionado'), ('NA', 'N/A')], max_length=20, verbose_name='Status Vinculado')),
                ('pergunta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='opcoes_resposta', to='auditorias.pergunta')),
            ],
            options={
                'verbose_name': 'Opção de Resposta',
                'verbose_name_plural': 'Opções de Resposta',
                'ordering': ['descricao'],
            },
        ),
        migrations.DeleteModel(
            name='ModeloAvaliacao',
        ),
        migrations.DeleteModel(
            name='OpcaoPergunta',
        ),
        migrations.DeleteModel(
            name='TipoQuestao',
        ),
    ]

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\migrations\0012_resposta_anexoresposta.py

# Generated by Django 5.2.3 on 2025-10-03 18:06

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auditorias', '0011_remove_checklist_modelo_avaliacao_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Resposta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resposta_livre_texto', models.TextField(blank=True, null=True, verbose_name='Texto da Resposta Livre')),
                ('data_resposta', models.DateTimeField(auto_now_add=True, verbose_name='Data da Resposta')),
                ('auditoria_instancia', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='respostas', to='auditorias.auditoriainstancia', verbose_name='Instância da Auditoria')),
                ('opcao_porcentagem', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='auditorias.opcaoporcentagem', verbose_name='Opção de Porcentagem Selecionada')),
                ('opcao_resposta', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='auditorias.opcaoresposta', verbose_name='Opção de Resposta Selecionada')),
                ('pergunta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='respostas', to='auditorias.pergunta', verbose_name='Pergunta')),
            ],
            options={
                'verbose_name': 'Resposta',
                'verbose_name_plural': 'Respostas',
                'unique_together': {('auditoria_instancia', 'pergunta')},
            },
        ),
        migrations.CreateModel(
            name='AnexoResposta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('arquivo', models.FileField(upload_to='anexos_respostas/', verbose_name='Arquivo')),
                ('data_upload', models.DateTimeField(auto_now_add=True)),
                ('resposta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='anexos', to='auditorias.resposta', verbose_name='Resposta')),
            ],
            options={
                'verbose_name': 'Anexo da Resposta',
                'verbose_name_plural': 'Anexos das Respostas',
            },
        ),
    ]

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\migrations\__init__.py


_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\templates\auditorias\base.html

{% include 'auditorias/partials/_head.html' %}

<body>
    <div class="app-container">
        
        {% include 'auditorias/partials/_sidebar.html' %}

        <main class="main-content">
            
            {% include 'auditorias/partials/_header.html' %}

            <div class="content-area">
                
                {% include 'auditorias/partials/_messages.html' %}

                {% block content %}{% endblock %} 
            </div>
        </main>
    </div>

    {% include 'auditorias/partials/_scripts.html' %}

</body>
</html>
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\templates\auditorias\dashboard.html

{% extends 'auditorias/base.html' %}

{% block title %}Dashboard - Sistema de Auditorias{% endblock %}
{% block page_title %}Dashboard{% endblock %}

{% block content %}
<div class="content-header">
    <h2 class="content-title">Bem-vindo ao Sistema de Auditorias</h2>
    <p class="content-subtitle">Gerencie suas auditorias, checklists e relatórios de forma eficiente</p>
</div>

<!-- Cards de Estatísticas -->
<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 24px; margin-bottom: 32px;">
    <div class="card">
        <div class="card-body" style="padding: 24px;">
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <div>
                    <h3 style="font-size: 32px; font-weight: 700; color: var(--primary); margin-bottom: 8px;">
                        {{ total_auditorias }}
                    </h3>
                    <p style="color: var(--text-secondary); font-size: 14px; margin: 0;">Total de Auditorias</p>
                </div>
                <div style="width: 60px; height: 60px; background: linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%); border-radius: var(--radius-lg); display: flex; align-items: center; justify-content: center; color: white; font-size: 24px;">
                    <i class="fas fa-calendar-check"></i>
                </div>
            </div>
            <div style="margin-top: 16px; padding-top: 16px; border-top: 1px solid var(--border);">
                <span style="color: var(--success); font-size: 12px; font-weight: 600;">
                    <i class="fas fa-arrow-up"></i> +12% este mês
                </span>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body" style="padding: 24px;">
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <div>
                    <h3 style="font-size: 32px; font-weight: 700; color: var(--success); margin-bottom: 8px;">
                        {{ total_modelos }}
                    </h3>
                    <p style="color: var(--text-secondary); font-size: 14px; margin: 0;">Modelos de Auditoria</p>
                </div>
                <div style="width: 60px; height: 60px; background: linear-gradient(135deg, var(--success) 0%, #059669 100%); border-radius: var(--radius-lg); display: flex; align-items: center; justify-content: center; color: white; font-size: 24px;">
                    <i class="fas fa-file-alt"></i>
                </div>
            </div>
            <div style="margin-top: 16px; padding-top: 16px; border-top: 1px solid var(--border);">
                <span style="color: var(--success); font-size: 12px; font-weight: 600;">
                    <i class="fas fa-arrow-up"></i> +5% este mês
                </span>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body" style="padding: 24px;">
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <div>
                    <h3 style="font-size: 32px; font-weight: 700; color: var(--warning); margin-bottom: 8px;">
                        {{ total_checklists }}
                    </h3>
                    <p style="color: var(--text-secondary); font-size: 14px; margin: 0;">Checklists Ativos</p>
                </div>
                <div style="width: 60px; height: 60px; background: linear-gradient(135deg, var(--warning) 0%, #d97706 100%); border-radius: var(--radius-lg); display: flex; align-items: center; justify-content: center; color: white; font-size: 24px;">
                    <i class="fas fa-list-check"></i>
                </div>
            </div>
            <div style="margin-top: 16px; padding-top: 16px; border-top: 1px solid var(--border);">
                <span style="color: var(--warning); font-size: 12px; font-weight: 600;">
                    <i class="fas fa-minus"></i> Estável
                </span>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body" style="padding: 24px;">
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <div>
                    <h3 style="font-size: 32px; font-weight: 700; color: var(--error); margin-bottom: 8px;">
                        {{ instancias_pendentes }}
                    </h3>
                    <p style="color: var(--text-secondary); font-size: 14px; margin: 0;">Pendentes</p>
                </div>
                <div style="width: 60px; height: 60px; background: linear-gradient(135deg, var(--error) 0%, #b91c1c 100%); border-radius: var(--radius-lg); display: flex; align-items: center; justify-content: center; color: white; font-size: 24px;">
                    <i class="fas fa-clock"></i>
                </div>
            </div>
            <div style="margin-top: 16px; padding-top: 16px; border-top: 1px solid var(--border);">
                <span style="color: var(--error); font-size: 12px; font-weight: 600;">
                    <i class="fas fa-exclamation-triangle"></i> Requer atenção
                </span>
            </div>
        </div>
    </div>
</div>

<!-- Seção Principal -->
<div style="display: grid; grid-template-columns: 2fr 1fr; gap: 32px;">
    <!-- Auditorias Recentes -->
    <div class="card">
        <div class="card-header">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <div>
                    <h3 class="card-title">Auditorias Recentes</h3>
                    <p class="card-subtitle">Últimas auditorias criadas no sistema</p>
                </div>
                <a href="{% url 'auditorias:lista_auditorias' %}" class="btn btn-primary btn-sm">
                    <i class="fas fa-eye"></i>
                    Ver Todas
                </a>
            </div>
        </div>
        <div class="card-body">
            {% if auditorias_recentes %}
                <div class="table-container">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Responsável</th>
                                <th>Ferramenta</th>
                                <th>Data Início</th>
                                <th>Status</th>
                                <th>Ações</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for auditoria in auditorias_recentes %}
                            <tr>
                                <td>
                                    <div style="display: flex; align-items: center; gap: 12px;">
                                        <div class="user-avatar" style="width: 32px; height: 32px; font-size: 12px;">
                                            {{ auditoria.responsavel.first_name.0|default:auditoria.responsavel.username.0|upper }}
                                        </div>
                                        <div>
                                            <div style="font-weight: 600; color: var(--text-primary);">
                                                {{ auditoria.responsavel.get_full_name|default:auditoria.responsavel.username }}
                                            </div>
                                            <div style="font-size: 12px; color: var(--text-muted);">
                                                {{ auditoria.responsavel.email }}
                                            </div>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <span class="badge badge-info">
                                        {{ auditoria.ferramenta.nome|default:"N/A" }}
                                    </span>
                                </td>
                                <td>{{ auditoria.data_inicio|date:"d/m/Y" }}</td>
                                <td>
                                    <span class="badge badge-success">Ativa</span>
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        <a href="{% url 'auditorias:editar_auditoria' auditoria.pk %}" class="btn btn-secondary btn-icon" title="Editar">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <a href="{% url 'auditorias:deletar_auditoria' auditoria.pk %}" class="btn btn-danger btn-icon" title="Deletar">
                                            <i class="fas fa-trash"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            {% else %}
                <div style="text-align: center; padding: 48px 24px; color: var(--text-muted);">
                    <i class="fas fa-calendar-times" style="font-size: 48px; margin-bottom: 16px; opacity: 0.5;"></i>
                    <h4 style="margin-bottom: 8px;">Nenhuma auditoria encontrada</h4>
                    <p>Crie sua primeira auditoria para começar</p>
                    <a href="{% url 'auditorias:criar_auditoria' %}" class="btn btn-primary" style="margin-top: 16px;">
                        <i class="fas fa-plus"></i>
                        Criar Auditoria
                    </a>
                </div>
            {% endif %}
        </div>
    </div>

    <!-- Ações Rápidas -->
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Ações Rápidas</h3>
            <p class="card-subtitle">Acesso rápido às principais funcionalidades</p>
        </div>
        <div class="card-body">
            <div style="display: flex; flex-direction: column; gap: 16px;">
                <a href="{% url 'auditorias:criar_auditoria' %}" class="btn btn-primary" style="justify-content: flex-start;">
                    <i class="fas fa-plus"></i>
                    Nova Auditoria
                </a>
                
                <a href="{% url 'auditorias:criar_checklist' %}" class="btn btn-secondary" style="justify-content: flex-start;">
                    <i class="fas fa-list-check"></i>
                    Novo Checklist
                </a>
                
                <a href="{% url 'auditorias:criar_modelo_auditoria' %}" class="btn btn-secondary" style="justify-content: flex-start;">
                    <i class="fas fa-file-alt"></i>
                    Novo Modelo
                </a>
                
                <a href="{% url 'auditorias:criar_pilar' %}" class="btn btn-secondary" style="justify-content: flex-start;">
                    <i class="fas fa-columns"></i>
                    Novo Pilar
                </a>
                
                <hr style="border: none; border-top: 1px solid var(--border); margin: 8px 0;">
                
                <a href="{% url 'auditorias:lista_ferramentas_digitais' %}" class="btn btn-secondary" style="justify-content: flex-start;">
                    <i class="fas fa-tools"></i>
                    Ferramentas
                </a>
            </div>
        </div>
    </div>
</div>

<!-- Gráficos e Estatísticas Adicionais -->
<div style="margin-top: 32px;">
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Visão Geral do Sistema</h3>
            <p class="card-subtitle">Estatísticas e métricas importantes</p>
        </div>
        <div class="card-body">
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 24px;">
                <div style="text-align: center; padding: 24px; background: var(--bg-tertiary); border-radius: var(--radius-md);">
                    <div style="font-size: 24px; font-weight: 700; color: var(--primary); margin-bottom: 8px;">
                        {{ total_pilares }}
                    </div>
                    <div style="color: var(--text-secondary); font-size: 14px;">Pilares Cadastrados</div>
                </div>
                
                <div style="text-align: center; padding: 24px; background: var(--bg-tertiary); border-radius: var(--radius-md);">
                    <div style="font-size: 24px; font-weight: 700; color: var(--success); margin-bottom: 8px;">
                        85%
                    </div>
                    <div style="color: var(--text-secondary); font-size: 14px;">Taxa de Conformidade</div>
                </div>
                
                <div style="text-align: center; padding: 24px; background: var(--bg-tertiary); border-radius: var(--radius-md);">
                    <div style="font-size: 24px; font-weight: 700; color: var(--warning); margin-bottom: 8px;">
                        12
                    </div>
                    <div style="color: var(--text-secondary); font-size: 14px;">Não Conformidades</div>
                </div>
                
                <div style="text-align: center; padding: 24px; background: var(--bg-tertiary); border-radius: var(--radius-md);">
                    <div style="font-size: 24px; font-weight: 700; color: var(--primary); margin-bottom: 8px;">
                        7
                    </div>
                    <div style="color: var(--text-secondary); font-size: 14px;">Dias Médio Resolução</div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
    // Atualizar dados em tempo real (opcional)
    function atualizarDashboard() {
        // Implementar atualização via AJAX se necessário
        console.log('Dashboard atualizado');
    }

    // Atualizar a cada 5 minutos
    setInterval(atualizarDashboard, 300000);

    // Animações para os cards de estatísticas
    document.addEventListener('DOMContentLoaded', function() {
        const cards = document.querySelectorAll('.card');
        cards.forEach((card, index) => {
            card.style.opacity = '0';
            card.style.transform = 'translateY(20px)';
            
            setTimeout(() => {
                card.style.transition = 'all 0.5s ease';
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, index * 100);
        });
    });
</script>
{% endblock %}


_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\templates\auditorias\deletar_generico.html

{% extends 'auditorias/base.html' %}

{% block title %}Deletar {{ title }} - Sistema de Auditorias{% endblock %}
{% block page_title %}Confirmar Exclusão de {{ title }}{% endblock %}

{% block content %}
<div class="card" style="max-width: 600px; margin: auto;">
    <div class="card-body" style="text-align: center; padding: 40px;">
        <i class="fas fa-exclamation-triangle" style="font-size: 48px; color: var(--warning); margin-bottom: 24px;"></i>
        <h3 class="card-title" style="font-size: 22px;">Tem certeza?</h3>
        <p class="card-subtitle" style="margin-top: 8px; margin-bottom: 24px;">
            Você está prestes a deletar permanentemente o item: <br>
            <strong style="color: var(--text-primary);">"{{ object }}"</strong>
        </p>
        <p class="card-subtitle" style="color: var(--error);">
            Esta ação não pode ser desfeita.
        </p>

        <form method="post">
            {% csrf_token %}
            <div style="display: flex; gap: 16px; justify-content: center; margin-top: 32px;">
                <a href="{{ request.META.HTTP_REFERER|default:'/' }}" class="btn btn-secondary">
                    <i class="fas fa-times"></i> Cancelar
                </a>
                <button type="submit" class="btn btn-danger">
                    <i class="fas fa-trash"></i> Sim, deletar
                </button>
            </div>
        </form>
    </div>
</div>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\templates\auditorias\deletar_pergunta.html

{% extends 'auditorias/base.html' %}

{% block title %}Deletar {{ title }} - Sistema de Auditorias{% endblock %}
{% block page_title %}Confirmar Exclusão de {{ title }}{% endblock %}

{% block content %}
<div class="card" style="max-width: 600px; margin: auto;">
    <div class="card-body" style="text-align: center; padding: 40px;">
        <i class="fas fa-exclamation-triangle" style="font-size: 48px; color: var(--warning); margin-bottom: 24px;"></i>
        <h3 class="card-title" style="font-size: 22px;">Tem certeza?</h3>
        <p class="card-subtitle" style="margin-top: 8px; margin-bottom: 24px;">
            Você está prestes a deletar permanentemente o item:   

            <strong style="color: var(--text-primary);">"{{ object }}"</strong>
        </p>
        <p class="card-subtitle" style="color: var(--error);">
            Esta ação não pode ser desfeita.
        </p>

        <form method="post">
            {% csrf_token %}
            <div style="display: flex; gap: 16px; justify-content: center; margin-top: 32px;">
                {# CORREÇÃO: Usa a URL completa passada pela view #}
                <a href="{{ back_url }}" class="btn btn-secondary">
                    <i class="fas fa-times"></i> Cancelar
                </a>
                <button type="submit" class="btn btn-danger">
                    <i class="fas fa-trash"></i> Sim, deletar
                </button>
            </div>
        </form>
    </div>
</div>
{% endblock %}

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\templates\auditorias\form_generico.html

{% extends 'auditorias/base.html' %}

{% block title %}{{ title }} - Sistema de Auditorias{% endblock %}
{% block page_title %}{{ title }}{% endblock %}

{% block content %}
<div class="content-header">
    <div style="display: flex; justify-content: space-between; align-items: center;">
        <div>
            <h2 class="content-title">{{ title }}</h2>
            <p class="content-subtitle">{{ subtitle|default:"Preencha os campos abaixo" }}</p>
        </div>
        {% if back_url %}
        {# CORREÇÃO APLICADA: Usa a variável 'back_url' diretamente #}
        <a href="{{ back_url }}" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i>
            Voltar
        </a>
        {% else %}
        <button type="button" onclick="window.history.back()" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i>
            Voltar
        </button>
        {% endif %}
    </div>
</div>

<div style="display: grid; grid-template-columns: 2fr 1fr; gap: 32px;">
    <!-- Formulário Principal -->
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">{{ form_title|default:title }}</h3>
            <p class="card-subtitle">{{ form_subtitle|default:"Campos obrigatórios são marcados com *" }}</p>
        </div>
        
        <div class="card-body">
            <form method="post" enctype="multipart/form-data" id="mainForm" novalidate>
                {% csrf_token %}
                
                {% block form_content %}
                <!-- Conteúdo específico do formulário será definido nos templates filhos -->
                {% endblock %}
                
                <div style="display: flex; gap: 16px; justify-content: flex-end; margin-top: 32px; padding-top: 24px; border-top: 1px solid var(--border);">
                    {% if back_url %}
                    {# CORREÇÃO APLICADA: Usa a variável 'back_url' diretamente #}
                    <a href="{{ back_url }}" class="btn btn-secondary">
                        <i class="fas fa-times"></i>
                        Cancelar
                    </a>
                    {% else %}
                    <button type="button" onclick="window.history.back()" class="btn btn-secondary">
                        <i class="fas fa-times"></i>
                        Cancelar
                    </button>
                    {% endif %}
                    <button type="submit" class="btn btn-primary" id="submitBtn" data-original-text="Salvar">
                        <i class="fas fa-save"></i>
                        {{ submit_text|default:"Salvar" }}
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Painel Lateral -->
    <div>
        <!-- Informações de Ajuda -->
        <div class="card" style="margin-bottom: 24px;">
            <div class="card-header">
                <h3 class="card-title">
                    <i class="fas fa-info-circle"></i>
                    Ajuda
                </h3>
            </div>
            <div class="card-body">
                {% block help_content %}
                <div style="color: var(--text-secondary); font-size: 14px; line-height: 1.6;">
                    <p><strong>Dicas:</strong></p>
                    <ul style="margin: 12px 0; padding-left: 20px;">
                        <li>Campos marcados com * são obrigatórios</li>
                        <li>Use nomes descritivos e únicos</li>
                        <li>Verifique os dados antes de salvar</li>
                    </ul>
                </div>
                {% endblock %}
            </div>
        </div>

        <!-- Ações Rápidas -->
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">
                    <i class="fas fa-bolt"></i>
                    Ações Rápidas
                </h3>
            </div>
            <div class="card-body">
                <div style="display: flex; flex-direction: column; gap: 12px;">
                    {% block quick_actions %}
                    <button type="button" onclick="resetForm()" class="btn btn-secondary btn-sm">
                        <i class="fas fa-undo"></i>
                        Resetar
                    </button>
                    {% if back_url %}
                    {# CORREÇÃO APLICADA: Usa a variável 'back_url' diretamente #}
                    <a href="{{ back_url }}" class="btn btn-secondary btn-sm">
                        <i class="fas fa-list"></i>
                        Ver Lista
                    </a>
                    {% endif %}
                    {% endblock %}
                </div>
            </div>
        </div>

        <!-- Histórico (se editando) -->
        {% if object %}
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">
                    <i class="fas fa-history"></i>
                    Histórico
                </h3>
            </div>
            <div class="card-body">
                <div style="font-size: 14px; color: var(--text-secondary);">
                    <div style="margin-bottom: 12px;">
                        <strong>Criado em:</strong><br>
                        {{ object.data_cadastro|date:"d/m/Y H:i" }}
                    </div>
                    {% if object.data_atualizacao != object.data_cadastro %}
                    <div>
                        <strong>Última atualização:</strong><br>
                        {{ object.data_atualizacao|date:"d/m/Y H:i" }}
                    </div>
                    {% endif %}
                </div>
            </div>
        </div>
        {% endif %}
    </div>
</div>

{% block extra_js %}
<script>
// Função para resetar formulário
function resetForm() {
    if (confirm('Tem certeza que deseja resetar o formulário? Todos os dados não salvos serão perdidos.')) {
        document.getElementById('mainForm').reset();
        
        // Limpar erros e classes de validação
        document.querySelectorAll('.form-control').forEach(field => {
            field.classList.remove('error', 'success');
        });
        
        document.querySelectorAll('.field-error').forEach(error => {
            error.remove();
        });
    }
}

// Detectar mudanças no formulário para aviso antes de sair
let formChanged = false;
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('mainForm');
    if (form) {
        form.addEventListener('input', () => formChanged = true);
        form.addEventListener('change', () => formChanged = true);
        form.addEventListener('submit', () => formChanged = false);
    }
});

// Aviso antes de sair da página com dados não salvos
window.addEventListener('beforeunload', function(e) {
    if (formChanged) {
        e.preventDefault();
        e.returnValue = '';
    }
});

// Atalhos de teclado
document.addEventListener('keydown', function(e) {
    // Ctrl/Cmd + S para salvar
    if ((e.ctrlKey || e.metaKey) && e.key === 's') {
        e.preventDefault();
        document.getElementById('submitBtn').click();
    }
    
    // Escape para voltar
    if (e.key === 'Escape') {
        {% if back_url %}
        {# CORREÇÃO APLICADA: Usa a variável 'back_url' diretamente #}
        window.location.href = "{{ back_url }}";
        {% else %}
        window.history.back();
        {% endif %}
    }
});
</script>
{% endblock %}
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\templates\auditorias\lista_generica.html

{% extends 'auditorias/base.html' %}

{% block title %}{{ title }} - Sistema de Auditorias{% endblock %}
{% block page_title %}{{ title }}{% endblock %}

{% block content %}
<div class="content-header">
    <div style="display: flex; justify-content: space-between; align-items: center;">
        <div>
            <h2 class="content-title">{{ title }}</h2>
            <p class="content-subtitle">Gerencie {{ title|lower }} do sistema</p>
        </div>
        <a href="{% url create_url %}" class="btn btn-primary">
            <i class="fas fa-plus"></i>
            {% if button_text %}{{ button_text }}{% else %}Nova {{ singular|default:title|slice:":-1" }}{% endif %}
        </a>
    </div>
</div>

<!-- Filtros e Busca -->
<div class="card" style="margin-bottom: 24px;">
    <div class="card-body">
        <form method="get" style="display: flex; gap: 16px; align-items: end;">
            <div class="form-group" style="flex: 1; margin-bottom: 0;">
                <label class="form-label">Buscar</label>
                <div class="search-container">
                    <input type="text" name="search" value="{{ search }}" placeholder="Digite para buscar..." class="form-control search-input">
                </div>
            </div>
            <button type="submit" class="btn btn-secondary">
                <i class="fas fa-search"></i>
                Buscar
            </button>
            {% if search %}
            <a href="?" class="btn btn-secondary">
                <i class="fas fa-times"></i>
                Limpar
            </a>
            {% endif %}
        </form>
    </div>
</div>

<!-- Tabela de Resultados -->
<div class="card">
    <div class="card-header">
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div>
                <h3 class="card-title">Lista de {{ title }}</h3>
                <p class="card-subtitle">
                    {% if page_obj.paginator.count %}
                        {{ page_obj.paginator.count }} registro{{ page_obj.paginator.count|pluralize:",s" }} encontrado{{ page_obj.paginator.count|pluralize:",s" }}
                    {% else %}
                        Nenhum registro encontrado
                    {% endif %}
                </p>
            </div>
            {% if page_obj.paginator.count > 0 %}
            <div style="display: flex; gap: 8px;">
                <button class="btn btn-secondary btn-sm" onclick="exportarDados()">
                    <i class="fas fa-download"></i>
                    Exportar
                </button>
                <button class="btn btn-secondary btn-sm" onclick="imprimirTabela()">
                    <i class="fas fa-print"></i>
                    Imprimir
                </button>
            </div>
            {% endif %}
        </div>
    </div>
    
    <div class="card-body">
        {% if page_obj.object_list %}
            <div class="table-container">
                <table class="table" id="dataTable">
                    <thead>
                        <tr>
                            {% block table_headers %}
                            <!-- Headers específicos serão definidos nos templates filhos -->
                            {% endblock %}
                        </tr>
                    </thead>
                    <tbody>
                        {% for object in page_obj %}
                        <tr>
                            {% block table_row %}
                            <!-- Conteúdo das linhas será definido nos templates filhos -->
                            {% endblock %}
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>

            <!-- Paginação -->
            {% if page_obj.has_other_pages %}
            <div class="pagination">
                {% if page_obj.has_previous %}
                    <a href="?page=1{% if search %}&search={{ search }}{% endif %}" title="Primeira página">
                        <i class="fas fa-angle-double-left"></i>
                    </a>
                    <a href="?page={{ page_obj.previous_page_number }}{% if search %}&search={{ search }}{% endif %}" title="Página anterior">
                        <i class="fas fa-angle-left"></i>
                    </a>
                {% endif %}

                {% for num in page_obj.paginator.page_range %}
                    {% if page_obj.number == num %}
                        <span class="current">{{ num }}</span>
                    {% elif num > page_obj.number|add:'-3' and num < page_obj.number|add:'3' %}
                        <a href="?page={{ num }}{% if search %}&search={{ search }}{% endif %}">{{ num }}</a>
                    {% endif %}
                {% endfor %}

                {% if page_obj.has_next %}
                    <a href="?page={{ page_obj.next_page_number }}{% if search %}&search={{ search }}{% endif %}" title="Próxima página">
                        <i class="fas fa-angle-right"></i>
                    </a>
                    <a href="?page={{ page_obj.paginator.num_pages }}{% if search %}&search={{ search }}{% endif %}" title="Última página">
                        <i class="fas fa-angle-double-right"></i>
                    </a>
                {% endif %}
            </div>
            {% endif %}
        {% else %}
            <!-- Estado Vazio -->
            <div style="text-align: center; padding: 64px 24px; color: var(--text-muted);">
                <i class="fas fa-inbox" style="font-size: 64px; margin-bottom: 24px; opacity: 0.3;"></i>
                <h3 style="margin-bottom: 12px; color: var(--text-secondary);">
                    {% if search %}
                        Nenhum resultado encontrado
                    {% else %}
                        {% if empty_message %}{{ empty_message }}{% else %}Nenhum {{ singular|default:title|slice:":-1"|lower }} cadastrado{% endif %}
                    {% endif %}
                </h3>
                <p style="margin-bottom: 24px;">
                    {% if search %}
                        Tente ajustar os termos de busca ou limpar os filtros.
                    {% else %}
                        {% if empty_subtitle %}{{ empty_subtitle }}{% else %}Comece criando {{ artigo|default:'o' }} primeiro {{ singular|default:title|slice:":-1"|lower }}.{% endif %}
                    {% endif %}
                </p>
                {% if not search %}
                <a href="{% url create_url %}" class="btn btn-primary">
                    <i class="fas fa-plus"></i>
                    {% if button_text %}{{ button_text }}{% else %}Criar {{ singular|default:title|slice:":-1" }}{% endif %}
                </a>
                {% else %}
                <a href="?" class="btn btn-secondary">
                    <i class="fas fa-times"></i>
                    Limpar Busca
                </a>
                {% endif %}
            </div>
        {% endif %}
    </div>
</div>

<!-- Modal de Confirmação para Exclusão -->
<div id="deleteModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); z-index: 9999; align-items: center; justify-content: center;">
    <div style="background: white; border-radius: var(--radius-lg); padding: 32px; max-width: 400px; width: 90%; box-shadow: var(--shadow-xl);">
        <div style="text-align: center; margin-bottom: 24px;">
            <i class="fas fa-exclamation-triangle" style="font-size: 48px; color: var(--warning); margin-bottom: 16px;"></i>
            <h3 style="margin-bottom: 8px;">Confirmar Exclusão</h3>
            <p style="color: var(--text-secondary);">Esta ação não pode ser desfeita.</p>
        </div>
        <div style="display: flex; gap: 12px; justify-content: center;">
            <button onclick="closeDeleteModal()" class="btn btn-secondary">Cancelar</button>
            <a id="confirmDeleteBtn" href="#" class="btn btn-danger">Excluir</a>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
    // Função para confirmar exclusão
    function confirmDelete(url, itemName) {
        document.getElementById('confirmDeleteBtn').href = url;
        document.getElementById('deleteModal').style.display = 'flex';
    }

    function closeDeleteModal() {
        document.getElementById('deleteModal').style.display = 'none';
    }

    // Fechar modal clicando fora
    document.getElementById('deleteModal').addEventListener('click', function(e) {
        if (e.target === this) {
            closeDeleteModal();
        }
    });

    // Função para exportar dados
    function exportarDados() {
        // Implementar exportação (CSV, Excel, etc.)
        alert('Funcionalidade de exportação será implementada');
    }

    // Função para imprimir tabela
    function imprimirTabela() {
        const printContent = document.getElementById('dataTable').outerHTML;
        const printWindow = window.open('', '_blank');
        printWindow.document.write(`
            <html>
                <head>
                    <title>{{ title }} - Impressão</title>
                    <style>
                        body { font-family: Arial, sans-serif; }
                        table { width: 100%; border-collapse: collapse; }
                        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                        th { background-color: #f5f5f5; }
                        .btn { display: none; }
                    </style>
                </head>
                <body>
                    <h1>{{ title }}</h1>
                    ${printContent}
                </body>
            </html>
        `);
        printWindow.document.close();
        printWindow.print();
    }

    // Busca em tempo real (opcional)
    let searchTimeout;
    const searchInput = document.querySelector('input[name="search"]');
    
    if (searchInput) {
        searchInput.addEventListener('input', function() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                if (this.value.length >= 3 || this.value.length === 0) {
                    this.form.submit();
                }
            }, 500);
        });
    }

    // Atalhos de teclado
    document.addEventListener('keydown', function(e) {
        // Ctrl/Cmd + K para focar na busca
        if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
            e.preventDefault();
            searchInput?.focus();
        }
        
        // Escape para limpar busca
        if (e.key === 'Escape' && searchInput === document.activeElement) {
            searchInput.value = '';
            searchInput.form.submit();
        }
    });

    // Animações de entrada
    document.addEventListener('DOMContentLoaded', function() {
        const rows = document.querySelectorAll('tbody tr');
        rows.forEach((row, index) => {
            row.style.opacity = '0';
            row.style.transform = 'translateY(10px)';
            
            setTimeout(() => {
                row.style.transition = 'all 0.3s ease';
                row.style.opacity = '1';
                row.style.transform = 'translateY(0)';
            }, index * 50);
        });
    });
</script>
{% endblock %}

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\templates\auditorias\auditorias\form.html

{% extends 'auditorias/form_generico.html' %}

{% block form_content %}

<h4 style="color: var(--text-primary); margin-bottom: 16px; padding-bottom: 8px; border-bottom: 1px solid var(--border);">
    1. Informações Gerais
</h4>
<div class="form-row">
    <div class="form-group required">
        <label for="ferramenta" class="form-label">Ferramenta Digital</label>
        <select id="ferramenta" name="ferramenta" class="form-control form-select" required>
            <option value="">Selecione...</option>
            {% for f in ferramentas %}
            <option value="{{ f.pk }}" {% if auditoria.ferramenta.pk == f.pk %}selected{% endif %}>{{ f.nome }}</option>
            {% endfor %}
        </select>
    </div>
    <div class="form-group required">
        <label for="responsavel" class="form-label">Responsável</label>
        <select id="responsavel" name="responsavel" class="form-control form-select" required>
            <option value="">Selecione...</option>
            {% for u in usuarios %}
            <option value="{{ u.pk }}" {% if auditoria.responsavel.pk == u.pk %}selected{% endif %}>{{ u.get_full_name|default:u.username }}</option>
            {% endfor %}
        </select>
    </div>
</div>

<h4 style="color: var(--text-primary); margin: 32px 0 16px; padding-bottom: 8px; border-bottom: 1px solid var(--border);">
    2. Local, Modelo e Ativo
</h4>
<div class="form-row">
    <div class="form-group required">
        <label for="nivel_organizacional" class="form-label">Nível Organizacional</label>
        <select id="nivel_organizacional" name="nivel_organizacional" class="form-control form-select" required>
            <option value="">Selecione...</option>
            <option value="EMPRESA" {% if auditoria.nivel_organizacional == 'EMPRESA' %}selected{% endif %}>Empresa</option>
            <option value="AREA" {% if auditoria.nivel_organizacional == 'AREA' %}selected{% endif %}>Área</option>
            <option value="SETOR" {% if auditoria.nivel_organizacional == 'SETOR' %}selected{% endif %}>Setor</option>
            <option value="SUBSETOR" {% if auditoria.nivel_organizacional == 'SUBSETOR' %}selected{% endif %}>Subsetor</option>
        </select>
    </div>
    <div class="form-group required">
        <label for="categoria_auditoria" class="form-label">Categoria</label>
        <select id="categoria_auditoria" name="categoria_auditoria" class="form-control form-select" required>
            <option value="APP" {% if auditoria.categoria_auditoria == 'APP' %}selected{% endif %}>App</option>
            <option value="WEB" {% if auditoria.categoria_auditoria == 'WEB' %}selected{% endif %}>Web</option>
        </select>
    </div>
</div>
<div class="form-row">
    <div class="form-group" id="container-empresa">
        <label for="local_empresa" class="form-label">Empresa</label>
        <select id="local_empresa" name="local_empresa" class="form-control form-select">
            <option value="">Selecione uma empresa...</option>
            {% for e in empresas %}<option value="{{ e.pk }}" {% if auditoria.local_empresa.pk == e.pk %}selected{% endif %}>{{ e.nome }}</option>{% endfor %}
        </select>
    </div>
    <div class="form-group" id="container-area" style="display:none;">
        <label for="local_area" class="form-label">Área</label>
        <select id="local_area" name="local_area" class="form-control form-select"></select>
    </div>
</div>
<div class="form-row">
    <div class="form-group" id="container-setor" style="display:none;">
        <label for="local_setor" class="form-label">Setor</label>
        <select id="local_setor" name="local_setor" class="form-control form-select"></select>
    </div>
    <div class="form-group" id="container-subsetor" style="display:none;">
        <label for="local_subsetor" class="form-label">Subsetor</label>
        <select id="local_subsetor" name="local_subsetor" class="form-control form-select"></select>
    </div>
</div>

<div class="form-row">
    <div class="form-group">
        <label for="modelos" class="form-label">Modelos de Auditoria</label>
        <select id="modelos" name="modelos" class="form-control form-select" multiple size="8">
            {% for m in modelos %}<option value="{{ m.pk }}" {% if m in auditoria.modelos.all %}selected{% endif %}>{{ m.descricao }}</option>{% endfor %}
        </select>
    </div>
    <div class="form-group">
        <label for="ativos_auditados" class="form-label">Ativos Auditados</label>
        <select id="ativos_auditados" name="ativos_auditados" class="form-control form-select" multiple size="8">
            {% if auditoria %}{% for a in auditoria.ativos_auditados.all %}<option value="{{ a.pk }}" selected>{{ a.tag }} - {{ a.descricao }}</option>{% endfor %}{% endif %}
        </select>
    </div>
</div>

<h4 style="color: var(--text-primary); margin: 32px 0 16px; padding-bottom: 8px; border-bottom: 1px solid var(--border);">
    3. Programação
</h4>

<div class="form-row">
    <div class="form-group required">
        <label for="data_inicio" class="form-label">Data de Início</label>
        <input type="date" id="data_inicio" name="data_inicio" class="form-control schedule-input" value="{{ auditoria.data_inicio|date:'Y-m-d' }}" required>
    </div>
    <div class="form-group">
        <label for="data_fim" class="form-label">Até o Dia:</label>
        <input type="date" id="data_fim" name="data_fim" class="form-control schedule-input" value="{{ auditoria.data_fim|date:'Y-m-d' }}">
        <div class="field-help">*Se desejar fazer somente um dia, não preencha este campo.</div>
    </div>
</div>

<div class="form-row">
    <div class="form-group">
        <input type="radio" id="por_frequencia" name="schedule_type" value="por_frequencia" class="schedule-input" {% if auditoria.por_frequencia %}checked{% endif %}>
        <label for="por_frequencia">Por Frequência</label>
    </div>
    <div class="form-group">
        <input type="radio" id="por_intervalo" name="schedule_type" value="por_intervalo" class="schedule-input" {% if auditoria.por_intervalo or not auditoria %}checked{% endif %}>
        <label for="por_intervalo">Por Intervalo</label>
    </div>
</div>

<div class="form-row">
    <div class="form-group" id="frequency-fields">
        <label for="frequencia" class="form-label">Frequência</label>
        <select id="frequencia" name="frequencia" class="form-control schedule-input">
            <option value="DIARIO" {% if auditoria.frequencia == 'DIARIO' %}selected{% endif %}>Diário</option>
            <option value="SEMANAL" {% if auditoria.frequencia == 'SEMANAL' %}selected{% endif %}>Semanal</option>
            <option value="QUINZENAL" {% if auditoria.frequencia == 'QUINZENAL' %}selected{% endif %}>Quinzenal</option>
            <option value="MENSAL" {% if auditoria.frequencia == 'MENSAL' %}selected{% endif %}>Mensal</option>
            <option value="ANUAL" {% if auditoria.frequencia == 'ANUAL' %}selected{% endif %}>Anual</option>
        </select>
    </div>
    <div class="form-group" id="interval-fields">
        <label for="intervalo" class="form-label">Intervalo (em dias)</label>
        <input type="number" id="intervalo" name="intervalo" class="form-control schedule-input" value="{{ auditoria.intervalo|default:'1' }}" min="1">
    </div>
    <div class="form-group">
        <label for="numero_repeticoes" class="form-label">Número de Repetições</label>
        <input type="number" id="numero_repeticoes" name="numero_repeticoes" class="form-control schedule-input" value="{{ auditoria.numero_repeticoes|default:'1' }}" min="1">
        <div class="field-help">Quantas vezes a auditoria deve ocorrer em cada data gerada.</div>
    </div>
</div>


<div class="form-row single">
     <div class="form-group">
        <label class="toggle-switch">
            <input type="checkbox" id="pular_finais_semana" name="pular_finais_semana" class="schedule-input" {% if auditoria.pular_finais_semana %}checked{% endif %}>
            <span class="toggle-slider"></span>
        </label>
        <span style="color: var(--text-secondary); font-size: 14px; margin-left: 12px;">Pular fins de semana</span>
    </div>
</div>

<div id="date-preview-container" style="margin-top: 24px; display: none;">
    <h5 style="color: var(--text-primary); margin-bottom: 12px;">Datas que serão geradas</h5>
    <div class="table-container">
        <table class="table">
            <thead>
                <tr>
                    <th>Auditorias</th>
                    <th>Repetição</th>
                    <th>Dia da Semana</th>
                    <th>Dia</th>
                    <th>Mês</th>
                    <th>Ano</th>
                </tr>
            </thead>
            <tbody id="date-preview-body">
                </tbody>
        </table>
    </div>
</div>
{% endblock %}

{% block extra_js %}
{{ block.super }}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // ===================================================================
    // LÓGICA 1: CARREGAMENTO DINÂMICO DE LOCAL, MODELO E ATIVO
    // ===================================================================
    const nivelSelect = document.getElementById('nivel_organizacional');
    const empresaSelect = document.getElementById('local_empresa');
    const areaSelect = document.getElementById('local_area');
    const setorSelect = document.getElementById('local_setor');
    const subsetorSelect = document.getElementById('local_subsetor');
    const ativosSelect = document.getElementById('ativos_auditados');

    const containers = {
        'EMPRESA': document.getElementById('container-empresa'),
        'AREA': document.getElementById('container-area'),
        'SETOR': document.getElementById('container-setor'),
        'SUBSETOR': document.getElementById('container-subsetor')
    };

    function atualizarVisibilidade() {
        const nivel = nivelSelect.value;
        Object.values(containers).forEach(c => c.style.display = 'none');
        if (nivel === 'EMPRESA') {
            containers.EMPRESA.style.display = 'block';
        } else if (nivel === 'AREA') {
            containers.EMPRESA.style.display = 'block';
            containers.AREA.style.display = 'block';
        } else if (nivel === 'SETOR') {
            containers.EMPRESA.style.display = 'block';
            containers.AREA.style.display = 'block';
            containers.SETOR.style.display = 'block';
        } else if (nivel === 'SUBSETOR') {
            Object.values(containers).forEach(c => c.style.display = 'block');
        }
        carregarAtivos();
    }

    function popularSelect(selectElement, url, placeholder) {
        selectElement.innerHTML = `<option value="">${placeholder}</option>`;
        fetch(url)
            .then(response => response.json())
            .then(data => {
                data.forEach(item => {
                    const option = new Option(item.nome, item.id);
                    selectElement.add(option);
                });
            });
    }

    function carregarAtivos() {
        const nivel = nivelSelect.value;
        let local_id = null;
        if (nivel === 'SUBSETOR' && subsetorSelect.value) local_id = subsetorSelect.value;
        else if (nivel === 'SETOR' && setorSelect.value) local_id = setorSelect.value;
        else if (nivel === 'AREA' && areaSelect.value) local_id = areaSelect.value;
        else if (nivel === 'EMPRESA' && empresaSelect.value) local_id = empresaSelect.value;

        ativosSelect.innerHTML = '<option value="">Carregando...</option>';
        if (nivel && local_id) {
            const url = `{% url 'auditorias:get_ativos_por_local' %}?nivel=${nivel}&local_id=${local_id}`;
            fetch(url)
                .then(response => response.json())
                .then(data => {
                    ativosSelect.innerHTML = '';
                    data.forEach(ativo => {
                        const option = new Option(`${ativo.tag} - ${ativo.descricao}`, ativo.id);
                        ativosSelect.add(option);
                    });
                });
        } else {
            ativosSelect.innerHTML = '<option value="">Selecione um local para ver os ativos</option>';
        }
    }

    nivelSelect.addEventListener('change', atualizarVisibilidade);
    empresaSelect.addEventListener('change', () => {
        popularSelect(areaSelect, `{% url 'auditorias:get_areas_por_empresa' %}?empresa_id=${empresaSelect.value}`, 'Selecione uma área...');
        carregarAtivos();
    });
    areaSelect.addEventListener('change', () => {
        popularSelect(setorSelect, `{% url 'auditorias:get_setores_por_area' %}?area_id=${areaSelect.value}`, 'Selecione um setor...');
        carregarAtivos();
    });
    setorSelect.addEventListener('change', () => {
        popularSelect(subsetorSelect, `{% url 'auditorias:get_subsetores_por_setor' %}?setor_id=${setorSelect.value}`, 'Selecione um subsetor...');
        carregarAtivos();
    });
    subsetorSelect.addEventListener('change', carregarAtivos);

    atualizarVisibilidade();


    // ===================================================================
    // LÓGICA 2: PREVISÃO DINÂMICA DE DATAS DE AGENDAMENTO
    // ===================================================================
    const scheduleInputs = document.querySelectorAll('.schedule-input');
    const frequencyContainer = document.getElementById('frequency-fields');
    const intervalContainer = document.getElementById('interval-fields');
    const porFrequenciaRadio = document.getElementById('por_frequencia');
    const previewBody = document.getElementById('date-preview-body');
    const previewContainer = document.getElementById('date-preview-container');

    function toggleScheduleFields() {
        if (porFrequenciaRadio.checked) {
            frequencyContainer.style.display = 'block';
            intervalContainer.style.display = 'none';
        } else {
            frequencyContainer.style.display = 'none';
            intervalContainer.style.display = 'block';
        }
    }

    function updateDatePreview() {
        toggleScheduleFields();

        const dataInicio = document.getElementById('data_inicio').value;
        const dataFim = document.getElementById('data_fim').value;
        const scheduleType = document.querySelector('input[name="schedule_type"]:checked').value;
        const frequencia = document.getElementById('frequencia').value;
        const intervalo = document.getElementById('intervalo').value;
        const numeroRepeticoes = document.getElementById('numero_repeticoes').value;
        const pularFinsSemana = document.getElementById('pular_finais_semana').checked;

        if (!dataInicio) {
            previewContainer.style.display = 'none';
            return;
        }

        const params = new URLSearchParams({
            data_inicio: dataInicio,
            ate_dia: dataFim,
            schedule_type: scheduleType,
            frequencia: frequencia,
            intervalo: intervalo,
            numero_repeticoes: numeroRepeticoes,
            pular_fins_semana: pularFinsSemana
        });
        
        const url = `{% url 'auditorias:preview_audit_dates' %}?${params.toString()}`;

        fetch(url)
            .then(response => response.json())
            .then(data => {
                previewBody.innerHTML = '';
                
                if (data.dates && data.dates.length > 0) {
                    previewContainer.style.display = 'block';
                    data.dates.forEach(date => {
                        const row = `
                            <tr>
                                <td>${date.auditoria_num}</td>
                                <td>${date.repeticao_num}x</td>
                                <td>${date.dia_semana}</td>
                                <td>${date.dia}</td>
                                <td>${date.mes}</td>
                                <td>${date.ano}</td>
                            </tr>
                        `;
                        previewBody.insertAdjacentHTML('beforeend', row);
                    });
                } else {
                    previewContainer.style.display = 'none';
                }
            })
            .catch(error => console.error('Erro:', error));
    }

    scheduleInputs.forEach(input => {
        input.addEventListener('change', updateDatePreview);
    });

    updateDatePreview();
});
</script>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\templates\auditorias\auditorias\lista.html

{% extends 'auditorias/lista_generica.html' %}

{% block table_headers %}
    <th>Responsável</th>
    <th>Local</th>
    <th>Ferramenta</th>
    <th>Data de Início</th>
    <th>Data de Fim</th>
    <th style="width: 120px;">Ações</th>
{% endblock %}

{% block table_row %}
    <td>
        <div style="font-weight: 600; color: var(--text-primary);">
            {{ object.responsavel.get_full_name|default:object.responsavel.username }}
        </div>
    </td>
    <td>
        {{ object.get_nivel_organizacional_display }}
    </td>
    <td>
        <span class="badge badge-info">{{ object.ferramenta.nome|default:"—" }}</span>
    </td>
    <td>{{ object.data_inicio|date:"d/m/Y" }}</td>
    <td>{{ object.data_fim|date:"d/m/Y"|default:"-" }}</td>
    <td>
        <div class="action-buttons">
            <a href="{% url 'auditorias:editar_auditoria' object.pk %}" class="btn btn-secondary btn-icon" title="Editar Auditoria">
                <i class="fas fa-edit"></i>
            </a>
            <button type="button" class="btn btn-danger btn-icon" title="Deletar Auditoria"
                    onclick="confirmDelete('{% url 'auditorias:deletar_auditoria' object.pk %}', 'Auditoria de {{ object.data_inicio|date:"d/m/Y" }}')">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    </td>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\templates\auditorias\categorias\form.html

{% extends 'auditorias/form_generico.html' %}

{% block form_content %}
<div class="form-row single">
    <div class="form-group required">
        <label for="descricao" class="form-label">Descrição da Categoria</label>
        <input type="text" 
               id="descricao" 
               name="descricao" 
               class="form-control" 
               value="{{ categoria.descricao|default:'' }}" 
               required 
               maxlength="255"
               placeholder="Digite a descrição da categoria">
    </div>
</div>

<div class="form-row single">
    <div class="form-group required">
        <label for="pilar" class="form-label">Pilar</label>
        <select id="pilar" name="pilar" class="form-control form-select" required>
            <option value="">Selecione um pilar...</option>
            {% for pilar in pilares %}
            <option value="{{ pilar.pk }}" {% if categoria.pilar.pk == pilar.pk %}selected{% endif %}>
                {{ pilar.nome }}
            </option>
            {% endfor %}
        </select>
    </div>
</div>

<div class="form-row single">
    <div class="form-group">
        <label class="form-label">Status</label>
        <div style="display: flex; align-items: center; gap: 12px;">
            <label class="toggle-switch">
                <input type="checkbox" 
                       name="ativo" 
                       {% if categoria.ativo|default:True %}checked{% endif %}>
                <span class="toggle-slider"></span>
            </label>
            <span style="color: var(--text-secondary); font-size: 14px;">
                Categoria ativa no sistema
            </span>
        </div>
    </div>
</div>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\templates\auditorias\categorias\lista.html

{% extends 'auditorias/lista_generica.html' %}

{% block table_headers %}
    <th>Descrição da Categoria</th>
    <th>Pilar</th>
    <th>Status</th>
    <th>Data Cadastro</th>
    <th style="width: 120px;">Ações</th>
{% endblock %}

{% block table_row %}
    <td>
        <div style="font-weight: 600; color: var(--text-primary);">
            {{ object.descricao }}
        </div>
    </td>
    <td>{{ object.pilar.nome|default:"—" }}</td>
    <td>
        {% if object.ativo %}
            <span class="badge badge-success">
                <i class="fas fa-check-circle"></i> Ativo
            </span>
        {% else %}
            <span class="badge badge-error">
                <i class="fas fa-times-circle"></i> Inativo
            </span>
        {% endif %}
    </td>
    <td>{{ object.data_cadastro|date:"d/m/Y" }}</td>
    <td>
        <div class="action-buttons">
            <a href="{% url 'auditorias:editar_categoria_auditoria' object.pk %}" class="btn btn-secondary btn-icon" title="Editar Categoria">
                <i class="fas fa-edit"></i>
            </a>
            <button type="button" class="btn btn-danger btn-icon" title="Deletar Categoria"
                    onclick="confirmDelete('{% url 'auditorias:deletar_categoria_auditoria' object.pk %}', '{{ object.descricao }}')">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    </td>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\templates\auditorias\checklists\form.html

{% extends 'auditorias/base.html' %}

{% block content %}
<style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');
    
    :root {
        --primary: #2563eb;
        --primary-dark: #1d4ed8;
        --primary-light: #3b82f6;
        --secondary: #f8fafc;
        --accent: #059669;
        --error: #dc2626;
        --text-primary: #0f172a;
        --text-secondary: #475569;
        --text-muted: #64748b;
        --border: rgba(255, 255, 255, 0.2);
        --border-focus: #93c5fd;
        --bg-primary: rgba(255, 255, 255, 0.95);
        --bg-secondary: #f1f5f9;
        --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
        --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        --shadow-xl: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        --radius-sm: 8px;
        --radius-md: 12px;
        --radius-lg: 16px;
        --radius-xl: 20px;
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
        min-height: 100vh;
    }

    .form-container {
        background: rgba(255, 255, 255, 0.95);
        border-radius: var(--radius-xl);
        box-shadow: var(--shadow-xl);
        border: 1px solid rgba(255, 255, 255, 0.2);
        margin: 20px;
        overflow: hidden;
    }

    .content-header {
        background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
        color: white;
        padding: 2rem;
        position: relative;
        overflow: hidden;
    }

    .content-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: radial-gradient(circle at 30% 20%, rgba(255, 255, 255, 0.08) 0%, transparent 50%);
        pointer-events: none;
    }

    .content-header .header-content {
        position: relative;
        z-index: 2;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .content-title {
        font-size: 2rem;
        font-weight: 800;
        margin-bottom: 0.5rem;
        letter-spacing: -0.03em;
        color: white;
    }

    .content-subtitle {
        font-size: 1rem;
        color: white;
        opacity: 0.9;
        font-weight: 400;
    }

    .btn {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        padding: 12px 20px;
        border: none;
        border-radius: var(--radius-md);
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        text-decoration: none;
        position: relative;
        overflow: hidden;
    }

    .btn-primary {
        background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
        color: white;
        box-shadow: 0 4px 15px rgba(37, 99, 235, 0.3);
    }

    .btn-primary:hover {
        box-shadow: 0 6px 20px rgba(37, 99, 235, 0.4);
    }

    .btn-secondary {
        background: rgba(255, 255, 255, 0.9);
        color: var(--text-primary);
        border: 1px solid rgba(255, 255, 255, 0.3);
    }

    .btn-secondary:hover {
        background: rgba(255, 255, 255, 1);
        box-shadow: var(--shadow-md);
    }

    .btn-danger {
        background: linear-gradient(135deg, var(--error) 0%, #b91c1c 100%);
        color: white;
        box-shadow: 0 4px 15px rgba(220, 38, 38, 0.3);
    }

    .btn-danger:hover {
        box-shadow: 0 6px 20px rgba(220, 38, 38, 0.4);
    }

    .card {
        background: rgba(255, 255, 255, 0.9);
        border-radius: var(--radius-lg);
        border: 1px solid rgba(255, 255, 255, 0.3);
        box-shadow: var(--shadow-md);
        margin-bottom: 2rem;
        overflow: hidden;
    }

    .card:hover {
        box-shadow: var(--shadow-lg);
    }

    .card-body {
        padding: 2rem;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 2rem;
        margin-bottom: 2rem;
    }

    .form-row.single {
        grid-template-columns: 1fr;
    }

    .form-group {
        position: relative;
    }

    .form-group.required .form-label::after {
        content: '*';
        color: var(--error);
        margin-left: 4px;
    }

    .form-label {
        display: block;
        font-size: 14px;
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 8px;
        letter-spacing: -0.01em;
    }

    .input-wrapper {
        position: relative;
        display: flex;
        flex-direction: column;
    }

    .form-control {
        background: rgba(255, 255, 255, 0.95);
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-radius: var(--radius-md);
        padding: 16px 20px;
        color: var(--text-primary);
        font-size: 15px;
        font-weight: 500;
        width: 100%;
        outline: none;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
    }

    .form-control:focus {
        border-color: var(--primary);
        box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1), 0 4px 20px rgba(37, 99, 235, 0.1);
        background: rgba(255, 255, 255, 0.98);
    }

    .form-control.error {
        border-color: var(--error);
        box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.1);
    }

    .toggle-switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

    .toggle-switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }

    .toggle-slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: #ccc;
        border-radius: 34px;
        box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .toggle-slider:before {
        position: absolute;
        content: "";
        height: 26px;
        width: 26px;
        left: 4px;
        bottom: 4px;
        background: white;
        border-radius: 50%;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    input:checked + .toggle-slider {
        background: var(--primary);
    }

    input:checked + .toggle-slider:before {
        transform: translateX(26px);
    }

    /* Tabs styling */
    .tabs-container {
        background: rgba(255, 255, 255, 0.95);
        border-radius: var(--radius-xl);
        padding: 0;
        margin-top: 2rem;
        border: 1px solid rgba(255, 255, 255, 0.3);
        box-shadow: var(--shadow-lg);
        overflow: hidden;
    }

    .tabs-header {
        display: flex;
        border-bottom: 2px solid rgba(37, 99, 235, 0.1);
    }

    .tab-btn {
        flex: 1;
        padding: 1.5rem 2rem;
        background: var(--bg-secondary);
        color: var(--text-secondary);
        border: none;
        font-weight: 600;
        font-size: 16px;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
    }

    .tab-btn:hover {
        background: rgba(37, 99, 235, 0.05);
    }

    .tab-btn.active {
        background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
        color: white;
    }

    .tab-btn.active::after {
        content: '';
        position: absolute;
        bottom: -2px;
        left: 0;
        right: 0;
        height: 2px;
        background: white;
    }

    .tab-content {
        display: none;
        padding: 2rem;
    }

    .tab-content.active {
        display: block;
    }

    .checklist-manager {
        background: rgba(255, 255, 255, 0.92);
        border-radius: var(--radius-xl);
        padding: 2.5rem;
        border: 1px solid rgba(255, 255, 255, 0.3);
        box-shadow: var(--shadow-lg);
        position: relative;
        overflow: hidden;
    }

    .checklist-manager::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: radial-gradient(circle at 20% 80%, rgba(37, 99, 235, 0.03) 0%, transparent 50%);
        pointer-events: none;
    }

    .manager-header {
        margin-bottom: 2.5rem;
        padding-bottom: 1.5rem;
        border-bottom: 2px solid rgba(37, 99, 235, 0.1);
        position: relative;
        z-index: 2;
    }

    .manager-header h4 {
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--text-primary);
        letter-spacing: -0.02em;
    }

    .checklist-body {
        display: flex;
        flex-direction: column;
        gap: 2rem;
        align-items: center;
        max-width: 1200px;
        margin: 0 auto;
        position: relative;
        z-index: 2;
    }

    .topic-wrapper {
        width: 100%;
        background: rgba(255, 255, 255, 0.95);
        border-radius: var(--radius-xl);
        box-shadow: var(--shadow-md);
        border: 1px solid rgba(255, 255, 255, 0.3);
        overflow: hidden;
    }

    .topic-wrapper:hover {
        box-shadow: var(--shadow-lg);
    }

    .topic-header {
        background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
        color: white;
        padding: 1.5rem 2rem;
        position: relative;
        overflow: hidden;
    }

    .topic-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: radial-gradient(circle at 30% 20%, rgba(255, 255, 255, 0.08) 0%, transparent 50%);
        pointer-events: none;
    }

    .topic-header-controls {
        position: relative;
        z-index: 2;
        display: flex;
        gap: 1rem;
        align-items: center;
    }

    .topic-header .form-control {
        background: rgba(255, 255, 255, 0.15);
        border: 1px solid rgba(255, 255, 255, 0.3);
        color: white;
        flex: 1;
    }

    .topic-header .form-control::placeholder {
        color: rgba(255, 255, 255, 0.7);
    }

    .topic-header .form-control:focus {
        background: rgba(255, 255, 255, 0.25);
        border-color: rgba(255, 255, 255, 0.5);
    }

    .questions-container {
        padding: 2rem;
        background: rgba(248, 250, 252, 0.8);
    }

    .question-card {
        background: rgba(255, 255, 255, 0.95);
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-radius: var(--radius-lg);
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        box-shadow: var(--shadow-sm);
        position: relative;
        overflow: hidden;
    }

    .question-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 4px;
        height: 100%;
        background: linear-gradient(135deg, var(--primary) 0%, var(--accent) 100%);
    }

    .question-card:hover {
        transform: translateX(2px);
        box-shadow: var(--shadow-md);
        border-color: rgba(37, 99, 235, 0.2);
    }

    .question-card textarea {
        resize: vertical;
        min-height: 80px;
        margin-bottom: 1rem;
    }

    .checkbox-group {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin: 1rem 0;
        padding: 1rem;
        background: rgba(248, 250, 252, 0.6);
        border-radius: var(--radius-md);
        border: 1px solid rgba(255, 255, 255, 0.3);
    }

    .checkbox-item {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px 12px;
        background: rgba(255, 255, 255, 0.9);
        border-radius: var(--radius-sm);
        border: 1px solid rgba(255, 255, 255, 0.3);
        cursor: pointer;
    }

    .checkbox-item:hover {
        background: rgba(255, 255, 255, 1);
        box-shadow: var(--shadow-sm);
    }

    .checkbox-item input[type="checkbox"] {
        width: 16px;
        height: 16px;
        accent-color: var(--primary);
    }

    .checkbox-item label {
        font-size: 14px;
        font-weight: 500;
        color: var(--text-primary);
        cursor: pointer;
        margin: 0;
    }

    .question-footer {
        margin-top: 1.5rem;
        padding-top: 1.5rem;
        border-top: 2px dashed rgba(37, 99, 235, 0.2);
    }

    .options-section {
        margin-bottom: 1.5rem;
        padding: 1rem;
        background: rgba(248, 250, 252, 0.7);
        border-radius: var(--radius-md);
        border: 1px solid rgba(255, 255, 255, 0.3);
    }

    .options-section h5 {
        font-size: 1rem;
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .options-section h5::before {
        content: '⚙️';
        font-size: 16px;
    }

    .option-item {
        display: grid;
        grid-template-columns: 2fr 1fr auto;
        gap: 1rem;
        align-items: center;
        padding: 1rem;
        background: rgba(255, 255, 255, 0.9);
        border-radius: var(--radius-md);
        margin-bottom: 0.5rem;
        border: 1px solid rgba(255, 255, 255, 0.3);
    }

    .option-item:hover {
        background: rgba(255, 255, 255, 0.98);
        transform: translateX(2px);
        box-shadow: var(--shadow-sm);
    }

    @media (max-width: 768px) {
        .form-container {
            margin: 10px;
        }

        .content-header {
            padding: 1.5rem;
        }

        .content-header .header-content {
            flex-direction: column;
            gap: 1rem;
            align-items: flex-start;
        }

        .content-title {
            font-size: 1.5rem;
        }

        .form-row {
            grid-template-columns: 1fr;
            gap: 1rem;
        }

        .card-body {
            padding: 1.5rem;
        }

        .checklist-manager {
            padding: 1.5rem;
        }

        .topic-header {
            padding: 1rem;
        }

        .topic-header-controls {
            flex-direction: column;
            gap: 0.5rem;
        }

        .questions-container {
            padding: 1rem;
        }

        .question-card {
            padding: 1rem;
        }

        .option-item {
            grid-template-columns: 1fr;
            gap: 0.5rem;
        }

        .checkbox-group {
            flex-direction: column;
            gap: 0.5rem;
        }
    }

    .btn.loading {
        pointer-events: none;
        opacity: 0.7;
    }

    .btn.loading::after {
        content: '';
        position: absolute;
        width: 16px;
        height: 16px;
        border: 2px solid transparent;
        border-top: 2px solid currentColor;
        border-radius: 50%;
        margin-left: 8px;
    }

    .field-error {
        color: var(--error);
        font-size: 0.85rem;
        margin-top: 8px;
        font-weight: 500;
        padding-left: 5px;
    }

    .form-control,
    .btn,
    .card,
    .topic-wrapper,
    .question-card,
    .checkbox-item,
    .option-item {
        backface-visibility: hidden;
        -webkit-backface-visibility: hidden;
    }
</style>

<div class="form-container">
    <form method="post" enctype="multipart/form-data" id="mainForm" novalidate>
        {% csrf_token %}

        <div class="content-header">
            <div class="header-content">
                <div>
                    <h2 class="content-title">{{ title }}</h2>
                    <p class="content-subtitle">Configure seu checklist de forma completa e organizada</p>
                </div>
                <a href="{% url 'auditorias:lista_checklists' %}" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Voltar
                </a>
            </div>
        </div>

        <!-- ESTRUTURA DE ABAS -->
        <div class="tabs-container">
            <div class="tabs-header">
                <button type="button" class="tab-btn active" onclick="switchTab(event, 'checklist-info')">
                    <i class="fas fa-info-circle"></i> Informações do Checklist
                </button>
                <button type="button" class="tab-btn" onclick="switchTab(event, 'checklist-structure')">
                    <i class="fas fa-sitemap"></i> Estrutura do Checklist
                </button>
            </div>
            
            <!-- ABA 1: Informações do Checklist -->
            <div class="tab-content active" id="checklist-info">
                <div class="card">
                    <div class="card-body">
                        <p style="color: var(--text-secondary); margin-bottom: 2rem; font-size: 15px;">
                            Preencha os campos abaixo para configurar as informações básicas do checklist.
                        </p>

                        <div class="form-row single">
                            <div class="form-group required">
                                <label for="nome" class="form-label">Nome do Checklist</label>
                                <input type="text" id="nome" name="nome" class="form-control" value="{{ checklist.nome|default:'' }}" required maxlength="255" placeholder="Digite o nome do checklist">
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="ferramenta" class="form-label">Ferramenta Digital</label>
                                <select id="ferramenta" name="ferramenta" class="form-control form-select">
                                    <option value="">Selecione uma ferramenta...</option>
                                    {% for f in ferramentas %}
                                    <option value="{{ f.pk }}" {% if checklist.ferramenta.pk == f.pk %}selected{% endif %}>{{ f.nome }}</option>
                                    {% endfor %}
                                </select>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Status do Checklist</label>
                                <div style="display: flex; align-items: center; gap: 12px; margin-top: 8px;">
                                    <label class="toggle-switch">
                                        <input type="checkbox" name="ativo" {% if checklist.ativo|default:True %}checked{% endif %}>
                                        <span class="toggle-slider"></span>
                                    </label>
                                    <span style="color: var(--text-secondary); font-size: 14px; font-weight: 500;">Checklist ativo no sistema</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- ABA 2: Estrutura do Checklist -->
            <div class="tab-content" id="checklist-structure">
                <div class="checklist-manager">
                    <div class="manager-header">
                        <h4>🔧 Estrutura do Checklist</h4>
                        <p style="color: var(--text-secondary); margin-top: 0.5rem; font-size: 14px;">Configure os tópicos e perguntas que compõem seu checklist</p>
                    </div>
                    
                    <div class="checklist-body" id="topics-container">
                        {% for topico in checklist.topicos.all %}
                        <div class="topic-wrapper" data-topic-id="{{ topico.id }}">
                            <div class="topic-header">
                                <div class="topic-header-controls">
                                    <input type="text" name="topico-descricao[{{ topico.id }}]" class="form-control" value="{{ topico.descricao }}" placeholder="Descrição do Tópico">
                                    <button type="button" class="btn btn-danger js-remove-topic">
                                        <i class="fas fa-trash"></i> Excluir Tópico
                                    </button>
                                </div>
                            </div>
                            <div class="questions-container">
                                {% for pergunta in topico.perguntas.all %}
                                <div class="question-card" data-question-id="{{ pergunta.id }}">
                                    <textarea name="pergunta-descricao[{{ topico.id }}-{{ pergunta.id }}]" class="form-control" rows="3" placeholder="Digite a descrição da pergunta">{{ pergunta.descricao }}</textarea>
                                    
                                    <div class="checkbox-group">
                                        <div class="checkbox-item">
                                            <input type="checkbox" class="js-response-type" name="pergunta-resposta_livre[{{ topico.id }}-{{ pergunta.id }}]" id="resposta_livre_{{ topico.id }}_{{ pergunta.id }}" {% if pergunta.resposta_livre %}checked{% endif %}>
                                            <label for="resposta_livre_{{ topico.id }}_{{ pergunta.id }}">📝 Resposta Livre</label>
                                        </div>
                                        <div class="checkbox-item">
                                            <input type="checkbox" class="js-response-type" name="pergunta-foto[{{ topico.id }}-{{ pergunta.id }}]" id="foto_{{ topico.id }}_{{ pergunta.id }}" {% if pergunta.foto %}checked{% endif %}>
                                            <label for="foto_{{ topico.id }}_{{ pergunta.id }}">📷 Foto</label>
                                        </div>
                                        <div class="checkbox-item">
                                            <input type="checkbox" class="js-response-type" data-controls="options-resposta-section" name="pergunta-criar_opcao[{{ topico.id }}-{{ pergunta.id }}]" id="criar_opcao_{{ topico.id }}_{{ pergunta.id }}" {% if pergunta.criar_opcao %}checked{% endif %}>
                                            <label for="criar_opcao_{{ topico.id }}_{{ pergunta.id }}">✅ Criar uma Opção</label>
                                        </div>
                                        <div class="checkbox-item">
                                            <input type="checkbox" class="js-response-type" data-controls="options-porcentagem-section" name="pergunta-porcentagem[{{ topico.id }}-{{ pergunta.id }}]" id="porcentagem_{{ topico.id }}_{{ pergunta.id }}" {% if pergunta.porcentagem %}checked{% endif %}>
                                            <label for="porcentagem_{{ topico.id }}_{{ pergunta.id }}">📊 Porcentagem</label>
                                        </div>
                                        <div class="checkbox-item">
                                            <input type="checkbox" name="pergunta-obrigatorio[{{ topico.id }}-{{ pergunta.id }}]" id="obrigatorio_{{ topico.id }}_{{ pergunta.id }}" {% if pergunta.obrigatoria %}checked{% endif %}>
                                            <label for="obrigatorio_{{ topico.id }}_{{ pergunta.id }}">⚠️ Obrigatória</label>
                                        </div>
                                    </div>

                                    <div class="question-footer">
                                        <div class="options-section options-resposta-section" style="display: {% if pergunta.criar_opcao %}block{% else %}none{% endif %};">
                                            <h5>Opções de Resposta</h5>
                                            <div class="options-container">
                                                {% for opcao in pergunta.opcoes_resposta.all %}
                                                <div class="option-item">
                                                    <input type="text" name="opcao-resposta-descricao[{{ topico.id }}-{{ pergunta.id }}-{{ opcao.id }}]" class="form-control" value="{{ opcao.descricao }}" placeholder="Descrição da opção">
                                                    <select name="opcao-resposta-status[{{ topico.id }}-{{ pergunta.id }}-{{ opcao.id }}]" class="form-control">
                                                        {% for value, text in status_opcoes %}
                                                        <option value="{{ value }}" {% if opcao.status == value %}selected{% endif %}>{{ text }}</option>
                                                        {% endfor %}
                                                    </select>
                                                    <button type="button" class="btn btn-danger js-remove-option">
                                                        <i class="fas fa-times"></i>
                                                    </button>
                                                </div>
                                                {% endfor %}
                                            </div>
                                            <button type="button" class="btn btn-secondary js-add-option-resposta">
                                                <i class="fas fa-plus"></i> Adicionar Opção
                                            </button>
                                        </div>
                                        
                                        <div class="options-section options-porcentagem-section" style="display: {% if pergunta.porcentagem %}block{% else %}none{% endif %};">
                                            <h5>Opções de Porcentagem</h5>
                                            <div class="options-container">
                                                {% for opcao in pergunta.opcoes_porcentagem.all %}
                                                <div class="option-item">
                                                    <input type="text" name="opcao-porcentagem-descricao[{{ topico.id }}-{{ pergunta.id }}-{{ opcao.id }}]" class="form-control" value="{{ opcao.descricao }}" placeholder="Descrição da opção">
                                                    <input type="number" name="opcao-porcentagem-peso[{{ topico.id }}-{{ pergunta.id }}-{{ opcao.id }}]" class="form-control" value="{{ opcao.peso }}" min="0" max="100" placeholder="Peso %">
                                                    <input type="color" name="opcao-porcentagem-cor[{{ topico.id }}-{{ pergunta.id }}-{{ opcao.id }}]" class="form-control" value="{{ opcao.cor }}" style="width: 60px; height: 40px; padding: 4px;">
                                                    <button type="button" class="btn btn-danger js-remove-option">
                                                        <i class="fas fa-times"></i>
                                                    </button>
                                                </div>
                                                {% endfor %}
                                            </div>
                                            <button type="button" class="btn btn-secondary js-add-option-porcentagem">
                                                <i class="fas fa-plus"></i> Adicionar Opção
                                            </button>
                                        </div>
                                    </div>
                                    
                                    <div style="display: flex; justify-content: flex-end; margin-top: 1rem; padding-top: 1rem; border-top: 1px solid rgba(255, 255, 255, 0.3);">
                                        <button type="button" class="btn btn-danger js-remove-question">
                                            <i class="fas fa-trash"></i> Excluir Pergunta
                                        </button>
                                    </div>
                                </div>
                                {% endfor %}
                                <button type="button" class="btn btn-primary js-add-question">
                                    <i class="fas fa-plus"></i> Adicionar Pergunta
                                </button>
                            </div>
                        </div>
                        {% endfor %}
                    </div>
                    
                    <div style="display: flex; justify-content: center; margin-top: 2rem;">
                        <button type="button" id="add-topic-btn" class="btn btn-secondary">
                            <i class="fas fa-plus"></i> Adicionar Novo Tópico
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div style="display: flex; justify-content: flex-end; gap: 1rem; margin: 2rem; padding-top: 2rem; border-top: 2px solid rgba(37, 99, 235, 0.1);">
            <a href="{% url 'auditorias:lista_checklists' %}" class="btn btn-secondary">
                <i class="fas fa-times"></i> Cancelar
            </a>
            <button type="submit" class="btn btn-primary" id="submitBtn">
                <i class="fas fa-save"></i> Salvar Alterações
            </button>
        </div>
    </form>
</div>

{{ status_opcoes|json_script:"status-opcoes-data" }}

<template id="topic-template">
    <div class="topic-wrapper" data-topic-id="new-id">
        <div class="topic-header">
            <div class="topic-header-controls">
                <input type="text" name="topico-descricao[new-id]" class="form-control" placeholder="Descrição do Novo Tópico">
                <button type="button" class="btn btn-danger js-remove-topic">
                    <i class="fas fa-trash"></i> Excluir Tópico
                </button>
            </div>
        </div>
        <div class="questions-container">
            <button type="button" class="btn btn-primary js-add-question">
                <i class="fas fa-plus"></i> Adicionar Pergunta
            </button>
        </div>
    </div>
</template>

<template id="question-template">
    <div class="question-card" data-question-id="new-question-id">
        <textarea name="pergunta-descricao[topic-id-question-id]" class="form-control" rows="3" placeholder="Digite a descrição da pergunta"></textarea>
        
        <div class="checkbox-group">
            <div class="checkbox-item">
                <input type="checkbox" class="js-response-type" name="pergunta-resposta_livre[topic-id-question-id]" id="resposta_livre_new">
                <label for="resposta_livre_new">📝 Resposta Livre</label>
            </div>
            <div class="checkbox-item">
                <input type="checkbox" class="js-response-type" name="pergunta-foto[topic-id-question-id]" id="foto_new">
                <label for="foto_new">📷 Foto</label>
            </div>
            <div class="checkbox-item">
                <input type="checkbox" class="js-response-type" data-controls="options-resposta-section" name="pergunta-criar_opcao[topic-id-question-id]" id="criar_opcao_new" checked>
                <label for="criar_opcao_new">✅ Criar uma Opção</label>
            </div>
            <div class="checkbox-item">
                <input type="checkbox" class="js-response-type" data-controls="options-porcentagem-section" name="pergunta-porcentagem[topic-id-question-id]" id="porcentagem_new">
                <label for="porcentagem_new">📊 Porcentagem</label>
            </div>
            <div class="checkbox-item">
                <input type="checkbox" name="pergunta-obrigatorio[topic-id-question-id]" id="obrigatorio_new">
                <label for="obrigatorio_new">⚠️ Obrigatória</label>
            </div>
        </div>
        
        <div class="question-footer">
            <div class="options-section options-resposta-section">
                <h5>Opções de Resposta</h5>
                <div class="options-container"></div>
                <button type="button" class="btn btn-secondary js-add-option-resposta">
                    <i class="fas fa-plus"></i> Adicionar Opção
                </button>
            </div>
            <div class="options-section options-porcentagem-section" style="display: none;">
                <h5>Opções de Porcentagem</h5>
                <div class="options-container"></div>
                <button type="button" class="btn btn-secondary js-add-option-porcentagem">
                    <i class="fas fa-plus"></i> Adicionar Opção
                </button>
            </div>
        </div>
        
        <div style="display: flex; justify-content: flex-end; margin-top: 1rem; padding-top: 1rem; border-top: 1px solid rgba(255, 255, 255, 0.3);">
            <button type="button" class="btn btn-danger js-remove-question">
                <i class="fas fa-trash"></i> Excluir Pergunta
            </button>
        </div>
    </div>
</template>

<template id="option-resposta-template">
    <div class="option-item">
        <input type="text" name="opcao-resposta-descricao[question-id-option-id]" class="form-control" placeholder="Descrição da opção">
        <select name="opcao-resposta-status[question-id-option-id]" class="form-control"></select>
        <button type="button" class="btn btn-danger js-remove-option">
            <i class="fas fa-times"></i>
        </button>
    </div>
</template>

<template id="option-porcentagem-template">
    <div class="option-item">
        <input type="text" name="opcao-porcentagem-descricao[question-id-option-id]" class="form-control" placeholder="Descrição da opção">
        <input type="number" name="opcao-porcentagem-peso[question-id-option-id]" class="form-control" min="0" max="100" placeholder="Peso %">
        <input type="color" name="opcao-porcentagem-cor[question-id-option-id]" class="form-control" value="#3b82f6" style="width: 60px; height: 40px; padding: 4px;">
        <button type="button" class="btn btn-danger js-remove-option">
            <i class="fas fa-times"></i>
        </button>
    </div>
</template>

<script>
// Função para trocar de aba
function switchTab(event, tabId) {
    event.preventDefault();
    
    // Remover active de todos os botões e conteúdos
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
    });
    
    // Ativar a aba selecionada
    event.currentTarget.classList.add('active');
    document.getElementById(tabId).classList.add('active');
}

document.addEventListener('DOMContentLoaded', function() {
    console.log('Script iniciado');
    
    const topicsContainer = document.getElementById('topics-container');
    const statusOpcoesElement = document.getElementById('status-opcoes-data');
    let statusOpcoes = [];
    
    if (statusOpcoesElement) {
        try {
            statusOpcoes = JSON.parse(statusOpcoesElement.textContent);
            console.log('Status opções carregadas:', statusOpcoes);
        } catch (e) {
            console.error('Erro ao parsear status opções:', e);
            statusOpcoes = [
                ['CONFORME', 'Conforme'],
                ['NAO_CONFORME', 'Não Conforme'],
                ['DESVIO_SOLUCIONADO', 'Desvio Solucionado'],
                ['NA', 'N/A']
            ];
        }
    } else {
        statusOpcoes = [
            ['CONFORME', 'Conforme'],
            ['NAO_CONFORME', 'Não Conforme'],
            ['DESVIO_SOLUCIONADO', 'Desvio Solucionado'],
            ['NA', 'N/A']
        ];
    }

    let newTopicCounter = 0;
    let newQuestionCounter = 0;
    let newOptionCounter = 0;

    function getNewId(prefix) {
        if (prefix === 'topic') {
            newTopicCounter++;
            return `new-${newTopicCounter}`;
        }
        if (prefix === 'question') {
            newQuestionCounter++;
            return `new-${newQuestionCounter}`;
        }
        if (prefix === 'option') {
            newOptionCounter++;
            return `new-${newOptionCounter}`;
        }
    }

    function throttle(func, limit) {
        let inThrottle;
        return function() {
            const args = arguments;
            const context = this;
            if (!inThrottle) {
                func.apply(context, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        }
    }

    document.body.addEventListener('click', function(e) {
        const target = e.target;
        const closest = target.closest.bind(target);
        
        if (target.id === 'add-topic-btn' || closest('#add-topic-btn')) {
            e.preventDefault();
            addTopic();
            return;
        }

        if (target.classList.contains('js-remove-topic') || closest('.js-remove-topic')) {
            e.preventDefault();
            removeTopic(target);
            return;
        }

        if (target.classList.contains('js-add-question') || closest('.js-add-question')) {
            e.preventDefault();
            addQuestion(target);
            return;
        }

        if (target.classList.contains('js-remove-question') || closest('.js-remove-question')) {
            e.preventDefault();
            removeQuestion(target);
            return;
        }

        if (target.classList.contains('js-add-option-resposta') || closest('.js-add-option-resposta')) {
            e.preventDefault();
            addOptionResposta(target);
            return;
        }

        if (target.classList.contains('js-add-option-porcentagem') || closest('.js-add-option-porcentagem')) {
            e.preventDefault();
            addOptionPorcentagem(target);
            return;
        }

        if (target.classList.contains('js-remove-option') || closest('.js-remove-option')) {
            e.preventDefault();
            removeOption(target);
            return;
        }
    });

    function addTopic() {
        const topicTemplate = document.getElementById('topic-template');
        const newTopicElement = topicTemplate.content.cloneNode(true);
        const topicWrapper = newTopicElement.querySelector('.topic-wrapper');
        const newId = getNewId('topic');
        
        topicWrapper.dataset.topicId = newId;
        topicWrapper.innerHTML = topicWrapper.innerHTML.replace(/new-id/g, newId);
        topicWrapper.classList.add('new-item');
        
        topicsContainer.appendChild(newTopicElement);
        
        setTimeout(() => {
            const addedTopic = topicsContainer.querySelector(`[data-topic-id="${newId}"]`);
            if (addedTopic) addedTopic.classList.remove('new-item');
        }, 300);
    }

    function removeTopic(target) {
        const topicWrapper = target.closest('.topic-wrapper');
        if (topicWrapper && confirm('Tem certeza que deseja excluir este tópico?')) {
            topicWrapper.style.transition = 'opacity 0.2s ease, transform 0.2s ease';
            topicWrapper.style.opacity = '0';
            topicWrapper.style.transform = 'translateY(-10px)';
            setTimeout(() => topicWrapper.remove(), 200);
        }
    }

    function addQuestion(target) {
        const questionsContainer = target.closest('.questions-container');
        const topicWrapper = target.closest('.topic-wrapper');
        const topicId = topicWrapper.dataset.topicId;
        
        const questionTemplate = document.getElementById('question-template');
        const newQuestionElement = questionTemplate.content.cloneNode(true);
        const questionCard = newQuestionElement.querySelector('.question-card');
        const newQuestionId = getNewId('question');
        
        questionCard.dataset.questionId = newQuestionId;
        questionCard.innerHTML = questionCard.innerHTML.replace(/topic-id-question-id/g, `${topicId}-${newQuestionId}`);
        questionCard.innerHTML = questionCard.innerHTML.replace(/resposta_livre_new/g, `resposta_livre_${topicId}_${newQuestionId}`);
        questionCard.innerHTML = questionCard.innerHTML.replace(/foto_new/g, `foto_${topicId}_${newQuestionId}`);
        questionCard.innerHTML = questionCard.innerHTML.replace(/criar_opcao_new/g, `criar_opcao_${topicId}_${newQuestionId}`);
        questionCard.innerHTML = questionCard.innerHTML.replace(/porcentagem_new/g, `porcentagem_${topicId}_${newQuestionId}`);
        questionCard.innerHTML = questionCard.innerHTML.replace(/obrigatorio_new/g, `obrigatorio_${topicId}_${newQuestionId}`);
        
        questionCard.classList.add('new-item');
        questionsContainer.insertBefore(newQuestionElement, target);
        
        setTimeout(() => {
            const addedQuestion = questionsContainer.querySelector(`[data-question-id="${newQuestionId}"]`);
            if (addedQuestion) addedQuestion.classList.remove('new-item');
        }, 300);
    }

    function removeQuestion(target) {
        const questionCard = target.closest('.question-card');
        if (questionCard && confirm('Tem certeza que deseja excluir esta pergunta?')) {
            questionCard.style.transition = 'opacity 0.2s ease, transform 0.2s ease';
            questionCard.style.opacity = '0';
            questionCard.style.transform = 'translateX(-10px)';
            setTimeout(() => questionCard.remove(), 200);
        }
    }

    function addOptionResposta(target) {
        const optionsContainer = target.closest('.options-section').querySelector('.options-container');
        const questionCard = target.closest('.question-card');
        const questionId = questionCard.dataset.questionId;
        const topicWrapper = target.closest('.topic-wrapper');
        const topicId = topicWrapper.dataset.topicId;
        
        const optionTemplate = document.getElementById('option-resposta-template');
        const newOptionElement = optionTemplate.content.cloneNode(true);
        const optionItem = newOptionElement.querySelector('.option-item');
        const newOptionId = getNewId('option');
        
        optionItem.innerHTML = optionItem.innerHTML.replace(/question-id-option-id/g, `${topicId}-${questionId}-${newOptionId}`);
        
        const select = optionItem.querySelector('select');
        const fragment = document.createDocumentFragment();
        statusOpcoes.forEach(([value, text]) => {
            const option = document.createElement('option');
            option.value = value;
            option.textContent = text;
            fragment.appendChild(option);
        });
        select.appendChild(fragment);
        
        optionsContainer.appendChild(newOptionElement);
    }

    function addOptionPorcentagem(target) {
        const optionsContainer = target.closest('.options-section').querySelector('.options-container');
        const questionCard = target.closest('.question-card');
        const questionId = questionCard.dataset.questionId;
        const topicWrapper = target.closest('.topic-wrapper');
        const topicId = topicWrapper.dataset.topicId;
        
        const optionTemplate = document.getElementById('option-porcentagem-template');
        const newOptionElement = optionTemplate.content.cloneNode(true);
        const optionItem = newOptionElement.querySelector('.option-item');
        const newOptionId = getNewId('option');
        
        optionItem.innerHTML = optionItem.innerHTML.replace(/question-id-option-id/g, `${topicId}-${questionId}-${newOptionId}`);
        
        optionsContainer.appendChild(newOptionElement);
    }

    function removeOption(target) {
        const optionItem = target.closest('.option-item');
        if (optionItem && confirm('Tem certeza que deseja remover esta opção?')) {
            optionItem.style.transition = 'opacity 0.15s ease';
            optionItem.style.opacity = '0';
            setTimeout(() => optionItem.remove(), 150);
        }
    }

    const handleCheckboxChange = throttle(function(e) {
        const target = e.target;
        
        if (target.classList.contains('js-response-type') && target.dataset.controls) {
            const questionCard = target.closest('.question-card');
            const sectionClass = target.dataset.controls;
            const section = questionCard.querySelector(`.${sectionClass}`);
            
            if (section) {
                requestAnimationFrame(() => {
                    section.style.display = target.checked ? 'block' : 'none';
                });
            }
        }
    }, 100);

    document.body.addEventListener('change', handleCheckboxChange);

    const form = document.getElementById('mainForm');
    const submitBtn = document.getElementById('submitBtn');
    
    if (form && submitBtn) {
        let submitTimeout;
        form.addEventListener('submit', function(e) {
            clearTimeout(submitTimeout);
            submitTimeout = setTimeout(() => {
                submitBtn.classList.add('loading');
                submitBtn.disabled = true;
            }, 100);
        });
    }

    console.log('Script carregado completamente');
});
</script>

{% endblock %}

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\templates\auditorias\checklists\lista.html

{% extends 'auditorias/lista_generica.html' %}

{% block table_headers %}
    <th>Nome do Checklist</th>
    <th>Ferramenta</th>
    <th>Status</th>
    <th style="width: 120px;">Ações</th>
{% endblock %}

{% block table_row %}
    <td>
        <div style="font-weight: 600; color: var(--text-primary);">
            {{ object.nome }}
        </div>
    </td>
    <td>{{ object.ferramenta.nome|default:"—" }}</td>
    <td>
        {% if object.ativo %}
            <span class="badge badge-success"><i class="fas fa-check-circle"></i> Ativo</span>
        {% else %}
            <span class="badge badge-error"><i class="fas fa-times-circle"></i> Inativo</span>
        {% endif %}
    </td>
    <td>
        <div class="action-buttons">
            <a href="{% url 'auditorias:editar_checklist' object.pk %}" class="btn btn-secondary btn-icon" title="Editar Checklist">
                <i class="fas fa-edit"></i>
            </a>
            <button type="button" class="btn btn-danger btn-icon" title="Deletar Checklist"
                    onclick="confirmDelete('{% url 'auditorias:deletar_checklist' object.pk %}', '{{ object.nome }}')">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    </td>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\templates\auditorias\ferramentas_digitais\form.html

{% extends 'auditorias/form_generico.html' %}

{% block form_content %}
<div class="form-row single">
    <div class="form-group required">
        <label for="nome" class="form-label">Nome da Ferramenta</label>
        <input type="text" id="nome" name="nome" class="form-control" value="{{ ferramenta.nome|default:'' }}" required maxlength="100">
    </div>
</div>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\templates\auditorias\ferramentas_digitais\lista.html

{% extends 'auditorias/lista_generica.html' %}

{% block table_headers %}
    <th>Nome da Ferramenta</th>
    <th style="width: 120px;">Ações</th>
{% endblock %}

{% block table_row %}
    <td>
        <div style="font-weight: 600; color: var(--text-primary);">
            {{ object.nome }}
        </div>
    </td>
    <td>
        <div class="action-buttons">
            <a href="{% url 'auditorias:editar_ferramenta_digital' object.pk %}" class="btn btn-secondary btn-icon" title="Editar Ferramenta">
                <i class="fas fa-edit"></i>
            </a>
            <button type="button" class="btn btn-danger btn-icon" title="Deletar Ferramenta"
                    onclick="confirmDelete('{% url 'auditorias:deletar_ferramenta_digital' object.pk %}', '{{ object.nome }}')">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    </td>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\templates\auditorias\modelos_auditoria\form.html

{% extends 'auditorias/form_generico.html' %}

{% block form_content %}
<div class="form-row single">
    <div class="form-group required">
        <label for="descricao" class="form-label">Descrição do Modelo</label>
        <input type="text" id="descricao" name="descricao" class="form-control" value="{{ modelo.descricao|default:'' }}" required maxlength="255">
    </div>
</div>

<div class="form-row">
    <div class="form-group">
        <label for="checklist" class="form-label">Checklist</label>
        <select id="checklist" name="checklist" class="form-control form-select">
            <option value="">Selecione...</option>
            {% for c in checklists %}
            <option value="{{ c.pk }}" {% if modelo.checklist.pk == c.pk %}selected{% endif %}>{{ c.nome }}</option>
            {% endfor %}
        </select>
    </div>
    <div class="form-group">
        <label for="categoria" class="form-label">Categoria</label>
        <select id="categoria" name="categoria" class="form-control form-select">
            <option value="">Selecione...</option>
            {% for cat in categorias %}
            <option value="{{ cat.pk }}" {% if modelo.categoria.pk == cat.pk %}selected{% endif %}>{{ cat.descricao }}</option>
            {% endfor %}
        </select>
    </div>
</div>

<div class="form-row single">
    <div class="form-group">
        <label for="ferramenta_causa_raiz" class="form-label">Ferramenta para Causa Raiz</label>
        <select id="ferramenta_causa_raiz" name="ferramenta_causa_raiz" class="form-control form-select">
            <option value="">Selecione...</option>
            {% for f in ferramentas_causa_raiz %}
            <option value="{{ f.pk }}" {% if modelo.ferramenta_causa_raiz.pk == f.pk %}selected{% endif %}>{{ f.nome }}</option>
            {% endfor %}
        </select>
    </div>
</div>

<div class="form-row">
    <div class="form-group">
        <label class="form-label">Status</label>
        <div style="display: flex; align-items: center; gap: 12px;">
            <label class="toggle-switch">
                <input type="checkbox" name="ativo" {% if modelo.ativo|default:True %}checked{% endif %}>
                <span class="toggle-slider"></span>
            </label>
            <span style="color: var(--text-secondary); font-size: 14px;">Modelo ativo</span>
        </div>
    </div>
    <div class="form-group">
        <label class="form-label">Iniciar por QR Code</label>
        <div style="display: flex; align-items: center; gap: 12px;">
            <label class="toggle-switch">
                <input type="checkbox" name="iniciar_por_codigo_qr" {% if modelo.iniciar_por_codigo_qr %}checked{% endif %}>
                <span class="toggle-slider"></span>
            </label>
            <span style="color: var(--text-secondary); font-size: 14px;">Permitir iniciar via QR Code</span>
        </div>
    </div>
</div>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\templates\auditorias\modelos_auditoria\lista.html

{% extends 'auditorias/lista_generica.html' %}

{% block table_headers %}
    <th>Descrição do Modelo</th>
    <th>Checklist Associado</th>
    <th>Categoria</th>
    <th>Status</th>
    <th style="width: 120px;">Ações</th>
{% endblock %}

{% block table_row %}
    <td>
        <div style="font-weight: 600; color: var(--text-primary);">
            {{ object.descricao }}
        </div>
    </td>
    <td>{{ object.checklist.nome|default:"—" }}</td>
    <td>{{ object.categoria.descricao|default:"—" }}</td>
    <td>
        {% if object.ativo %}
            <span class="badge badge-success"><i class="fas fa-check-circle"></i> Ativo</span>
        {% else %}
            <span class="badge badge-error"><i class="fas fa-times-circle"></i> Inativo</span>
        {% endif %}
    </td>
    <td>
        <div class="action-buttons">
            <a href="{% url 'auditorias:editar_modelo_auditoria' object.pk %}" class="btn btn-secondary btn-icon" title="Editar Modelo">
                <i class="fas fa-edit"></i>
            </a>
            <button type="button" class="btn btn-danger btn-icon" title="Deletar Modelo"
                    onclick="confirmDelete('{% url 'auditorias:deletar_modelo_auditoria' object.pk %}', '{{ object.descricao }}')">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    </td>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\templates\auditorias\normas\form.html

{% extends 'auditorias/form_generico.html' %}

{% block form_content %}
<div class="form-row">
    <div class="form-group required">
        <label for="descricao" class="form-label">Descrição da Norma</label>
        <input type="text" id="descricao" name="descricao" class="form-control" value="{{ norma.descricao|default:'' }}" required maxlength="255" placeholder="Ex: ISO 9001, NBR 14001">
        <div class="field-help">Nome completo da norma ou padrão</div>
    </div>
    <div class="form-group required">
        <label for="revisao" class="form-label">Revisão</label>
        <input type="text" id="revisao" name="revisao" class="form-control" value="{{ norma.revisao|default:'' }}" required maxlength="100" placeholder="Ex: 2015, Rev. 3.0">
        <div class="field-help">Versão ou revisão da norma</div>
    </div>
</div>

<div class="form-row single">
    <div class="form-group">
        <label class="form-label">Status</label>
        <div style="display: flex; align-items: center; gap: 12px;">
            <label class="toggle-switch">
                <input type="checkbox" name="ativo" {% if norma.ativo|default:True %}checked{% endif %}>
                <span class="toggle-slider"></span>
            </label>
            <span style="color: var(--text-secondary); font-size: 14px;">Norma ativa no sistema</span>
        </div>
        <div class="field-help">Normas inativas não aparecerão nas listagens de seleção</div>
    </div>
</div>
{% endblock %}

{% block help_content %}
<div style="color: var(--text-secondary); font-size: 14px; line-height: 1.6;">
    <p><strong>Sobre Normas:</strong></p>
    <ul style="margin: 12px 0; padding-left: 20px;">
        <li>Normas são padrões técnicos ou regulamentações</li>
        <li>Cada norma pode ter múltiplos requisitos associados</li>
        <li>A combinação descrição + revisão deve ser única</li>
        <li>Use descrições claras e revisões precisas</li>
    </ul>
    
    <p><strong>Exemplos de Normas:</strong></p>
    <ul style="margin: 12px 0; padding-left: 20px;">
        <li>ISO 9001 - Sistemas de gestão da qualidade</li>
        <li>ISO 14001 - Sistemas de gestão ambiental</li>
        <li>OHSAS 18001 - Segurança e saúde ocupacional</li>
        <li>NBR 5410 - Instalações elétricas</li>
        <li>NR-12 - Segurança no trabalho em máquinas</li>
    </ul>
</div>
{% endblock %}

{% block quick_actions %}
<button type="button" onclick="previewForm()" class="btn btn-secondary btn-sm">
    <i class="fas fa-eye"></i>
    Visualizar
</button>
<button type="button" onclick="resetForm()" class="btn btn-secondary btn-sm">
    <i class="fas fa-undo"></i>
    Resetar
</button>
<button type="button" onclick="generateNormaSuggestions()" class="btn btn-secondary btn-sm">
    <i class="fas fa-lightbulb"></i>
    Sugestões
</button>
<button type="button" onclick="validateNorma()" class="btn btn-secondary btn-sm">
    <i class="fas fa-check"></i>
    Verificar Norma
</button>
{% endblock %}

{% block extra_js %}
{{ block.super }}
<script>
    // Validação específica para normas
    document.addEventListener('DOMContentLoaded', function() {
        const descricaoField = document.getElementById('descricao');
        const revisaoField = document.getElementById('revisao');
        
        // Validação em tempo real da descrição
        descricaoField.addEventListener('input', function() {
            const value = this.value.trim();
            
            if (value.length > 0 && value.length < 3) {
                showFieldError(this, 'Descrição deve ter pelo menos 3 caracteres');
            } else if (value.length > 255) {
                showFieldError(this, 'Descrição não pode ter mais de 255 caracteres');
            }
        });
        
        // Validação em tempo real da revisão
        revisaoField.addEventListener('input', function() {
            const value = this.value.trim();
            
            if (value.length > 100) {
                showFieldError(this, 'Revisão não pode ter mais de 100 caracteres');
            }
        });
        
        // Auto-formatação da descrição
        descricaoField.addEventListener('blur', function() {
            let value = this.value.trim();
            if (value) {
                // Capitaliza apenas a primeira letra
                this.value = value.charAt(0).toUpperCase() + value.slice(1);
            }
        });
    });

    // Função para gerar sugestões de normas
    function generateNormaSuggestions() {
        const suggestions = [
            { descricao: 'ISO 9001', revisao: '2015' },
            { descricao: 'ISO 14001', revisao: '2015' },
            { descricao: 'ISO 45001', revisao: '2018' },
            { descricao: 'OHSAS 18001', revisao: '2007' },
            { descricao: 'NBR 5410', revisao: '2004' },
            { descricao: 'NR-12', revisao: '2019' },
            { descricao: 'NR-10', revisao: '2019' },
            { descricao: 'ISO 27001', revisao: '2013' },
            { descricao: 'ISO 22000', revisao: '2018' },
            { descricao: 'IATF 16949', revisao: '2016' }
        ];
        
        let suggestionsHtml = '<div style="margin-bottom: 16px;"><strong>Sugestões de Normas:</strong></div>';
        suggestionsHtml += '<div style="display: flex; flex-direction: column; gap: 8px; max-height: 300px; overflow-y: auto;">';
        
        suggestions.forEach(suggestion => {
            suggestionsHtml += `
                <button type="button" 
                        onclick="applyNormaSuggestion('${suggestion.descricao}', '${suggestion.revisao}')" 
                        class="btn btn-secondary btn-sm"
                        style="justify-content: flex-start; text-align: left;">
                    <strong>${suggestion.descricao}</strong> - Rev. ${suggestion.revisao}
                </button>
            `;
        });
        
        suggestionsHtml += '</div>';
        
        document.getElementById('previewContent').innerHTML = suggestionsHtml;
        document.getElementById('previewModal').style.display = 'flex';
    }

    // Aplicar sugestão de norma
    function applyNormaSuggestion(descricao, revisao) {
        document.getElementById('descricao').value = descricao;
        document.getElementById('revisao').value = revisao;
        
        closePreviewModal();
        
        // Trigger validation
        document.getElementById('descricao').dispatchEvent(new Event('input'));
        document.getElementById('revisao').dispatchEvent(new Event('input'));
    }

    // Validar norma
    function validateNorma() {
        const descricao = document.getElementById('descricao').value.trim();
        const revisao = document.getElementById('revisao').value.trim();
        
        if (!descricao) {
            alert('Digite uma descrição para validar');
            return;
        }
        
        if (!revisao) {
            alert('Digite uma revisão para validar');
            return;
        }
        
        // Simular validação via AJAX
        setButtonLoading('submitBtn', true);
        
        setTimeout(() => {
            setButtonLoading('submitBtn', false);
            
            // Simular resultado da validação
            const isUnique = Math.random() > 0.2; // 80% chance de ser único
            
            if (isUnique) {
                showFieldSuccess(document.getElementById('descricao'), 'Combinação norma + revisão disponível');
                showFieldSuccess(document.getElementById('revisao'), 'Revisão válida');
            } else {
                showFieldError(document.getElementById('descricao'), 'Esta combinação de norma e revisão já existe');
            }
        }, 1000);
    }

    // Mostrar sucesso no campo
    function showFieldSuccess(field, message) {
        field.classList.add('success');
        field.classList.remove('error');
        
        // Remover mensagem anterior
        const existingMessage = field.parentNode.querySelector('.field-error, .field-success');
        if (existingMessage) {
            existingMessage.remove();
        }
        
        // Adicionar mensagem de sucesso
        const successElement = document.createElement('div');
        successElement.className = 'field-success';
        successElement.style.color = 'var(--success)';
        successElement.style.fontSize = '12px';
        successElement.style.marginTop = '4px';
        successElement.style.display = 'flex';
        successElement.style.alignItems = 'center';
        successElement.style.gap = '4px';
        successElement.innerHTML = `<i class="fas fa-check-circle"></i> ${message}`;
        field.parentNode.appendChild(successElement);
        
        // Remover após 3 segundos
        setTimeout(() => {
            if (successElement.parentNode) {
                successElement.remove();
            }
        }, 3000);
    }

    // Validação customizada do formulário
    function validateForm() {
        const descricao = document.getElementById('descricao').value.trim();
        const revisao = document.getElementById('revisao').value.trim();
        let isValid = true;
        
        if (!descricao) {
            showFieldError(document.getElementById('descricao'), 'Descrição é obrigatória');
            isValid = false;
        } else if (descricao.length < 3) {
            showFieldError(document.getElementById('descricao'), 'Descrição deve ter pelo menos 3 caracteres');
            isValid = false;
        }
        
        if (!revisao) {
            showFieldError(document.getElementById('revisao'), 'Revisão é obrigatória');
            isValid = false;
        }
        
        return isValid;
    }

    // Atalhos específicos para normas
    document.addEventListener('keydown', function(e) {
        // Ctrl/Cmd + G para gerar sugestões
        if ((e.ctrlKey || e.metaKey) && e.key === 'g') {
            e.preventDefault();
            generateNormaSuggestions();
        }
        
        // Ctrl/Cmd + T para validar norma
        if ((e.ctrlKey || e.metaKey) && e.key === 't') {
            e.preventDefault();
            validateNorma();
        }
    });
</script>
{% endblock %}

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\templates\auditorias\normas\lista.html

{% extends 'auditorias/lista_generica.html' %}

{% block table_headers %}
    <th>Descrição da Norma</th>
    <th>Revisão</th>
    <th>Status</th>
    <th style="width: 120px;">Ações</th>
{% endblock %}

{% block table_row %}
    <td>
        <div style="font-weight: 600; color: var(--text-primary);">
            {{ object.descricao }}
        </div>
    </td>
    <td>{{ object.revisao }}</td>
    <td>
        {% if object.ativo %}
            <span class="badge badge-success"><i class="fas fa-check-circle"></i> Ativo</span>
        {% else %}
            <span class="badge badge-error"><i class="fas fa-times-circle"></i> Inativo</span>
        {% endif %}
    </td>
    <td>
        <div class="action-buttons">
            <a href="{% url 'auditorias:editar_norma' object.pk %}" class="btn btn-secondary btn-icon" title="Editar Norma">
                <i class="fas fa-edit"></i>
            </a>
            <button type="button" class="btn btn-danger btn-icon" title="Deletar Norma"
                    onclick="confirmDelete('{% url 'auditorias:deletar_norma' object.pk %}', '{{ object.descricao }}')">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    </td>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\templates\auditorias\partials\_head.html

{% load static %}
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Sistema de Auditorias{% endblock %}</title>
    
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <style>
        :root {
            --primary: #2563eb;
            --primary-dark: #1d4ed8;
            --primary-light: #3b82f6;
            --secondary: #f8fafc;
            --accent: #059669;
            --error: #dc2626;
            --warning: #f59e0b;
            --success: #10b981;
            --text-primary: #0f172a;
            --text-secondary: #475569;
            --text-muted: #64748b;
            --border: #e2e8f0;
            --border-focus: #93c5fd;
            --bg-primary: #ffffff;
            --bg-secondary: #f1f5f9;
            --bg-tertiary: #f8fafc;
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --shadow-xl: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
            --radius-sm: 8px;
            --radius-md: 12px;
            --radius-lg: 16px;
            --radius-xl: 20px;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            color: var(--text-primary);
            min-height: 100vh;
            line-height: 1.6;
        }

        /* Layout Principal */
        .app-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar */
        .sidebar {
            width: 280px;
            background: linear-gradient(180deg, var(--primary-dark) 0%, var(--primary) 100%);
            color: white;
            position: fixed;
            height: 100vh;
            z-index: 1000;
            transition: all 0.3s ease;
            box-shadow: var(--shadow-xl);
            display: flex; /* MODIFICADO */
            flex-direction: column; /* MODIFICADO */
        }

        .sidebar.collapsed {
            width: 80px;
        }
        
        /* Cabeçalho Fixo da Sidebar */
        .sidebar-header {
            padding: 20px 28px 20px 20px; /* MODIFICADO */
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            flex-shrink: 0;
            background: var(--primary-dark);
            z-index: 10;
        }
        
        .sidebar-header-top {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 16px; /* MODIFICADO */
        }
        
        .sidebar.collapsed .sidebar-header-top {
            margin-bottom: 0; /* MODIFICADO */
        }
        
        .sidebar.collapsed .sidebar-search-container {
            display: none; /* MODIFICADO */
        }

        .sidebar-logo {
            width: 40px;
            height: 40px;
            background: rgba(255, 255, 255, 0.15);
            border-radius: var(--radius-md);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            font-weight: bold;
        }

        .sidebar-title {
            font-size: 18px;
            font-weight: 700;
            transition: opacity 0.3s ease;
        }

        .sidebar.collapsed .sidebar-title {
            opacity: 0;
        }

        .sidebar-toggle {
            background: none;
            border: none;
            color: white;
            font-size: 18px;
            cursor: pointer;
            padding: 8px;
            border-radius: var(--radius-sm);
            transition: background 0.2s ease;
            margin-left: auto;
        }

        .sidebar-toggle:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        /* Área de Rolagem da Sidebar */
        .sidebar-nav {
            flex: 1;
            overflow-y: scroll; /* MODIFICADO */
            padding: 12px 0;
        }

        .nav-section {
            margin-bottom: 32px;
        }

        .nav-section-title {
            padding: 0 20px 12px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            opacity: 0.7;
            transition: opacity 0.3s ease;
        }

        .sidebar.collapsed .nav-section-title {
            opacity: 0;
        }

        .nav-item {
            display: block;
            padding: 12px 20px;
            color: rgba(255, 255, 255, 0.9);
            text-decoration: none;
            transition: all 0.2s ease;
            position: relative;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .nav-item:hover {
            background: rgba(255, 255, 255, 0.1);
            color: white;
            transform: translateX(4px);
        }

        .nav-item.active {
            background: rgba(255, 255, 255, 0.15);
            color: white;
            border-right: 3px solid white;
        }

        .nav-item i {
            width: 20px;
            text-align: center;
            font-size: 16px;
        }

        .nav-item-text {
            transition: opacity 0.3s ease;
        }

        .sidebar.collapsed .nav-item-text {
            opacity: 0;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            margin-left: 280px;
            transition: margin-left 0.3s ease;
            background: var(--bg-secondary);
        }

        .sidebar.collapsed + .main-content {
            margin-left: 80px;
        }

        /* Header */
        .main-header {
            background: var(--bg-primary);
            padding: 20px 32px;
            border-bottom: 1px solid var(--border);
            box-shadow: var(--shadow-sm);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .page-title {
            font-size: 24px;
            font-weight: 700;
            color: var(--text-primary);
        }

        .header-actions {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .user-menu {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 8px 16px;
            background: var(--bg-tertiary);
            border-radius: var(--radius-lg);
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .user-menu:hover {
            background: var(--bg-secondary);
            transform: translateY(-1px);
        }

        .user-avatar {
            width: 36px;
            height: 36px;
            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
        }

        .user-info {
            display: flex;
            flex-direction: column;
        }

        .user-name {
            font-size: 14px;
            font-weight: 600;
            color: var(--text-primary);
        }

        .user-role {
            font-size: 12px;
            color: var(--text-muted);
        }

        /* Content Area */
        .content-area {
            padding: 32px;
        }

        .content-header {
            margin-bottom: 32px;
        }

        .content-title {
            font-size: 28px;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 8px;
        }

        .content-subtitle {
            color: var(--text-secondary);
            font-size: 16px;
        }

        /* Cards */
        .card {
            background: var(--bg-primary);
            border-radius: var(--radius-lg);
            box-shadow: var(--shadow-md);
            border: 1px solid var(--border);
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .card:hover {
            box-shadow: var(--shadow-lg);
            transform: translateY(-2px);
        }

        .card-header {
            padding: 24px 24px 0;
            border-bottom: 1px solid var(--border);
            margin-bottom: 24px;
        }

        .card-title {
            font-size: 18px;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 8px;
        }

        .card-subtitle {
            color: var(--text-secondary);
            font-size: 14px;
        }

        .card-body {
            padding: 0 24px 24px;
        }

        /* Buttons */
        .btn {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 12px 24px;
            border: none;
            border-radius: var(--radius-md);
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            text-decoration: none;
            position: relative;
            overflow: hidden;
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s ease;
        }

        .btn:hover::before {
            left: 100%;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
            color: white;
            box-shadow: 0 4px 15px rgba(37, 99, 235, 0.3);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(37, 99, 235, 0.4);
        }

        .btn-secondary {
            background: var(--bg-tertiary);
            color: var(--text-secondary);
            border: 1px solid var(--border);
        }

        .btn-secondary:hover {
            background: var(--bg-secondary);
            color: var(--text-primary);
            transform: translateY(-1px);
        }

        .btn-success {
            background: linear-gradient(135deg, var(--success) 0%, #059669 100%);
            color: white;
        }

        .btn-warning {
            background: linear-gradient(135deg, var(--warning) 0%, #d97706 100%);
            color: white;
        }

        .btn-danger {
            background: linear-gradient(135deg, var(--error) 0%, #b91c1c 100%);
            color: white;
        }

        .btn-sm {
            padding: 8px 16px;
            font-size: 12px;
        }

        .btn-lg {
            padding: 16px 32px;
            font-size: 16px;
        }

        /* Forms */
        .form-group {
            margin-bottom: 24px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--text-primary);
            font-size: 14px;
        }

        .form-control {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid var(--border);
            border-radius: var(--radius-md);
            font-size: 14px;
            transition: all 0.2s ease;
            background: var(--bg-primary);
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }

        .form-select {
            appearance: none;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
            background-position: right 12px center;
            background-repeat: no-repeat;
            background-size: 16px;
            padding-right: 40px;
        }

        /* Tables */
        .table-container {
            background: var(--bg-primary);
            border-radius: var(--radius-lg);
            overflow: hidden;
            box-shadow: var(--shadow-md);
            border: 1px solid var(--border);
        }

        .table {
            width: 100%;
            border-collapse: collapse;
        }

        .table th {
            background: var(--bg-tertiary);
            padding: 16px;
            text-align: left;
            font-weight: 600;
            color: var(--text-primary);
            border-bottom: 1px solid var(--border);
            font-size: 14px;
        }

        .table td {
            padding: 16px;
            border-bottom: 1px solid var(--border);
            color: var(--text-secondary);
            font-size: 14px;
        }

        .table tbody tr:hover {
            background: var(--bg-tertiary);
        }

        /* Alerts */
        .alert {
            padding: 16px 20px;
            border-radius: var(--radius-md);
            margin-bottom: 24px;
            border-left: 4px solid;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .alert-success {
            background: rgba(16, 185, 129, 0.1);
            border-color: var(--success);
            color: #065f46;
        }

        .alert-error {
            background: rgba(220, 38, 38, 0.1);
            border-color: var(--error);
            color: #991b1b;
        }

        .alert-warning {
            background: rgba(245, 158, 11, 0.1);
            border-color: var(--warning);
            color: #92400e;
        }

        /* Pagination */
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 8px;
            margin-top: 32px;
        }

        .pagination a,
        .pagination span {
            padding: 8px 12px;
            border-radius: var(--radius-sm);
            text-decoration: none;
            color: var(--text-secondary);
            transition: all 0.2s ease;
        }

        .pagination a:hover {
            background: var(--bg-tertiary);
            color: var(--text-primary);
        }

        .pagination .current {
            background: var(--primary);
            color: white;
        }

        /* Search */
        .search-container {
            position: relative;
        }

        .search-input {
            padding-left: 48px;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%236b7280'%3e%3cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m21 21-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z'/%3e%3c/svg%3e");
            background-position: 16px center;
            background-repeat: no-repeat;
            background-size: 20px;
        }

        /* Action Buttons */
        .action-buttons {
            display: flex;
            gap: 8px;
        }

        .btn-icon {
            width: 36px;
            height: 36px;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: var(--radius-sm);
        }

        /* Status Badges */
        .badge {
            display: inline-flex;
            align-items: center;
            padding: 4px 12px;
            border-radius: 9999px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .badge-success {
            background: rgba(16, 185, 129, 0.1);
            color: var(--success);
        }

        .badge-warning {
            background: rgba(245, 158, 11, 0.1);
            color: var(--warning);
        }

        .badge-error {
            background: rgba(220, 38, 38, 0.1);
            color: var(--error);
        }

        .badge-info {
            background: rgba(37, 99, 235, 0.1);
            color: var(--primary);
        }

        /* Responsive */
        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
            }

            .sidebar.mobile-open {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
            }

            .content-area {
                padding: 20px;
            }

            .main-header {
                padding: 16px 20px;
            }
        }

        /* Loading States */
        .loading {
            opacity: 0.6;
            pointer-events: none;
        }

        .spinner {
            width: 20px;
            height: 20px;
            border: 2px solid transparent;
            border-top: 2px solid currentColor;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Custom Scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }

        ::-webkit-scrollbar-track {
            background: var(--primary-dark); /* MODIFICADO */
        }

        ::-webkit-scrollbar-thumb {
            background: rgba(255, 255, 255, 0.4); /* MODIFICADO */
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 255, 255, 0.6); /* MODIFICADO */
        }

        /* Toggle Switch */
        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 50px;
            height: 24px;
        }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .toggle-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: var(--border);
            transition: 0.4s;
            border-radius: 24px;
        }

        .toggle-slider:before {
            position: absolute;
            content: "";
            height: 18px;
            width: 18px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: 0.4s;
            border-radius: 50%;
        }

        input:checked + .toggle-slider {
            background-color: var(--primary);
        }

        input:focus + .toggle-slider {
            box-shadow: 0 0 1px var(--primary);
        }

        input:checked + .toggle-slider:before {
            transform: translateX(26px);
        }

        /* Form Rows */
        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }

        .form-row.triple {
            grid-template-columns: 1fr 1fr 1fr;
        }

        .form-row.single {
            grid-template-columns: 1fr;
        }

        .field-help {
            font-size: 12px;
            color: var(--text-muted);
            margin-top: 4px;
        }

        @media (max-width: 768px) {
            .form-row,
            .form-row.triple {
                grid-template-columns: 1fr;
            }
        }    
    </style>

    {% block extra_css %}
    <style>
        .sidebar-search-container {
            position: relative;
            /* margin-bottom: 12px; NOVO */
        }
        .sidebar-search-container .search-icon {
            position: absolute;
            left: 15px; /* MODIFICADO */
            top: 50%;
            transform: translateY(-50%);
            color: rgba(255, 255, 255, 0.5);
            pointer-events: none;
        }
        #sidebarSearch {
            width: 100%;
            padding: 10px 15px 10px 40px;
            border-radius: var(--radius-md);
            border: 1px solid rgba(255, 255, 255, 0.2);
            background-color: rgba(0, 0, 0, 0.2);
            color: white;
            font-size: 14px;
            transition: all 0.2s ease;
        }
        #sidebarSearch::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }
        #sidebarSearch:focus {
            outline: none;
            background-color: rgba(0, 0, 0, 0.3);
            border-color: rgba(255, 255, 255, 0.4);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3);
        }
    </style>
    {% endblock %}
</head>
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\templates\auditorias\partials\_header.html

<header class="main-header">
    <div class="header-content">
        <h1 class="page-title">{% block page_title %}{% endblock %}</h1> 
        
        <div class="header-actions">
            <div class="user-menu">
                <div class="user-avatar"> 
                    {{ user.first_name.0|default:user.username.0|upper }} 
                </div>
                <div class="user-info">
                    <div class="user-name">{{ user.get_full_name|default:user.username }}</div> 
                    <div class="user-role">Administrador</div>
                </div> 
            </div> 
        </div>
    </div>
</header>
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\templates\auditorias\partials\_messages.html

{% if messages %}
    {% for message in messages %} 
    <div class="alert alert-{{ message.tags }}">
        <i class="fas fa-{% if message.tags == 'success' %}check-circle{% elif message.tags == 'error' %}exclamation-circle{% elif message.tags == 'warning' %}exclamation-triangle{% else %}info-circle{% endif %}"></i>
        {{ message }} 
    </div>
    {% endfor %}
{% endif %} 
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\templates\auditorias\partials\_scripts.html

<script src="https://cdn.jsdelivr.net/npm/tom-select@2.3.1/dist/js/tom-select.complete.min.js"></script>
<script>

    // Função para confirmar exclusão
    function confirmDelete(url, itemName) {
        document.getElementById('confirmDeleteBtn').href = url;
        document.getElementById('deleteModal').style.display = 'flex';
    }

    function closeDeleteModal() {
        document.getElementById('deleteModal').style.display = 'none';
    }

    // Fechar modal clicando fora
    document.getElementById('deleteModal')?.addEventListener('click', function(e) {
        if (e.target === this) {
            closeDeleteModal();
        }
    });
    function toggleSidebar() {
        const sidebar = document.getElementById('sidebar');
        sidebar.classList.toggle('collapsed'); 
    }

    // Mobile menu toggle
    function toggleMobileMenu() {
        const sidebar = document.getElementById('sidebar');
        sidebar.classList.toggle('mobile-open'); 
    }

    // Auto-hide alerts after 5 seconds
    document.addEventListener('DOMContentLoaded', function() {
        const alerts = document.querySelectorAll('.alert');
        alerts.forEach(alert => {
            setTimeout(() => {
                alert.style.opacity = '0';
                alert.style.transform = 'translateY(-10px)'; 
                setTimeout(() => {
                    alert.remove();
                }, 300);
            }, 5000); 
        }); 
    });
    // Form validation helpers
    function validateForm(formId) { 
        const form = document.getElementById(formId);
        const inputs = form.querySelectorAll('input[required], select[required], textarea[required]'); 
        let isValid = true;
        inputs.forEach(input => { 
            if (!input.value.trim()) {
                input.style.borderColor = 'var(--error)';
                isValid = false;
            } else {
                input.style.borderColor = 'var(--border)'; 
            }
        });
        return isValid; 
    }

    // Loading state for buttons
    function setButtonLoading(buttonId, loading = true) {
        const button = document.getElementById(buttonId);
        if (loading) { 
            button.disabled = true;
            button.innerHTML = '<span class="spinner"></span> Carregando...'; 
        } else {
            button.disabled = false;
            button.innerHTML = button.getAttribute('data-original-text'); 
        }
    }

    // AJAX helpers
    function makeAjaxRequest(url, method = 'GET', data = null) {
        return fetch(url, {
            method: method,
            headers: {
                'Content-Type': 'application/json', 
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]')?.value || ''
            },
            body: data ? JSON.stringify(data) : null
        }).then(response => response.json());
    } 
</script>

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // AQUI ESTÁ A CORREÇÃO: Seleciona o elemento correto que tem a rolagem
    const sidebarNav = document.getElementById('sidebarNav');
    const searchInput = document.getElementById('sidebarSearch');

    // ========================================================
    // 1. LÓGICA PARA MANTER A POSIÇÃO DA ROLAGEM (CORRIGIDA)
    // ========================================================
    
    // Restaura a posição da rolagem ao carregar a página
    if (sidebarNav && localStorage.getItem('sidebarScrollPos')) { 
        sidebarNav.scrollTop = parseInt(localStorage.getItem('sidebarScrollPos'), 10);
    }

    // Salva a posição da rolagem antes de sair da página
    window.addEventListener('beforeunload', () => {
        if (sidebarNav) {
            localStorage.setItem('sidebarScrollPos', sidebarNav.scrollTop); 
        }
    });

    // ========================================================
    // 2. LÓGICA PARA O FILTRO DA BARRA LATERAL
    // ========================================================

    if (searchInput) {
        searchInput.addEventListener('input', function() {
            const filterText = this.value.toLowerCase().trim();
            const navSections = document.querySelectorAll('.sidebar-nav .nav-section');
            navSections.forEach(section => { 
                const navItems = section.querySelectorAll('.nav-item');
                let sectionHasVisibleItems = false;

                navItems.forEach(item => {
                    const itemText = item.querySelector('.nav-item-text').textContent.toLowerCase(); 
                    
                    if (itemText.includes(filterText)) {
                        item.style.display = 'flex';
                        sectionHasVisibleItems = true; 
                    } else {
                        item.style.display = 'none';
                    }
                }); 

                // Mostra ou esconde a seção inteira baseada nos itens visíveis
                if (sectionHasVisibleItems) {
                    section.style.display = 'block';
                } else { 
                    section.style.display = 'none';
                }
            });
        }); 
    }
});
</script>
{% endblock %}

<script>
// Melhorar navegação dos botões voltar
document.addEventListener('DOMContentLoaded', function() {
    // Interceptar todos os links de voltar/cancelar
    const backButtons = document.querySelectorAll('a[href*="lista"], button[onclick*="history.back"]');
    
    backButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            // Se é um link e não tem href válida, usar history.back()
            if (this.tagName === 'A' && (!this.href || this.href.includes('undefined'))) { 
                e.preventDefault();
                window.history.back();
            }
        }); 
    });
    
    // Função global para voltar
    window.goBack = function() {
        if (document.referrer && document.referrer !== window.location.href) {
            window.history.back(); 
        } else {
            // Fallback: ir para o dashboard se não houver histórico
            window.location.href = "{% url 'auditorias:dashboard' %}"; 
        } 
    };
}); 
</script>
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\templates\auditorias\partials\_sidebar.html

<nav class="sidebar" id="sidebar">
    <div class="sidebar-header">
        <div class="sidebar-header-top">
            <div class="sidebar-logo">
                <i class="fas fa-clipboard-check"></i>
            </div>
            <div class="sidebar-title">GK SKF</div>
            <button class="sidebar-toggle" onclick="toggleSidebar()">
                <i class="fas fa-bars"></i>
            </button>
        </div>
        <div class="sidebar-search-container">
            <i class="fas fa-search search-icon"></i>
            <input type="text" id="sidebarSearch" placeholder="Filtrar funcionalidades...">
        </div>
    </div>

    <div class="sidebar-nav" id="sidebarNav">

        <div class="nav-section">
            <div class="nav-section-title">Principal</div>
            <a href="{% url 'auditorias:dashboard' %}" class="nav-item {% if request.resolver_match.url_name == 'dashboard' and request.resolver_match.app_name == 'auditorias' %}active{% endif %}">
                <i class="fas fa-tachometer-alt"></i>
                <span class="nav-item-text">Dashboard</span>
            </a>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Gerenciamento de Auditorias</div>
            <a href="{% url 'auditorias:lista_auditorias' %}" class="nav-item {% if '/auditorias/auditorias/' in request.path %}active{% endif %}">
                <i class="fas fa-calendar-check"></i>
                <span class="nav-item-text">Auditorias</span>
            </a>
            <a href="{% url 'auditorias:lista_modelos_auditoria' %}" class="nav-item {% if '/auditorias/modelos-auditoria/' in request.path %}active{% endif %}">
                <i class="fas fa-file-alt"></i>
                <span class="nav-item-text">Modelos de Auditoria</span>
            </a>
            <a href="{% url 'auditorias:lista_checklists' %}" class="nav-item {% if '/auditorias/checklists/' in request.path or '/auditorias/topicos/' in request.path %}active{% endif %}">
                <i class="fas fa-list-check"></i>
                <span class="nav-item-text">Checklists</span>
            </a>
            <a href="{% url 'auditorias:lista_pilares' %}" class="nav-item {% if '/auditorias/pilares/' in request.path %}active{% endif %}">
                <i class="fas fa-columns"></i>
                <span class="nav-item-text">Pilares</span>
            </a>
            <a href="{% url 'auditorias:lista_categorias_auditoria' %}" class="nav-item {% if '/auditorias/categorias/' in request.path %}active{% endif %}">
                <i class="fas fa-tags"></i>
                <span class="nav-item-text">Categorias</span>
            </a>
            <a href="{% url 'auditorias:lista_normas' %}" class="nav-item {% if '/auditorias/normas/' in request.path %}active{% endif %}">
                <i class="fas fa-book"></i>
                <span class="nav-item-text">Normas</span>
            </a>
            <a href="{% url 'auditorias:lista_ferramentas_digitais' %}" class="nav-item {% if '/auditorias/ferramentas-digitais/' in request.path %}active{% endif %}">
                <i class="fas fa-tools"></i>
                <span class="nav-item-text">Ferramentas</span>
            </a>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Organização</div>
            <a href="{% url 'organizacao:lista_empresas' %}" class="nav-item {% if '/organizacao/empresas/' in request.path %}active{% endif %}">
                <i class="fas fa-building"></i>
                <span class="nav-item-text">Empresas</span>
            </a>
            <a href="{% url 'organizacao:lista_areas' %}" class="nav-item {% if '/organizacao/areas/' in request.path %}active{% endif %}">
                <i class="fas fa-map"></i>
                <span class="nav-item-text">Áreas</span>
            </a>
            <a href="{% url 'organizacao:lista_setores' %}" class="nav-item {% if '/organizacao/setores/' in request.path %}active{% endif %}">
                <i class="fas fa-briefcase"></i>
                <span class="nav-item-text">Setores</span>
            </a>
            <a href="{% url 'organizacao:lista_subsetores' %}" class="nav-item {% if '/organizacao/subsetores/' in request.path %}active{% endif %}">
                <i class="fas fa-sitemap"></i>
                <span class="nav-item-text">Subsetores</span>
            </a>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Ativos</div>
            <a href="{% url 'ativos:dashboard' %}" class="nav-item {% if request.resolver_match.app_name == 'ativos' and request.resolver_match.url_name == 'dashboard' %}active{% endif %}">
                <i class="fas fa-chart-pie"></i>
                <span class="nav-item-text">Dashboard</span>
            </a>
            <a href="{% url 'ativos:lista_ativos' %}" class="nav-item {% if '/ativos/ativos/' in request.path %}active{% endif %}">
                <i class="fas fa-archive"></i>
                <span class="nav-item-text">Ativos</span>
            </a>
            <a href="{% url 'ativos:lista_categorias' %}" class="nav-item {% if '/ativos/categorias/' in request.path %}active{% endif %}">
                <i class="fas fa-tags"></i>
                <span class="nav-item-text">Categorias</span>
            </a>
            <a href="{% url 'ativos:lista_marcas' %}" class="nav-item {% if '/ativos/marcas/' in request.path %}active{% endif %}">
                <i class="fas fa-building"></i>
                <span class="nav-item-text">Marcas</span>
            </a>
            <a href="{% url 'ativos:lista_modelos' %}" class="nav-item {% if '/ativos/modelos/' in request.path %}active{% endif %}">
                <i class="fas fa-cogs"></i>
                <span class="nav-item-text">Modelos</span>
            </a>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Itens</div>
            <a href="{% url 'itens:dashboard' %}" class="nav-item {% if request.resolver_match.app_name == 'itens' and request.resolver_match.url_name == 'dashboard' %}active{% endif %}">
                <i class="fas fa-tachometer-alt"></i>
                <span class="nav-item-text">Dashboard</span>
            </a>
            <a href="{% url 'itens:lista_itens' %}" class="nav-item {% if request.resolver_match.app_name == 'itens' and request.resolver_match.url_name in 'lista_itens,criar_item,editar_item' %}active{% endif %}">
                <i class="fas fa-box"></i>
                <span class="nav-item-text">Itens</span>
            </a>
            <a href="{% url 'itens:lista_categorias' %}" class="nav-item {% if '/itens/categorias/' in request.path %}active{% endif %}">
                <i class="fas fa-tags"></i>
                <span class="nav-item-text">Categorias</span>
            </a>
            <a href="{% url 'itens:lista_subcategorias' %}" class="nav-item {% if '/itens/subcategorias/' in request.path %}active{% endif %}">
                <i class="fas fa-sitemap"></i>
                <span class="nav-item-text">Subcategorias</span>
            </a>
            <a href="{% url 'itens:lista_almoxarifados' %}" class="nav-item {% if '/itens/almoxarifados/' in request.path %}active{% endif %}">
                <i class="fas fa-warehouse"></i>
                <span class="nav-item-text">Almoxarifados</span>
            </a>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Cadastros</div>
            <a href="{% url 'clientes:lista_clientes' %}" class="nav-item {% if request.resolver_match.app_name == 'clientes' %}active{% endif %}">
                <i class="fas fa-user-tie"></i>
                <span class="nav-item-text">Clientes</span>
            </a>
            <a href="{% url 'fornecedores:lista_fornecedores' %}" class="nav-item {% if request.resolver_match.app_name == 'fornecedores' %}active{% endif %}">
                <i class="fas fa-truck"></i>
                <span class="nav-item-text">Fornecedores</span>
            </a>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Sistema</div>
            <a href="{% url 'usuarios:lista_usuarios' %}" class="nav-item {% if request.resolver_match.app_name == 'usuarios' %}active{% endif %}">
                <i class="fas fa-users"></i>
                <span class="nav-item-text">Usuários</span>
            </a>
            <a href="#" class="nav-item">
                <i class="fas fa-cog"></i>
                <span class="nav-item-text">Configurações</span>
            </a>
            <form method="post" action="{% url 'logout' %}" style="display: inline;" id="logoutForm">
                {% csrf_token %}
                <a href="#" onclick="document.getElementById('logoutForm').submit(); return false;" class="nav-item">
                    <i class="fas fa-sign-out-alt"></i>
                    <span class="nav-item-text">Sair</span>
                </a>
            </form>
        </div>
    </div>
</nav>
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\templates\auditorias\pilares\form.html

{% extends 'auditorias/form_generico.html' %}

{% block form_content %}
<div class="form-row single">
    <div class="form-group required">
        <label for="nome" class="form-label">Nome do Pilar</label>
        <input type="text" 
               id="nome" 
               name="nome" 
               class="form-control" 
               value="{{ pilar.nome|default:'' }}" 
               required 
               maxlength="100"
               placeholder="Digite o nome do pilar">
        <div class="field-help">Nome único e descritivo para identificar o pilar</div>
    </div>
</div>

<div class="form-row single">
    <div class="form-group">
        <label for="descricao" class="form-label">Descrição</label>
        <textarea id="descricao" 
                  name="descricao" 
                  class="form-control" 
                  rows="4" 
                  placeholder="Descreva o propósito e objetivos deste pilar">{{ pilar.descricao|default:'' }}</textarea>
        <div class="field-help">Descrição detalhada do pilar e sua aplicação</div>
    </div>
</div>

<div class="form-row single">
    <div class="form-group">
        <label class="form-label">Status</label>
        <div style="display: flex; align-items: center; gap: 12px;">
            <label class="toggle-switch">
                <input type="checkbox" 
                       name="ativo" 
                       {% if pilar.ativo|default:True %}checked{% endif %}>
                <span class="toggle-slider"></span>
            </label>
            <span style="color: var(--text-secondary); font-size: 14px;">
                Pilar ativo no sistema
            </span>
        </div>
        <div class="field-help">Pilares inativos não aparecerão nas listagens de seleção</div>
    </div>
</div>
{% endblock %}

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\templates\auditorias\pilares\lista.html

{% extends 'auditorias/lista_generica.html' %}

{% block table_headers %}
<th style="width: 40px;">
    <input type="checkbox" id="selectAll" onchange="toggleSelectAll()">
</th>
<th>Nome</th>
<th>Descrição</th>
<th>Status</th>
<th>Data Cadastro</th>
<th style="width: 120px;">Ações</th>
{% endblock %}

{% block table_row %}
<td>
    <input type="checkbox" name="selected_items" value="{{ object.pk }}" class="item-checkbox">
</td>
<td>
    <div style="display: flex; align-items: center; gap: 12px;">
        <div style="width: 40px; height: 40px; background: linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%); border-radius: var(--radius-md); display: flex; align-items: center; justify-content: center; color: white; font-weight: 600; font-size: 14px;">
            {{ object.nome.0|upper }}
        </div>
        <div>
            <div style="font-weight: 600; color: var(--text-primary); margin-bottom: 2px;">
                {{ object.nome }}
            </div>
            <div style="font-size: 12px; color: var(--text-muted);">
                ID: {{ object.pk }}
            </div>
        </div>
    </div>
</td>
<td>
    <div style="max-width: 300px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;" title="{{ object.descricao }}">
        {{ object.descricao|default:"—" }}
    </div>
</td>
<td>
    {% if object.ativo %}
        <span class="badge badge-success">
            <i class="fas fa-check-circle"></i>
            Ativo
        </span>
    {% else %}
        <span class="badge badge-error">
            <i class="fas fa-times-circle"></i>
            Inativo
        </span>
    {% endif %}
</td>
<td>
    <div style="color: var(--text-secondary);">
        {{ object.data_cadastro|date:"d/m/Y" }}
    </div>
    <div style="font-size: 12px; color: var(--text-muted);">
        {{ object.data_cadastro|date:"H:i" }}
    </div>
</td>
<td>
    <div class="action-buttons">
        <a href="{% url 'auditorias:editar_pilar' object.pk %}" 
           class="btn btn-secondary btn-icon" 
           title="Editar pilar">
            <i class="fas fa-edit"></i>
        </a>
        <button type="button" 
                class="btn btn-danger btn-icon" 
                title="Deletar pilar"
                onclick="confirmDelete('{% url 'auditorias:deletar_pilar' object.pk %}', '{{ object.nome }}')">
            <i class="fas fa-trash"></i>
        </button>
    </div>
</td>
{% endblock %}

{% block extra_js %}
{{ block.super }}
<script>
    // Função para selecionar/deselecionar todos os itens
    function toggleSelectAll() {
        const selectAll = document.getElementById('selectAll');
        const checkboxes = document.querySelectorAll('.item-checkbox');
        
        checkboxes.forEach(checkbox => {
            checkbox.checked = selectAll.checked;
        });
        
        updateBulkActions();
    }

    // Atualizar ações em lote baseado na seleção
    function updateBulkActions() {
        const selectedItems = document.querySelectorAll('.item-checkbox:checked');
        const bulkActions = document.getElementById('bulkActions');
        
        if (selectedItems.length > 0) {
            if (!bulkActions) {
                createBulkActionsBar(selectedItems.length);
            } else {
                updateBulkActionsCount(selectedItems.length);
            }
        } else {
            removeBulkActionsBar();
        }
    }

    // Criar barra de ações em lote
    function createBulkActionsBar(count) {
        const bulkActionsHtml = `
            <div id="bulkActions" style="position: fixed; bottom: 24px; left: 50%; transform: translateX(-50%); background: var(--primary); color: white; padding: 16px 24px; border-radius: var(--radius-lg); box-shadow: var(--shadow-xl); display: flex; align-items: center; gap: 16px; z-index: 1000;">
                <span id="bulkCount">${count} item${count > 1 ? 's' : ''} selecionado${count > 1 ? 's' : ''}</span>
                <div style="display: flex; gap: 8px;">
                    <button onclick="bulkActivate()" class="btn btn-success btn-sm">
                        <i class="fas fa-check"></i>
                        Ativar
                    </button>
                    <button onclick="bulkDeactivate()" class="btn btn-warning btn-sm">
                        <i class="fas fa-pause"></i>
                        Desativar
                    </button>
                    <button onclick="bulkDelete()" class="btn btn-danger btn-sm">
                        <i class="fas fa-trash"></i>
                        Excluir
                    </button>
                    <button onclick="clearSelection()" class="btn btn-secondary btn-sm">
                        <i class="fas fa-times"></i>
                        Cancelar
                    </button>
                </div>
            </div>
        `;
        document.body.insertAdjacentHTML('beforeend', bulkActionsHtml);
    }

    // Atualizar contador de ações em lote
    function updateBulkActionsCount(count) {
        const bulkCount = document.getElementById('bulkCount');
        if (bulkCount) {
            bulkCount.textContent = `${count} item${count > 1 ? 's' : ''} selecionado${count > 1 ? 's' : ''}`;
        }
    }

    // Remover barra de ações em lote
    function removeBulkActionsBar() {
        const bulkActions = document.getElementById('bulkActions');
        if (bulkActions) {
            bulkActions.remove();
        }
    }

    // Limpar seleção
    function clearSelection() {
        document.getElementById('selectAll').checked = false;
        document.querySelectorAll('.item-checkbox').forEach(cb => cb.checked = false);
        removeBulkActionsBar();
    }

    // Ações em lote
    function bulkActivate() {
        const selectedIds = getSelectedIds();
        if (selectedIds.length > 0) {
            // Implementar ativação em lote via AJAX
            console.log('Ativar itens:', selectedIds);
            alert('Funcionalidade de ativação em lote será implementada');
        }
    }

    function bulkDeactivate() {
        const selectedIds = getSelectedIds();
        if (selectedIds.length > 0) {
            // Implementar desativação em lote via AJAX
            console.log('Desativar itens:', selectedIds);
            alert('Funcionalidade de desativação em lote será implementada');
        }
    }

    function bulkDelete() {
        const selectedIds = getSelectedIds();
        if (selectedIds.length > 0) {
            if (confirm(`Tem certeza que deseja excluir ${selectedIds.length} item${selectedIds.length > 1 ? 's' : ''}?`)) {
                // Implementar exclusão em lote via AJAX
                console.log('Excluir itens:', selectedIds);
                alert('Funcionalidade de exclusão em lote será implementada');
            }
        }
    }

    // Obter IDs selecionados
    function getSelectedIds() {
        const selectedCheckboxes = document.querySelectorAll('.item-checkbox:checked');
        return Array.from(selectedCheckboxes).map(cb => cb.value);
    }

    // Event listeners para checkboxes individuais
    document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.item-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', updateBulkActions);
        });
    });

    // Atalhos de teclado específicos
    document.addEventListener('keydown', function(e) {
        // Ctrl/Cmd + A para selecionar todos
        if ((e.ctrlKey || e.metaKey) && e.key === 'a' && !e.target.matches('input[type="text"], textarea')) {
            e.preventDefault();
            document.getElementById('selectAll').checked = true;
            toggleSelectAll();
        }
        
        // Delete para excluir selecionados
        if (e.key === 'Delete') {
            const selectedIds = getSelectedIds();
            if (selectedIds.length > 0) {
                bulkDelete();
            }
        }
    });
</script>
{% endblock %}

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\templates\usuarios\form_usuario.html

{% extends 'auditorias/form_generico.html' %}

{% block form_content %}
<!-- Informações Básicas -->
<div style="margin-bottom: 32px;">
    <h4 style="color: var(--text-primary); margin-bottom: 16px; padding-bottom: 8px; border-bottom: 1px solid var(--border);">
        <i class="fas fa-user"></i>
        Informações Básicas
    </h4>
    
    <div class="form-row">
        <div class="form-group required">
            <label for="username" class="form-label">Username</label>
            <input type="text" 
                   id="username" 
                   name="username" 
                   class="form-control" 
                   value="{{ usuario.username|default:'' }}" 
                   required 
                   maxlength="150"
                   placeholder="Digite o username">
            <div class="field-help">Username único para login no sistema</div>
        </div>
        
        <div class="form-group required">
            <label for="email" class="form-label">Email</label>
            <input type="email" 
                   id="email" 
                   name="email" 
                   class="form-control" 
                   value="{{ usuario.email|default:'' }}" 
                   required 
                   placeholder="Digite o email">
            <div class="field-help">Email único para comunicações</div>
        </div>
    </div>
    
    <div class="form-row">
        <div class="form-group">
            <label for="first_name" class="form-label">Nome</label>
            <input type="text" 
                   id="first_name" 
                   name="first_name" 
                   class="form-control" 
                   value="{{ usuario.first_name|default:'' }}" 
                   maxlength="150"
                   placeholder="Digite o primeiro nome">
        </div>
        
        <div class="form-group">
            <label for="last_name" class="form-label">Sobrenome</label>
            <input type="text" 
                   id="last_name" 
                   name="last_name" 
                   class="form-control" 
                   value="{{ usuario.last_name|default:'' }}" 
                   maxlength="150"
                   placeholder="Digite o sobrenome">
        </div>
    </div>
</div>

<!-- Senha (apenas para criação) -->
{% if not usuario %}
<div style="margin-bottom: 32px;">
    <h4 style="color: var(--text-primary); margin-bottom: 16px; padding-bottom: 8px; border-bottom: 1px solid var(--border);">
        <i class="fas fa-lock"></i>
        Senha
    </h4>
    
    <div class="form-row">
        <div class="form-group required">
            <label for="password" class="form-label">Senha</label>
            <input type="password" 
                   id="password" 
                   name="password" 
                   class="form-control" 
                   required 
                   minlength="8"
                   placeholder="Digite a senha">
            <div class="field-help">Mínimo de 8 caracteres</div>
        </div>
        
        <div class="form-group required">
            <label for="password_confirm" class="form-label">Confirmar Senha</label>
            <input type="password" 
                   id="password_confirm" 
                   name="password_confirm" 
                   class="form-control" 
                   required 
                   minlength="8"
                   placeholder="Confirme a senha">
            <div class="field-help">Digite a senha novamente</div>
        </div>
    </div>
</div>
{% endif %}

<!-- Permissões -->
<div style="margin-bottom: 32px;">
    <h4 style="color: var(--text-primary); margin-bottom: 16px; padding-bottom: 8px; border-bottom: 1px solid var(--border);">
        <i class="fas fa-shield-alt"></i>
        Permissões
    </h4>
    
    <div class="form-row triple">
        <div class="form-group">
            <label class="form-label">Status Ativo</label>
            <div style="display: flex; align-items: center; gap: 12px;">
                <label class="toggle-switch">
                    <input type="checkbox" 
                           name="is_active" 
                           {% if usuario.is_active|default:True %}checked{% endif %}>
                    <span class="toggle-slider"></span>
                </label>
                <span style="color: var(--text-secondary); font-size: 14px;">
                    Usuário pode fazer login
                </span>
            </div>
        </div>
        
        <div class="form-group">
            <label class="form-label">Staff</label>
            <div style="display: flex; align-items: center; gap: 12px;">
                <label class="toggle-switch">
                    <input type="checkbox" 
                           name="is_staff" 
                           {% if usuario.is_staff %}checked{% endif %}>
                    <span class="toggle-slider"></span>
                </label>
                <span style="color: var(--text-secondary); font-size: 14px;">
                    Acesso ao admin
                </span>
            </div>
        </div>
        
        <div class="form-group">
            <label class="form-label">Superusuário</label>
            <div style="display: flex; align-items: center; gap: 12px;">
                <label class="toggle-switch">
                    <input type="checkbox" 
                           name="is_superuser" 
                           {% if usuario.is_superuser %}checked{% endif %}>
                    <span class="toggle-slider"></span>
                </label>
                <span style="color: var(--text-secondary); font-size: 14px;">
                    Todas as permissões
                </span>
            </div>
        </div>
    </div>
</div>

<!-- Grupos -->
<div style="margin-bottom: 32px;">
    <h4 style="color: var(--text-primary); margin-bottom: 16px; padding-bottom: 8px; border-bottom: 1px solid var(--border);">
        <i class="fas fa-users"></i>
        Grupos
    </h4>
    
    <div class="form-group">
        <label class="form-label">Grupos do Usuário</label>
        <div style="max-height: 200px; overflow-y: auto; border: 1px solid var(--border); border-radius: var(--radius-md); padding: 16px;">
            {% if grupos %}
                {% for grupo in grupos %}
                <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 12px;">
                    <input type="checkbox" 
                           name="grupos" 
                           value="{{ grupo.id }}" 
                           id="grupo_{{ grupo.id }}"
                           {% if usuario and grupo in usuario.groups.all %}checked{% endif %}>
                    <label for="grupo_{{ grupo.id }}" style="margin: 0; cursor: pointer; flex: 1;">
                        <div style="font-weight: 600; color: var(--text-primary);">{{ grupo.name }}</div>
                        <div style="font-size: 12px; color: var(--text-muted);">
                            {{ grupo.permissions.count }} permissão{{ grupo.permissions.count|pluralize:"ões" }}
                        </div>
                    </label>
                </div>
                {% endfor %}
            {% else %}
                <div style="text-align: center; color: var(--text-muted); padding: 24px;">
                    <i class="fas fa-users" style="font-size: 32px; margin-bottom: 12px; opacity: 0.5;"></i>
                    <p>Nenhum grupo disponível</p>
                    <a href="{% url 'usuarios:criar_grupo' %}" class="btn btn-primary btn-sm" style="margin-top: 12px;">
                        <i class="fas fa-plus"></i>
                        Criar Grupo
                    </a>
                </div>
            {% endif %}
        </div>
        <div class="field-help">Selecione os grupos aos quais o usuário pertence</div>
    </div>
</div>
{% endblock %}

{% block help_content %}
<div style="color: var(--text-secondary); font-size: 14px; line-height: 1.6;">
    <p><strong>Sobre Usuários:</strong></p>
    <ul style="margin: 12px 0; padding-left: 20px;">
        <li><strong>Username:</strong> Identificador único para login</li>
        <li><strong>Email:</strong> Deve ser único no sistema</li>
        <li><strong>Staff:</strong> Permite acesso ao painel administrativo</li>
        <li><strong>Superusuário:</strong> Tem todas as permissões</li>
    </ul>
    
    <p><strong>Níveis de Permissão:</strong></p>
    <ul style="margin: 12px 0; padding-left: 20px;">
        <li><strong>Usuário comum:</strong> Acesso básico ao sistema</li>
        <li><strong>Staff:</strong> Acesso ao admin + permissões específicas</li>
        <li><strong>Superusuário:</strong> Acesso total ao sistema</li>
    </ul>
</div>
{% endblock %}

{% block quick_actions %}
<button type="button" onclick="previewForm()" class="btn btn-secondary btn-sm">
    <i class="fas fa-eye"></i>
    Visualizar
</button>
<button type="button" onclick="resetForm()" class="btn btn-secondary btn-sm">
    <i class="fas fa-undo"></i>
    Resetar
</button>
<button type="button" onclick="generatePassword()" class="btn btn-secondary btn-sm">
    <i class="fas fa-key"></i>
    Gerar Senha
</button>
<button type="button" onclick="validateUser()" class="btn btn-secondary btn-sm">
    <i class="fas fa-check"></i>
    Validar
</button>
{% endblock %}

{% block extra_css %}
{{ block.super }}
<style>
    .password-strength {
        margin-top: 8px;
        padding: 8px;
        border-radius: var(--radius-sm);
        font-size: 12px;
        transition: all 0.3s ease;
    }
    
    .password-strength.weak {
        background: rgba(220, 38, 38, 0.1);
        color: var(--error);
    }
    
    .password-strength.medium {
        background: rgba(245, 158, 11, 0.1);
        color: var(--warning);
    }
    
    .password-strength.strong {
        background: rgba(16, 185, 129, 0.1);
        color: var(--success);
    }
    
    .password-requirements {
        margin-top: 8px;
        font-size: 12px;
        color: var(--text-muted);
    }
    
    .password-requirements li {
        margin-bottom: 4px;
        transition: color 0.3s ease;
    }
    
    .password-requirements li.valid {
        color: var(--success);
    }
    
    .password-requirements li.invalid {
        color: var(--error);
    }
</style>
{% endblock %}

{% block extra_js %}
{{ block.super }}
<script>
    // Validação específica para usuários
    document.addEventListener('DOMContentLoaded', function() {
        const usernameField = document.getElementById('username');
        const emailField = document.getElementById('email');
        const passwordField = document.getElementById('password');
        const passwordConfirmField = document.getElementById('password_confirm');
        
        // Validação de username em tempo real
        if (usernameField) {
            let usernameTimeout;
            usernameField.addEventListener('input', function() {
                clearTimeout(usernameTimeout);
                usernameTimeout = setTimeout(() => {
                    validateUsername(this.value);
                }, 500);
            });
        }
        
        // Validação de email em tempo real
        if (emailField) {
            let emailTimeout;
            emailField.addEventListener('input', function() {
                clearTimeout(emailTimeout);
                emailTimeout = setTimeout(() => {
                    validateEmail(this.value);
                }, 500);
            });
        }
        
        // Validação de senha
        if (passwordField) {
            passwordField.addEventListener('input', function() {
                validatePassword(this.value);
                checkPasswordMatch();
            });
            
            // Adicionar indicador de força da senha
            const strengthIndicator = document.createElement('div');
            strengthIndicator.className = 'password-strength';
            passwordField.parentNode.appendChild(strengthIndicator);
            
            // Adicionar lista de requisitos
            const requirements = document.createElement('ul');
            requirements.className = 'password-requirements';
            requirements.innerHTML = `
                <li id="req-length">Pelo menos 8 caracteres</li>
                <li id="req-uppercase">Pelo menos 1 letra maiúscula</li>
                <li id="req-lowercase">Pelo menos 1 letra minúscula</li>
                <li id="req-number">Pelo menos 1 número</li>
                <li id="req-special">Pelo menos 1 caractere especial</li>
            `;
            passwordField.parentNode.appendChild(requirements);
        }
        
        // Confirmação de senha
        if (passwordConfirmField) {
            passwordConfirmField.addEventListener('input', checkPasswordMatch);
        }
    });

    // Validar username via AJAX
    function validateUsername(username) {
        if (!username || username.length < 3) return;
        
        const userId = '{{ usuario.id|default:"" }}';
        const url = `{% url 'usuarios:verificar_username' %}?username=${encodeURIComponent(username)}&user_id=${userId}`;
        
        fetch(url)
        .then(response => response.json())
        .then(data => {
            const field = document.getElementById('username');
            if (data.available) {
                showFieldSuccess(field, data.message);
            } else {
                showFieldError(field, data.message);
            }
        })
        .catch(error => {
            console.error('Erro ao validar username:', error);
        });
    }

    // Validar email via AJAX
    function validateEmail(email) {
        if (!email || !isValidEmail(email)) return;
        
        const userId = '{{ usuario.id|default:"" }}';
        const url = `{% url 'usuarios:verificar_email' %}?email=${encodeURIComponent(email)}&user_id=${userId}`;
        
        fetch(url)
        .then(response => response.json())
        .then(data => {
            const field = document.getElementById('email');
            if (data.available) {
                showFieldSuccess(field, data.message);
            } else {
                showFieldError(field, data.message);
            }
        })
        .catch(error => {
            console.error('Erro ao validar email:', error);
        });
    }

    // Validar força da senha
    function validatePassword(password) {
        const strengthIndicator = document.querySelector('.password-strength');
        const requirements = {
            length: password.length >= 8,
            uppercase: /[A-Z]/.test(password),
            lowercase: /[a-z]/.test(password),
            number: /\d/.test(password),
            special: /[!@#$%^&*(),.?":{}|<>]/.test(password)
        };
        
        // Atualizar indicadores visuais dos requisitos
        Object.keys(requirements).forEach(req => {
            const element = document.getElementById(`req-${req}`);
            if (element) {
                element.className = requirements[req] ? 'valid' : 'invalid';
            }
        });
        
        // Calcular força da senha
        const validCount = Object.values(requirements).filter(Boolean).length;
        let strength = 'weak';
        let message = 'Senha fraca';
        
        if (validCount >= 4) {
            strength = 'strong';
            message = 'Senha forte';
        } else if (validCount >= 3) {
            strength = 'medium';
            message = 'Senha média';
        }
        
        strengthIndicator.className = `password-strength ${strength}`;
        strengthIndicator.textContent = message;
    }

    // Verificar se as senhas coincidem
    function checkPasswordMatch() {
        const password = document.getElementById('password')?.value;
        const passwordConfirm = document.getElementById('password_confirm')?.value;
        
        if (passwordConfirm && password !== passwordConfirm) {
            showFieldError(document.getElementById('password_confirm'), 'As senhas não coincidem');
        } else if (passwordConfirm) {
            showFieldSuccess(document.getElementById('password_confirm'), 'Senhas coincidem');
        }
    }

    // Gerar senha aleatória
    function generatePassword() {
        const length = 12;
        const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*';
        let password = '';
        
        // Garantir pelo menos um caractere de cada tipo
        password += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[Math.floor(Math.random() * 26)];
        password += 'abcdefghijklmnopqrstuvwxyz'[Math.floor(Math.random() * 26)];
        password += '0123456789'[Math.floor(Math.random() * 10)];
        password += '!@#$%^&*'[Math.floor(Math.random() * 8)];
        
        // Preencher o resto aleatoriamente
        for (let i = password.length; i < length; i++) {
            password += charset[Math.floor(Math.random() * charset.length)];
        }
        
        // Embaralhar a senha
        password = password.split('').sort(() => Math.random() - 0.5).join('');
        
        // Definir nos campos
        const passwordField = document.getElementById('password');
        const passwordConfirmField = document.getElementById('password_confirm');
        
        if (passwordField) {
            passwordField.value = password;
            passwordField.dispatchEvent(new Event('input'));
        }
        
        if (passwordConfirmField) {
            passwordConfirmField.value = password;
            passwordConfirmField.dispatchEvent(new Event('input'));
        }
        
        // Mostrar a senha gerada
        alert(`Senha gerada: ${password}\n\nCopie esta senha e guarde em local seguro.`);
    }

    // Validar usuário completo
    function validateUser() {
        const username = document.getElementById('username').value;
        const email = document.getElementById('email').value;
        
        if (!username) {
            alert('Digite um username para validar');
            return;
        }
        
        if (!email) {
            alert('Digite um email para validar');
            return;
        }
        
        // Validar ambos
        Promise.all([
            validateUsername(username),
            validateEmail(email)
        ]).then(() => {
            alert('Validação concluída! Verifique os campos para ver os resultados.');
        });
    }

    // Validação customizada do formulário
    function validateForm() {
        const username = document.getElementById('username').value.trim();
        const email = document.getElementById('email').value.trim();
        const password = document.getElementById('password')?.value;
        const passwordConfirm = document.getElementById('password_confirm')?.value;
        let isValid = true;
        
        // Validar campos obrigatórios
        if (!username) {
            showFieldError(document.getElementById('username'), 'Username é obrigatório');
            isValid = false;
        }
        
        if (!email) {
            showFieldError(document.getElementById('email'), 'Email é obrigatório');
            isValid = false;
        } else if (!isValidEmail(email)) {
            showFieldError(document.getElementById('email'), 'Digite um email válido');
            isValid = false;
        }
        
        // Validar senha (apenas na criação)
        if (password !== undefined) {
            if (!password) {
                showFieldError(document.getElementById('password'), 'Senha é obrigatória');
                isValid = false;
            } else if (password.length < 8) {
                showFieldError(document.getElementById('password'), 'Senha deve ter pelo menos 8 caracteres');
                isValid = false;
            }
            
            if (password !== passwordConfirm) {
                showFieldError(document.getElementById('password_confirm'), 'As senhas não coincidem');
                isValid = false;
            }
        }
        
        return isValid;
    }

    // Atalhos específicos para usuários
    document.addEventListener('keydown', function(e) {
        // Ctrl/Cmd + G para gerar senha
        if ((e.ctrlKey || e.metaKey) && e.key === 'g') {
            e.preventDefault();
            generatePassword();
        }
        
        // Ctrl/Cmd + T para validar usuário
        if ((e.ctrlKey || e.metaKey) && e.key === 't') {
            e.preventDefault();
            validateUser();
        }
    });
</script>
{% endblock %}


_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\auditorias\templates\usuarios\lista_usuarios.html

{% extends 'auditorias/base.html' %}

{% block title %}Usuários - Sistema de Auditorias{% endblock %}
{% block page_title %}Usuários{% endblock %}

{% block content %}
<div class="content-header">
    <div style="display: flex; justify-content: space-between; align-items: center;">
        <div>
            <h2 class="content-title">Gerenciamento de Usuários</h2>
            <p class="content-subtitle">Gerencie usuários, permissões e grupos do sistema</p>
        </div>
        <div style="display: flex; gap: 12px;">
            <a href="{% url 'usuarios:lista_grupos' %}" class="btn btn-secondary">
                <i class="fas fa-users-cog"></i>
                Grupos
            </a>
            <a href="{% url 'usuarios:criar_usuario' %}" class="btn btn-primary">
                <i class="fas fa-user-plus"></i>
                Novo Usuário
            </a>
        </div>
    </div>
</div>

<!-- Filtros e Busca -->
<div class="card" style="margin-bottom: 24px;">
    <div class="card-body">
        <form method="get" style="display: grid; grid-template-columns: 2fr 1fr 1fr auto auto; gap: 16px; align-items: end;">
            <div class="form-group" style="margin-bottom: 0;">
                <label class="form-label">Buscar</label>
                <div class="search-container">
                    <input type="text" name="search" value="{{ search }}" placeholder="Nome, username ou email..." class="form-control search-input">
                </div>
            </div>
            
            <div class="form-group" style="margin-bottom: 0;">
                <label class="form-label">Status</label>
                <select name="status" class="form-control form-select">
                    <option value="">Todos</option>
                    <option value="ativo" {% if status == 'ativo' %}selected{% endif %}>Ativos</option>
                    <option value="inativo" {% if status == 'inativo' %}selected{% endif %}>Inativos</option>
                    <option value="staff" {% if status == 'staff' %}selected{% endif %}>Staff</option>
                </select>
            </div>
            
            <div class="form-group" style="margin-bottom: 0;">
                <label class="form-label">Grupo</label>
                <select name="grupo" class="form-control form-select">
                    <option value="">Todos</option>
                    {% for g in grupos %}
                    <option value="{{ g.id }}" {% if grupo == g.id|stringformat:"s" %}selected{% endif %}>{{ g.name }}</option>
                    {% endfor %}
                </select>
            </div>
            
            <button type="submit" class="btn btn-secondary">
                <i class="fas fa-search"></i>
                Buscar
            </button>
            
            {% if search or status or grupo %}
            <a href="?" class="btn btn-secondary">
                <i class="fas fa-times"></i>
                Limpar
            </a>
            {% endif %}
        </form>
    </div>
</div>

<!-- Tabela de Usuários -->
<div class="card">
    <div class="card-header">
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div>
                <h3 class="card-title">Lista de Usuários</h3>
                <p class="card-subtitle">
                    {% if page_obj.paginator.count %}
                        {{ page_obj.paginator.count }} usuário{{ page_obj.paginator.count|pluralize:",s" }} encontrado{{ page_obj.paginator.count|pluralize:",s" }}
                    {% else %}
                        Nenhum usuário encontrado
                    {% endif %}
                </p>
            </div>
            {% if page_obj.paginator.count > 0 %}
            <div style="display: flex; gap: 8px;">
                <button class="btn btn-secondary btn-sm" onclick="exportarUsuarios()">
                    <i class="fas fa-download"></i>
                    Exportar
                </button>
                <button class="btn btn-secondary btn-sm" onclick="imprimirTabela()">
                    <i class="fas fa-print"></i>
                    Imprimir
                </button>
            </div>
            {% endif %}
        </div>
    </div>
    
    <div class="card-body">
        {% if page_obj.object_list %}
            <div class="table-container">
                <table class="table" id="usuariosTable">
                    <thead>
                        <tr>
                            <th style="width: 40px;">
                                <input type="checkbox" id="selectAll" onchange="toggleSelectAll()">
                            </th>
                            <th>Usuário</th>
                            <th>Email</th>
                            <th>Grupos</th>
                            <th>Status</th>
                            <th>Último Login</th>
                            <th style="width: 140px;">Ações</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for usuario in page_obj %}
                        <tr>
                            <td>
                                <input type="checkbox" name="selected_users" value="{{ usuario.pk }}" class="user-checkbox">
                            </td>
                            <td>
                                <div style="display: flex; align-items: center; gap: 12px;">
                                    <div class="user-avatar" style="width: 40px; height: 40px; font-size: 14px;">
                                        {{ usuario.first_name.0|default:usuario.username.0|upper }}
                                    </div>
                                    <div>
                                        <div style="font-weight: 600; color: var(--text-primary); margin-bottom: 2px;">
                                            {{ usuario.get_full_name|default:usuario.username }}
                                            {% if usuario.is_superuser %}
                                                <span class="badge badge-error" style="font-size: 10px; margin-left: 8px;">SUPER</span>
                                            {% elif usuario.is_staff %}
                                                <span class="badge badge-warning" style="font-size: 10px; margin-left: 8px;">STAFF</span>
                                            {% endif %}
                                        </div>
                                        <div style="font-size: 12px; color: var(--text-muted);">
                                            @{{ usuario.username }}
                                        </div>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <div style="color: var(--text-secondary);">
                                    {{ usuario.email|default:"—" }}
                                </div>
                            </td>
                            <td>
                                {% if usuario.groups.all %}
                                    <div style="display: flex; flex-wrap: wrap; gap: 4px;">
                                        {% for grupo in usuario.groups.all %}
                                        <span class="badge badge-info" style="font-size: 10px;">
                                            {{ grupo.name }}
                                        </span>
                                        {% endfor %}
                                    </div>
                                {% else %}
                                    <span style="color: var(--text-muted); font-size: 12px;">Nenhum grupo</span>
                                {% endif %}
                            </td>
                            <td>
                                <div style="display: flex; align-items: center; gap: 8px;">
                                    {% if usuario.is_active %}
                                        <span class="badge badge-success">
                                            <i class="fas fa-check-circle"></i>
                                            Ativo
                                        </span>
                                    {% else %}
                                        <span class="badge badge-error">
                                            <i class="fas fa-times-circle"></i>
                                            Inativo
                                        </span>
                                    {% endif %}
                                    
                                    {% if usuario != request.user %}
                                    <button onclick="toggleUserStatus({{ usuario.pk }})" 
                                            class="btn btn-secondary btn-icon btn-sm" 
                                            title="{% if usuario.is_active %}Desativar{% else %}Ativar{% endif %} usuário"
                                            id="toggleBtn{{ usuario.pk }}">
                                        <i class="fas fa-{% if usuario.is_active %}pause{% else %}play{% endif %}"></i>
                                    </button>
                                    {% endif %}
                                </div>
                            </td>
                            <td>
                                {% if usuario.last_login %}
                                    <div style="color: var(--text-secondary); font-size: 14px;">
                                        {{ usuario.last_login|date:"d/m/Y" }}
                                    </div>
                                    <div style="font-size: 12px; color: var(--text-muted);">
                                        {{ usuario.last_login|date:"H:i" }}
                                    </div>
                                {% else %}
                                    <span style="color: var(--text-muted); font-size: 12px;">Nunca</span>
                                {% endif %}
                            </td>
                            <td>
                                <div class="action-buttons">
                                    <a href="{% url 'usuarios:editar_usuario' usuario.pk %}" 
                                       class="btn btn-secondary btn-icon" 
                                       title="Editar usuário">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <a href="{% url 'usuarios:alterar_senha_usuario' usuario.pk %}" 
                                       class="btn btn-warning btn-icon" 
                                       title="Alterar senha">
                                        <i class="fas fa-key"></i>
                                    </a>
                                    {% if usuario != request.user %}
                                    <form method="POST" action="{% url 'usuarios:deletar_usuario' usuario.pk %}" id="delete-form-{{ usuario.pk }}" style="display: none;">
                                            {% csrf_token %}
                                        </form>

                                        <button type="button"
                                                class="js-confirm-delete-user"
                                                data-form-id="delete-form-{{ usuario.pk }}"
                                                data-user-name="{{ usuario.get_full_name|default:usuario.username }}">
                                            Deletar Usuário
                                        </button>

                                        <i class="fas fa-trash"></i>
                                    </button>
                                    {% endif %}
                                </div>
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>

            <!-- Paginação -->
            {% if page_obj.has_other_pages %}
            <div class="pagination">
                {% if page_obj.has_previous %}
                    <a href="?page=1{% if search %}&search={{ search }}{% endif %}{% if status %}&status={{ status }}{% endif %}{% if grupo %}&grupo={{ grupo }}{% endif %}" title="Primeira página">
                        <i class="fas fa-angle-double-left"></i>
                    </a>
                    <a href="?page={{ page_obj.previous_page_number }}{% if search %}&search={{ search }}{% endif %}{% if status %}&status={{ status }}{% endif %}{% if grupo %}&grupo={{ grupo }}{% endif %}" title="Página anterior">
                        <i class="fas fa-angle-left"></i>
                    </a>
                {% endif %}

                {% for num in page_obj.paginator.page_range %}
                    {% if page_obj.number == num %}
                        <span class="current">{{ num }}</span>
                    {% elif num > page_obj.number|add:'-3' and num < page_obj.number|add:'3' %}
                        <a href="?page={{ num }}{% if search %}&search={{ search }}{% endif %}{% if status %}&status={{ status }}{% endif %}{% if grupo %}&grupo={{ grupo }}{% endif %}">{{ num }}</a>
                    {% endif %}
                {% endfor %}

                {% if page_obj.has_next %}
                    <a href="?page={{ page_obj.next_page_number }}{% if search %}&search={{ search }}{% endif %}{% if status %}&status={{ status }}{% endif %}{% if grupo %}&grupo={{ grupo }}{% endif %}" title="Próxima página">
                        <i class="fas fa-angle-right"></i>
                    </a>
                    <a href="?page={{ page_obj.paginator.num_pages }}{% if search %}&search={{ search }}{% endif %}{% if status %}&status={{ status }}{% endif %}{% if grupo %}&grupo={{ grupo }}{% endif %}" title="Última página">
                        <i class="fas fa-angle-double-right"></i>
                    </a>
                {% endif %}
            </div>
            {% endif %}
        {% else %}
            <!-- Estado Vazio -->
            <div style="text-align: center; padding: 64px 24px; color: var(--text-muted);">
                <i class="fas fa-users" style="font-size: 64px; margin-bottom: 24px; opacity: 0.3;"></i>
                <h3 style="margin-bottom: 12px; color: var(--text-secondary);">
                    {% if search or status or grupo %}
                        Nenhum usuário encontrado
                    {% else %}
                        Nenhum usuário cadastrado
                    {% endif %}
                </h3>
                <p style="margin-bottom: 24px;">
                    {% if search or status or grupo %}
                        Tente ajustar os filtros de busca.
                    {% else %}
                        Comece criando o primeiro usuário do sistema.
                    {% endif %}
                </p>
                {% if not search and not status and not grupo %}
                <a href="{% url 'usuarios:criar_usuario' %}" class="btn btn-primary">
                    <i class="fas fa-user-plus"></i>
                    Criar Usuário
                </a>
                {% else %}
                <a href="?" class="btn btn-secondary">
                    <i class="fas fa-times"></i>
                    Limpar Filtros
                </a>
                {% endif %}
            </div>
        {% endif %}
    </div>
</div>

<!-- Modal de Confirmação para Exclusão -->
<div id="deleteModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); z-index: 9999; align-items: center; justify-content: center;">
    <div style="background: white; border-radius: var(--radius-lg); padding: 32px; max-width: 400px; width: 90%; box-shadow: var(--shadow-xl);">
        <div style="text-align: center; margin-bottom: 24px;">
            <i class="fas fa-exclamation-triangle" style="font-size: 48px; color: var(--warning); margin-bottom: 16px;"></i>
            <h3 style="margin-bottom: 8px;">Confirmar Exclusão</h3>
            <p style="color: var(--text-secondary);">Esta ação não pode ser desfeita.</p>
        </div>
        <div style="display: flex; gap: 12px; justify-content: center;">
            <button onclick="closeDeleteModal()" class="btn btn-secondary">Cancelar</button>
            <a id="confirmDeleteBtn" href="#" class="btn btn-danger">Excluir</a>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
    // Função para confirmar exclusão
    function confirmDelete(url, userName) {
        document.getElementById('confirmDeleteBtn').href = url;
        document.getElementById('deleteModal').style.display = 'flex';
    }

    function closeDeleteModal() {
        document.getElementById('deleteModal').style.display = 'none';
    }

    // Fechar modal clicando fora
    document.getElementById('deleteModal').addEventListener('click', function(e) {
        if (e.target === this) {
            closeDeleteModal();
        }
    });

    // Função para alternar status do usuário
    function toggleUserStatus(userId) {
        const btn = document.getElementById(`toggleBtn${userId}`);
        const originalHtml = btn.innerHTML;
        
        btn.innerHTML = '<span class="spinner"></span>';
        btn.disabled = true;
        
        fetch(`{% url 'usuarios:toggle_usuario_status' 0 %}`.replace('0', userId), {
            method: 'POST',
            headers: {
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]')?.value || '',
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Recarregar a página para atualizar o status
                location.reload();
            } else {
                alert(data.message);
                btn.innerHTML = originalHtml;
                btn.disabled = false;
            }
        })
        .catch(error => {
            console.error('Erro:', error);
            alert('Erro ao alterar status do usuário');
            btn.innerHTML = originalHtml;
            btn.disabled = false;
        });
    }

    // Função para selecionar/deselecionar todos os usuários
    function toggleSelectAll() {
        const selectAll = document.getElementById('selectAll');
        const checkboxes = document.querySelectorAll('.user-checkbox');
        
        checkboxes.forEach(checkbox => {
            checkbox.checked = selectAll.checked;
        });
        
        updateBulkActions();
    }

    // Atualizar ações em lote
    function updateBulkActions() {
        const selectedUsers = document.querySelectorAll('.user-checkbox:checked');
        const bulkActions = document.getElementById('bulkActions');
        
        if (selectedUsers.length > 0) {
            if (!bulkActions) {
                createBulkActionsBar(selectedUsers.length);
            } else {
                updateBulkActionsCount(selectedUsers.length);
            }
        } else {
            removeBulkActionsBar();
        }
    }

    // Criar barra de ações em lote
    function createBulkActionsBar(count) {
        const bulkActionsHtml = `
            <div id="bulkActions" style="position: fixed; bottom: 24px; left: 50%; transform: translateX(-50%); background: var(--primary); color: white; padding: 16px 24px; border-radius: var(--radius-lg); box-shadow: var(--shadow-xl); display: flex; align-items: center; gap: 16px; z-index: 1000;">
                <span id="bulkCount">${count} usuário${count > 1 ? 's' : ''} selecionado${count > 1 ? 's' : ''}</span>
                <div style="display: flex; gap: 8px;">
                    <button onclick="bulkAction('activate')" class="btn btn-success btn-sm">
                        <i class="fas fa-check"></i>
                        Ativar
                    </button>
                    <button onclick="bulkAction('deactivate')" class="btn btn-warning btn-sm">
                        <i class="fas fa-pause"></i>
                        Desativar
                    </button>
                    <button onclick="bulkAction('delete')" class="btn btn-danger btn-sm">
                        <i class="fas fa-trash"></i>
                        Excluir
                    </button>
                    <button onclick="clearSelection()" class="btn btn-secondary btn-sm">
                        <i class="fas fa-times"></i>
                        Cancelar
                    </button>
                </div>
            </div>
        `;
        document.body.insertAdjacentHTML('beforeend', bulkActionsHtml);
    }

    // Atualizar contador de ações em lote
    function updateBulkActionsCount(count) {
        const bulkCount = document.getElementById('bulkCount');
        if (bulkCount) {
            bulkCount.textContent = `${count} usuário${count > 1 ? 's' : ''} selecionado${count > 1 ? 's' : ''}`;
        }
    }

    // Remover barra de ações em lote
    function removeBulkActionsBar() {
        const bulkActions = document.getElementById('bulkActions');
        if (bulkActions) {
            bulkActions.remove();
        }
    }

    // Limpar seleção
    function clearSelection() {
        document.getElementById('selectAll').checked = false;
        document.querySelectorAll('.user-checkbox').forEach(cb => cb.checked = false);
        removeBulkActionsBar();
    }

    // Executar ação em lote
    function bulkAction(action) {
        const selectedIds = getSelectedUserIds();
        
        if (selectedIds.length === 0) {
            alert('Nenhum usuário selecionado');
            return;
        }
        
        let confirmMessage = '';
        switch(action) {
            case 'activate':
                confirmMessage = `Ativar ${selectedIds.length} usuário(s)?`;
                break;
            case 'deactivate':
                confirmMessage = `Desativar ${selectedIds.length} usuário(s)?`;
                break;
            case 'delete':
                confirmMessage = `Excluir ${selectedIds.length} usuário(s)? Esta ação não pode ser desfeita.`;
                break;
        }
        
        if (!confirm(confirmMessage)) {
            return;
        }
        
        const formData = new FormData();
        formData.append('action', action);
        selectedIds.forEach(id => formData.append('user_ids', id));
        
        fetch('{% url "usuarios:bulk_action_usuarios" %}', {
            method: 'POST',
            headers: {
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]')?.value || ''
            },
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert(data.message);
                location.reload();
            } else {
                alert(data.message);
            }
        })
        .catch(error => {
            console.error('Erro:', error);
            alert('Erro ao executar ação em lote');
        });
    }

    // Obter IDs dos usuários selecionados
    function getSelectedUserIds() {
        const selectedCheckboxes = document.querySelectorAll('.user-checkbox:checked');
        return Array.from(selectedCheckboxes).map(cb => cb.value);
    }

    // Event listeners
    document.addEventListener('DOMContentLoaded', function() {
        // Adicionar listeners para checkboxes individuais
        document.querySelectorAll('.user-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', updateBulkActions);
        });
        
        // Busca em tempo real
        const searchInput = document.querySelector('input[name="search"]');
        let searchTimeout;
        
        if (searchInput) {
            searchInput.addEventListener('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    if (this.value.length >= 3 || this.value.length === 0) {
                        this.form.submit();
                    }
                }, 500);
            });
        }
    });

    // Função para exportar usuários
    function exportarUsuarios() {
        alert('Funcionalidade de exportação será implementada');
    }

    // Função para imprimir tabela
    function imprimirTabela() {
        const printContent = document.getElementById('usuariosTable').outerHTML;
        const printWindow = window.open('', '_blank');
        printWindow.document.write(`
            <html>
                <head>
                    <title>Lista de Usuários - Impressão</title>
                    <style>
                        body { font-family: Arial, sans-serif; }
                        table { width: 100%; border-collapse: collapse; }
                        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                        th { background-color: #f5f5f5; }
                        .btn, .user-checkbox, #selectAll { display: none; }
                    </style>
                </head>
                <body>
                    <h1>Lista de Usuários</h1>
                    ${printContent}
                </body>
            </html>
        `);
        printWindow.document.close();
        printWindow.print();
    }

    // Atalhos de teclado
    document.addEventListener('keydown', function(e) {
        // Ctrl/Cmd + A para selecionar todos
        if ((e.ctrlKey || e.metaKey) && e.key === 'a' && !e.target.matches('input[type="text"], textarea')) {
            e.preventDefault();
            document.getElementById('selectAll').checked = true;
            toggleSelectAll();
        }
        
        // Delete para excluir selecionados
        if (e.key === 'Delete') {
            const selectedIds = getSelectedUserIds();
            if (selectedIds.length > 0) {
                bulkAction('delete');
            }
        }
    });
</script>
{% endblock %}


_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\cadastros_base\admin.py

# cadastros_base/admin.py

from django.contrib import admin
from .models import UnidadeMedida, Turno, TurnoDetalheDia, DIAS_SEMANA_CHOICES
# Nao precisa importar timedelta aqui, pois ja esta no models.py

# Inline para permitir adicionar/editar detalhes diários de um turno na mesma página do Turno


class TurnoDetalheDiaInline(admin.TabularInline):
    model = TurnoDetalheDia
    extra = 0  # Não mostra formulários vazios extras por padrão
    # Permite ter 0 detalhes (se desejar um turno sem dias definidos)
    min_num = 0
    # Máximo de 7 entradas, uma para cada dia da semana
    max_num = len(DIAS_SEMANA_CHOICES)
    # Campos que serão exibidos no inline
    fields = ('dia_semana', 'hora_inicio', 'hora_fim',
              'intervalo', 'duracao_liquida_display')
    # Campos que serão apenas de leitura (não editáveis)
    readonly_fields = ('duracao_liquida_display',)

    # Opcional: Para ordenar a lista de dias na interface do admin
    # Isso pode ser feito no Meta do modelo TurnoDetalheDia (já feito com ordering = ['dia_semana'])


@admin.register(Turno)
class TurnoAdmin(admin.ModelAdmin):
    # Campos a serem exibidos na lista de Turnos
    list_display = (
        'descricao',
        'ativo',
        'tempo_disponivel_semanal_display',  # Propriedade calculada
        'dias_planejados_display',        # Propriedade calculada
        'horas_por_dia_display',         # Propriedade calculada
    )
    list_filter = ('ativo',)
    search_fields = ('descricao',)
    # Adiciona o inline para gerenciar os detalhes diários
    inlines = [TurnoDetalheDiaInline]

    # Campos que serão exibidos no formulário de edição/criação do Turno
    fields = ('descricao', 'ativo')


@admin.register(UnidadeMedida)
class UnidadeMedidaAdmin(admin.ModelAdmin):
    list_display = ('nome', 'simbolo', 'ativo', 'data_cadastro')
    list_filter = ('ativo',)
    search_fields = ('nome', 'simbolo')

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\cadastros_base\apps.py

from django.apps import AppConfig


class CadastrosBaseConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'cadastros_base'

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\cadastros_base\models.py

# cadastros_base/models.py

from django.db import models
from datetime import timedelta  # Importe timedelta para trabalhar com durações
from django.utils import timezone  # Importe timezone para cálculos de data/hora

# Opções para os dias da semana (usaremos um inteiro para armazenar no BD e exibir o nome)
DIAS_SEMANA_CHOICES = [
    (0, 'Segunda-feira'),
    (1, 'Terça-feira'),
    (2, 'Quarta-feira'),
    (3, 'Quinta-feira'),
    (4, 'Sexta-feira'),
    (5, 'Sábado'),
    (6, 'Domingo'),
]


class UnidadeMedida(models.Model):
    nome = models.CharField(max_length=50, unique=True,
                            verbose_name="Nome da Unidade")
    simbolo = models.CharField(
        max_length=10, unique=True, verbose_name="Símbolo")
    ativo = models.BooleanField(default=True, verbose_name="Ativo")
    data_cadastro = models.DateTimeField(
        auto_now_add=True, verbose_name="Data de Cadastro")
    data_atualizacao = models.DateTimeField(
        auto_now=True, verbose_name="Última Atualização")

    class Meta:
        verbose_name = "Unidade de Medida"
        verbose_name_plural = "Unidades de Medida"
        ordering = ['nome']

    def __str__(self):
        return f"{self.nome} ({self.simbolo})"


class Turno(models.Model):
    # 'nome' foi renomeado para 'descricao' para refletir a imagem
    descricao = models.CharField(
        max_length=100, unique=True, verbose_name="Descrição do Turno")
    ativo = models.BooleanField(default=True, verbose_name="Ativo")
    data_cadastro = models.DateTimeField(
        auto_now_add=True, verbose_name="Data de Cadastro")
    data_atualizacao = models.DateTimeField(
        auto_now=True, verbose_name="Última Atualização")

    class Meta:
        verbose_name = "Turno"
        verbose_name_plural = "Turnos"
        ordering = ['descricao']  # Ordena por descrição

    def __str__(self):
        return self.descricao

    # Estes campos não são armazenados diretamente no banco de dados,
    # mas são calculados dinamicamente com base nos 'TurnoDetalheDia' relacionados.

    @property
    def tempo_disponivel_semanal_display(self):
        """Calcula o tempo total disponível na semana para este turno."""
        total_duration = timedelta(0)
        # Itera sobre todos os detalhes diários relacionados a este turno
        for detail in self.turnodetalhedia_set.all():
            # Soma a duração líquida de cada dia
            total_duration += detail.duracao_liquida_calculada

        total_seconds = total_duration.total_seconds()
        hours = int(total_seconds // 3600)
        minutes = int((total_seconds % 3600) // 60)

        if hours == 0 and minutes == 0:
            return "0 Hora(s)"
        elif minutes == 0:
            return f"{hours} Hora(s)" if hours == 1 else f"{hours} Horas(s)"
        else:
            return f"{hours}h {minutes}m"

    @property
    def dias_planejados_display(self):
        """Conta quantos dias têm um detalhe de turno definido."""
        # Filtra os detalhes que possuem hora de início definida
        count = self.turnodetalhedia_set.filter(
            hora_inicio__isnull=False).count()
        return f"{count} dia(s)" if count == 1 else f"{count} dias(s)"

    @property
    def horas_por_dia_display(self):
        """Calcula a média de horas por dia com base nos detalhes."""
        total_duration = timedelta(0)
        count = 0
        # Apenas dias com horários
        for detail in self.turnodetalhedia_set.filter(hora_inicio__isnull=False):
            total_duration += detail.duracao_liquida_calculada
            count += 1

        if count > 0:
            avg_seconds = total_duration.total_seconds() / count
            hours = int(avg_seconds // 3600)
            minutes = int((avg_seconds % 3600) // 60)
            if hours == 0 and minutes == 0:
                return "0 Hora(s)"
            elif minutes == 0:
                return f"{hours} Hora(s)" if hours == 1 else f"{hours} Horas(s)"
            else:
                return f"{hours}h {minutes}m"
        return "N/A"  # Se não houver dias planejados


class TurnoDetalheDia(models.Model):
    # Chave estrangeira para o modelo Turno
    turno = models.ForeignKey(
        Turno, on_delete=models.CASCADE, verbose_name="Turno")
    # Dia da semana (0=Segunda, 6=Domingo)
    dia_semana = models.IntegerField(
        choices=DIAS_SEMANA_CHOICES, verbose_name="Dia da Semana")
    hora_inicio = models.TimeField(
        null=True, blank=True, verbose_name="Início")
    hora_fim = models.TimeField(null=True, blank=True, verbose_name="Fim")
    # Intervalo será uma duração (ex: 18 horas de intervalo, como na sua imagem)
    intervalo = models.DurationField(default=timedelta(
        minutes=0), verbose_name="Intervalo (Duração)")

    class Meta:
        verbose_name = "Detalhe do Turno por Dia"
        verbose_name_plural = "Detalhes do Turno por Dia"
        # Garante que um turno só pode ter um detalhe por dia da semana
        unique_together = ('turno', 'dia_semana')
        ordering = ['dia_semana']  # Ordena os detalhes por dia da semana

    def __str__(self):
        return f"{self.turno.descricao} - {self.get_dia_semana_display()}"

    # --- Propriedades calculadas para a duração líquida do dia ---

    @property
    def duracao_liquida_calculada(self):
        """Calcula a duração líquida do turno para o dia, considerando intervalo e virada de dia."""
        if self.hora_inicio and self.hora_fim:
            # Combina a hora com uma data fictícia para criar objetos datetime
            start_dt = timezone.datetime.combine(
                timezone.now().date(), self.hora_inicio)
            end_dt = timezone.datetime.combine(
                timezone.now().date(), self.hora_fim)

            # Se a hora de fim for menor que a hora de início, significa que o turno virou o dia
            if end_dt < start_dt:
                end_dt += timedelta(days=1)  # Adiciona um dia à data de fim

            gross_duration = end_dt - start_dt  # Duração bruta
            # Duração líquida (bruta - intervalo)
            net_duration = gross_duration - self.intervalo

            # Evita duração negativa se o intervalo for maior que a duração bruta
            if net_duration < timedelta(0):
                # Retorna zero ou levanta um erro, dependendo da regra de negócio
                return timedelta(0)

            return net_duration
        # Retorna duração zero se as horas não estiverem definidas
        return timedelta(0)

    @property
    def duracao_liquida_display(self):
        """Formata a duração líquida para exibição (ex: '1 Hora', '8h 30m')."""
        duration = self.duracao_liquida_calculada
        total_seconds = duration.total_seconds()
        hours = int(total_seconds // 3600)
        minutes = int((total_seconds % 3600) // 60)

        if hours == 0 and minutes == 0:
            return "0 Horas"
        elif minutes == 0:
            return f"{hours} Hora(s)" if hours == 1 else f"{hours} Horas"
        else:
            return f"{hours}h {minutes}m"

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\cadastros_base\tests.py

from django.test import TestCase

# Create your tests here.

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\cadastros_base\views.py

from django.shortcuts import render

# Create your views here.

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\cadastros_base\__init__.py


_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\cadastros_base\migrations\0001_initial.py

# Generated by Django 5.2.4 on 2025-07-25 16:53

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Turno',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=50, unique=True, verbose_name='Nome do Turno')),
                ('hora_inicio', models.TimeField(verbose_name='Hora de Início')),
                ('hora_fim', models.TimeField(verbose_name='Hora de Fim')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
            ],
            options={
                'verbose_name': 'Turno',
                'verbose_name_plural': 'Turnos',
                'ordering': ['hora_inicio'],
            },
        ),
        migrations.CreateModel(
            name='UnidadeMedida',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=50, unique=True, verbose_name='Nome da Unidade')),
                ('simbolo', models.CharField(max_length=10, unique=True, verbose_name='Símbolo')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
            ],
            options={
                'verbose_name': 'Unidade de Medida',
                'verbose_name_plural': 'Unidades de Medida',
                'ordering': ['nome'],
            },
        ),
    ]

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\cadastros_base\migrations\0002_alter_turno_options_remove_turno_hora_fim_and_more.py

# Generated by Django 5.2.4 on 2025-07-25 17:09

import datetime
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cadastros_base', '0001_initial'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='turno',
            options={'ordering': ['descricao'], 'verbose_name': 'Turno', 'verbose_name_plural': 'Turnos'},
        ),
        migrations.RemoveField(
            model_name='turno',
            name='hora_fim',
        ),
        migrations.RemoveField(
            model_name='turno',
            name='hora_inicio',
        ),
        migrations.RemoveField(
            model_name='turno',
            name='nome',
        ),
        migrations.AddField(
            model_name='turno',
            name='descricao',
            field=models.CharField(default='', max_length=100, unique=True, verbose_name='Descrição do Turno'),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name='TurnoDetalheDia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dia_semana', models.IntegerField(choices=[(0, 'Segunda-feira'), (1, 'Terça-feira'), (2, 'Quarta-feira'), (3, 'Quinta-feira'), (4, 'Sexta-feira'), (5, 'Sábado'), (6, 'Domingo')], verbose_name='Dia da Semana')),
                ('hora_inicio', models.TimeField(blank=True, null=True, verbose_name='Início')),
                ('hora_fim', models.TimeField(blank=True, null=True, verbose_name='Fim')),
                ('intervalo', models.DurationField(default=datetime.timedelta(0), verbose_name='Intervalo (Duração)')),
                ('turno', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cadastros_base.turno', verbose_name='Turno')),
            ],
            options={
                'verbose_name': 'Detalhe do Turno por Dia',
                'verbose_name_plural': 'Detalhes do Turno por Dia',
                'ordering': ['dia_semana'],
                'unique_together': {('turno', 'dia_semana')},
            },
        ),
    ]

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\cadastros_base\migrations\__init__.py


_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\clientes\admin.py

# clientes/admin.py

from django.contrib import admin
from .models import Cliente


@admin.register(Cliente)
class ClienteAdmin(admin.ModelAdmin):
    list_display = (
        'nome',
        'npr',
        'email',
        'usuario_responsavel',  # Exibe o usuário associado
        'ativo',
        'data_cadastro'
    )
    list_filter = ('ativo', 'usuario_responsavel')
    search_fields = ('nome', 'npr', 'email', 'usuario_responsavel__username',
                     'usuario_responsavel__first_name', 'usuario_responsavel__last_name')
    fieldsets = (
        (None, {
            'fields': ('nome', 'npr', 'email', 'logo_cliente')
        }),
        ('Associação', {
            'fields': ('usuario_responsavel',)
        }),
        ('Status', {
            'fields': ('ativo',)
        }),
    )

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\clientes\apps.py

from django.apps import AppConfig


class ClientesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'clientes'

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\clientes\models.py

# clientes/models.py

from django.db import models
# Importar o modelo de Usuário padrão do Django
from django.contrib.auth.models import User
from django.conf import settings


class Cliente(models.Model):
    nome = models.CharField(max_length=200, unique=True,
                            verbose_name="Nome do Cliente")
    # Assumi que NPR é um campo de texto/código
    npr = models.CharField(max_length=50, null=True,
                           blank=True, verbose_name="NPR")
    email = models.EmailField(
        max_length=255, unique=True, null=True, blank=True, verbose_name="E-mail")

    # Relação com o modelo de Usuário padrão do Django
    # Um cliente pode ter um usuário associado (ex: o responsável pelo cliente no sistema)
    usuario_responsavel = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,  # Se o usuário for apagado, o campo no cliente fica nulo
        null=True, blank=True,
        verbose_name="Usuário Responsável",
        related_name='clientes_responsavel'  # Nome para a relação reversa
    )

    # Campo para o logo do cliente
    logo_cliente = models.ImageField(
        upload_to='clientes_logos/', null=True, blank=True, verbose_name="Logo do Cliente")

    # Campos de controle
    ativo = models.BooleanField(default=True, verbose_name="Ativo")
    data_cadastro = models.DateTimeField(
        auto_now_add=True, verbose_name="Data de Cadastro")
    data_atualizacao = models.DateTimeField(
        auto_now=True, verbose_name="Última Atualização")

    class Meta:
        verbose_name = "Cliente"
        verbose_name_plural = "Clientes"
        ordering = ['nome']

    def __str__(self):
        return self.nome

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\clientes\tests.py

from django.test import TestCase

# Create your tests here.

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\clientes\urls.py

# clientes/urls.py

from django.urls import path
from . import views

app_name = 'clientes'

urlpatterns = [
    # URLs para Clientes
    path('', views.lista_clientes, name='lista_clientes'),
    path('criar/', views.criar_cliente, name='criar_cliente'),
    path('<int:pk>/editar/', views.editar_cliente, name='editar_cliente'),
    path('<int:pk>/deletar/', views.deletar_cliente, name='deletar_cliente'),
]

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\clientes\views.py

# clientes/views.py

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.core.paginator import Paginator
from django.db.models import Q
from .models import Cliente
from usuarios.models import Usuario

@login_required
def lista_clientes(request):
    """Lista todos os clientes com busca e paginação."""
    search = request.GET.get('search', '')
    clientes = Cliente.objects.select_related('usuario_responsavel').order_by('nome')

    if search:
        clientes = clientes.filter(
            Q(nome__icontains=search) |
            Q(npr__icontains=search) |
            Q(email__icontains=search) |
            Q(usuario_responsavel__username__icontains=search)
        )

    paginator = Paginator(clientes, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'page_obj': page_obj,
        'search': search,
        'title': 'Clientes',
        'singular': 'Cliente',
        'button_text': 'Novo Cliente',
        'create_url': 'clientes:criar_cliente',
        'artigo': 'o',
        'empty_message': 'Nenhum cliente cadastrado.',
        'empty_subtitle': 'Comece criando o primeiro cliente.'
    }
    return render(request, 'clientes/lista.html', context)

@login_required
def criar_cliente(request):
    """Cria um novo cliente."""
    if request.method == 'POST':
        nome = request.POST.get('nome')
        if not nome:
            messages.error(request, 'O nome do cliente é obrigatório.')
        else:
            try:
                cliente = Cliente(
                    nome=nome,
                    npr=request.POST.get('npr'),
                    email=request.POST.get('email'),
                    ativo=request.POST.get('ativo') == 'on',
                    usuario_responsavel_id=request.POST.get('usuario_responsavel') or None
                )
                if request.FILES.get('logo_cliente'):
                    cliente.logo_cliente = request.FILES['logo_cliente']
                
                cliente.save()
                messages.success(request, 'Cliente criado com sucesso!')
                return redirect('clientes:lista_clientes')
            except Exception as e:
                messages.error(request, f'Erro ao criar cliente: {e}')

    context = {
        'title': 'Criar Cliente',
        'back_url': 'clientes:lista_clientes',
        'usuarios': Usuario.objects.filter(is_active=True)
    }
    return render(request, 'clientes/form.html', context)

@login_required
def editar_cliente(request, pk):
    """Edita um cliente existente."""
    cliente = get_object_or_404(Cliente, pk=pk)
    if request.method == 'POST':
        nome = request.POST.get('nome')
        if not nome:
            messages.error(request, 'O nome do cliente é obrigatório.')
        else:
            try:
                cliente.nome = nome
                cliente.npr = request.POST.get('npr')
                cliente.email = request.POST.get('email')
                cliente.ativo = request.POST.get('ativo') == 'on'
                cliente.usuario_responsavel_id = request.POST.get('usuario_responsavel') or None
                
                if request.FILES.get('logo_cliente'):
                    cliente.logo_cliente = request.FILES['logo_cliente']

                cliente.save()
                messages.success(request, 'Cliente atualizado com sucesso!')
                return redirect('clientes:lista_clientes')
            except Exception as e:
                messages.error(request, f'Erro ao atualizar cliente: {e}')

    context = {
        'object': cliente,
        'title': 'Editar Cliente',
        'back_url': 'clientes:lista_clientes',
        'usuarios': Usuario.objects.filter(is_active=True)
    }
    return render(request, 'clientes/form.html', context)

@login_required
def deletar_cliente(request, pk):
    """Deleta um cliente."""
    cliente = get_object_or_404(Cliente, pk=pk)
    if request.method == 'POST':
        try:
            cliente.delete()
            messages.success(request, 'Cliente deletado com sucesso!')
        except Exception as e:
            messages.error(request, f'Erro ao deletar cliente: {e}')
        return redirect('clientes:lista_clientes')

    context = {
        'object': cliente,
        'title': 'Cliente'
    }
    return render(request, 'auditorias/deletar_generico.html', context)

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\clientes\__init__.py


_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\clientes\migrations\0001_initial.py

# Generated by Django 5.2.4 on 2025-07-28 13:05

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Cliente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=200, unique=True, verbose_name='Nome do Cliente')),
                ('npr', models.CharField(blank=True, max_length=50, null=True, verbose_name='NPR')),
                ('email', models.EmailField(blank=True, max_length=255, null=True, unique=True, verbose_name='E-mail')),
                ('logo_cliente', models.ImageField(blank=True, null=True, upload_to='clientes_logos/', verbose_name='Logo do Cliente')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('usuario_responsavel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clientes_responsavel', to=settings.AUTH_USER_MODEL, verbose_name='Usuário Responsável')),
            ],
            options={
                'verbose_name': 'Cliente',
                'verbose_name_plural': 'Clientes',
                'ordering': ['nome'],
            },
        ),
    ]

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\clientes\migrations\__init__.py


_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\clientes\templates\clientes\form.html

{% extends 'auditorias/form_generico.html' %}

{% block form_content %}
<div class="form-row">
    <div class="form-group required">
        <label for="nome" class="form-label">Nome do Cliente</label>
        <input type="text" id="nome" name="nome" class="form-control" value="{{ object.nome|default:'' }}" required maxlength="200">
    </div>
    <div class="form-group">
        <label for="npr" class="form-label">NPR</label>
        <input type="text" id="npr" name="npr" class="form-control" value="{{ object.npr|default:'' }}" maxlength="50">
    </div>
</div>
<div class="form-row">
    <div class="form-group">
        <label for="email" class="form-label">Email</label>
        <input type="email" id="email" name="email" class="form-control" value="{{ object.email|default:'' }}" maxlength="255">
    </div>
    <div class="form-group">
        <label for="usuario_responsavel" class="form-label">Responsável</label>
        <select id="usuario_responsavel" name="usuario_responsavel" class="form-control form-select">
            <option value="">Selecione...</option>
            {% for usuario in usuarios %}
            <option value="{{ usuario.pk }}" {% if object.usuario_responsavel.pk == usuario.pk %}selected{% endif %}>{{ usuario.get_full_name|default:usuario.username }}</option>
            {% endfor %}
        </select>
    </div>
</div>
<div class="form-group">
    <label for="logo_cliente" class="form-label">Logo do Cliente</label>
    {% if object.logo_cliente %}
    <p>Logo atual: <a href="{{ object.logo_cliente.url }}" target="_blank">{{ object.logo_cliente.name }}</a></p>
    {% endif %}
    <input type="file" id="logo_cliente" name="logo_cliente" class="form-control" accept="image/*">
</div>
<div class="form-group">
    <label class="form-label">Status</label>
    <div style="display: flex; align-items: center; gap: 12px;">
        <label class="toggle-switch">
            <input type="checkbox" name="ativo" {% if object.ativo|default:True %}checked{% endif %}>
            <span class="toggle-slider"></span>
        </label>
        <span style="color: var(--text-secondary); font-size: 14px;">Cliente ativo no sistema</span>
    </div>
</div>
{% endblock %}

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\clientes\templates\clientes\lista.html

{% extends 'auditorias/lista_generica.html' %}

{% block table_headers %}
    <th>Nome do Cliente</th>
    <th>NPR</th>
    <th>Email</th>
    <th>Responsável</th>
    <th>Status</th>
    <th style="width: 120px;">Ações</th>
{% endblock %}

{% block table_row %}
    <td>
        <div style="display: flex; align-items: center; gap: 12px;">
            {% if object.logo_cliente %}
                <img src="{{ object.logo_cliente.url }}" alt="Logo" style="width: 40px; height: 40px; border-radius: var(--radius-sm); object-fit: contain;">
            {% else %}
                <div class="user-avatar" style="width: 40px; height: 40px; font-size: 14px; border-radius: var(--radius-sm);">
                    {{ object.nome.0|upper }}
                </div>
            {% endif %}
            <div style="font-weight: 600; color: var(--text-primary);">
                {{ object.nome }}
            </div>
        </div>
    </td>
    <td>{{ object.npr|default:"—" }}</td>
    <td>{{ object.email|default:"—" }}</td>
    <td>{{ object.usuario_responsavel.get_full_name|default:object.usuario_responsavel.username|default:"—" }}</td>
    <td>
        {% if object.ativo %}
            <span class="badge badge-success"><i class="fas fa-check-circle"></i> Ativo</span>
        {% else %}
            <span class="badge badge-error"><i class="fas fa-times-circle"></i> Inativo</span>
        {% endif %}
    </td>
    <td>
        <div class="action-buttons">
            <a href="{% url 'clientes:editar_cliente' object.pk %}" class="btn btn-secondary btn-icon" title="Editar Cliente">
                <i class="fas fa-edit"></i>
            </a>
            <button type="button" class="btn btn-danger btn-icon" title="Deletar Cliente"
                    onclick="confirmDelete('{% url 'clientes:deletar_cliente' object.pk %}', '{{ object.nome }}')">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    </td>
{% endblock %}

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\core\asgi.py

"""
ASGI config for core project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')

application = get_asgi_application()

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\core\settings.py

from django.contrib.messages import constants as messages
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-your-secret-key-here-change-in-production'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*', '100.000.000.000']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',

    # Apps locais (adicione todos os seus apps aqui)
    'auditorias',
    'usuarios',
    'itens',
    'organizacao',          # <-- ADICIONADO (Causa principal do erro)
    'cadastros_base',       # <-- ADICIONADO
    'ativos',               # <-- ADICIONADO
    'clientes',             # <-- ADICIONADO
    'fornecedores',         # <-- ADICIONADO
    'planos_de_acao',       # <-- ADICIONADO

    # Apps de terceiros (se necessário)
    'rest_framework',
    'rest_framework.authtoken',
    'drf_spectacular',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
            BASE_DIR / 'auditorias' / 'templates',  # Mantemos para usar o base.html
            BASE_DIR / 'usuarios' / 'templates',
            BASE_DIR / 'itens' / 'templates',  # <-- ADICIONADO
            BASE_DIR / 'organizacao' / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Configuração para PostgreSQL (comentado)
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'auditorias_db',
#         'USER': 'postgres',
#         'PASSWORD': 'password',
#         'HOST': 'localhost',
#         'PORT': '5432',
#     }
# }

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'pt-br'
TIME_ZONE = 'America/Sao_Paulo'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configurações de autenticação
AUTH_USER_MODEL = 'usuarios.Usuario'
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/auditorias/dashboard'
LOGOUT_REDIRECT_URL = '/login/'

# Configurações de sessão
SESSION_COOKIE_AGE = 86400  # 24 horas
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_SAVE_EVERY_REQUEST = True

# Configurações de segurança
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# Configurações de email (para produção)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # Para desenvolvimento
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # Para produção
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'seu-email@gmail.com'
# EMAIL_HOST_PASSWORD = 'sua-senha-de-app'

# Configurações de logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'auditorias': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'usuarios': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# Configurações específicas do sistema de auditorias
AUDITORIAS_CONFIG = {
    'ITEMS_PER_PAGE': 10,
    'MAX_UPLOAD_SIZE': 10 * 1024 * 1024,  # 10MB
    'ALLOWED_FILE_TYPES': ['pdf', 'doc', 'docx', 'xls', 'xlsx', 'jpg', 'jpeg', 'png'],
    'AUTO_BACKUP_ENABLED': True,
    'BACKUP_RETENTION_DAYS': 30,
}

# Configurações de cache (para produção)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

# Configurações para produção
if not DEBUG:
    # Configurações de segurança para produção
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

    # Configurações de cache para produção
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.redis.RedisCache',
            'LOCATION': 'redis://127.0.0.1:6379/1',
        }
    }

    # Configurações de banco para produção
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('DB_NAME', 'auditorias_db'),
            'USER': os.environ.get('DB_USER', 'postgres'),
            'PASSWORD': os.environ.get('DB_PASSWORD', ''),
            'HOST': os.environ.get('DB_HOST', 'localhost'),
            'PORT': os.environ.get('DB_PORT', '5432'),
        }
    }

# Configurações de mensagens
MESSAGE_TAGS = {
    messages.DEBUG: 'debug',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'error',
}

# Configurações de paginação
PAGINATE_BY = 10

# Configurações de formato de data
DATE_FORMAT = 'd/m/Y'
DATETIME_FORMAT = 'd/m/Y H:i'
SHORT_DATE_FORMAT = 'd/m/Y'
SHORT_DATETIME_FORMAT = 'd/m/Y H:i'

# Configurações de fuso horário
USE_L10N = True
USE_TZ = True

# Configurações de arquivos estáticos para produção
if not DEBUG:
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'

# Configurações de CORS (se usando API)
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000",
#     "http://127.0.0.1:3000",
# ]
# CORS_ALLOW_CREDENTIALS = True

# Configurações do Django REST Framework (se usando)
# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': [
#         'rest_framework.authentication.SessionAuthentication',
#         'rest_framework.authentication.TokenAuthentication',
#     ],
#     'DEFAULT_PERMISSION_CLASSES': [
#         'rest_framework.permissions.IsAuthenticated',
#     ],
#     'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
#     'PAGE_SIZE': 20,
# }

# teste wanderley add informações
# teste add informações 2
# teste de arquivo adicionado algos

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'API do Sistema de Gestão de Auditorias',
    'DESCRIPTION': 'Documentação detalhada da API para o sistema de auditorias, '
                   'utilizada pelo aplicativo web e mobile.',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
}

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\core\urls.py

# core/urls.py
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static
from django.shortcuts import redirect
from django.contrib.auth import views as auth_views
from drf_spectacular.views import SpectacularAPIView, SpectacularRedocView, SpectacularSwaggerView

# Importe as views da API diretamente
from usuarios.views import CustomAuthToken, MeuPerfilAPIView, AlterarMinhaSenhaAPIView
from auditorias.views import (
    AuditoriasPendentesAPIView,
    AuditoriasConcluidasAPIView,
    AuditoriaInstanciaDetailAPIView,
    SubmeterAuditoriaAPIView
)


def redirect_to_auditorias(request):
    return redirect('auditorias:dashboard')


urlpatterns = [
    path('admin/', admin.site.urls),
    path('', redirect_to_auditorias, name='home'),
    path('login/', auth_views.LoginView.as_view(template_name='registration/login.html'), name='login'),
    path('logout/', auth_views.LogoutView.as_view(
        http_method_names=['get', 'post']), name='logout'),
    path('auditorias/', include('auditorias.urls')),
    path('usuarios/', include('usuarios.urls')),
    path('itens/', include('itens.urls')),
    path('ativos/', include('ativos.urls')),
    path('organizacao/', include('organizacao.urls')),
    # <-- ADICIONE ESTA LINHA
    path('clientes/', include('clientes.urls')),
    # <-- ADICIONE ESTA LINHA
    path('fornecedores/', include('fornecedores.urls')),

    # URLs DA API E DOCUMENTAÇÃO
    # ============================================================================
    path('api/schema/', SpectacularAPIView.as_view(), name='schema'),
    # Interface Swagger UI:
    path('api/schema/swagger-ui/',
         SpectacularSwaggerView.as_view(url_name='schema'), name='swagger-ui'),
    # Interface Redoc:
    path('api/schema/redoc/',
         SpectacularRedocView.as_view(url_name='schema'), name='redoc'),
]

# URLs da API centralizadas
api_urlpatterns = [
    # Autenticação e Usuário
    path('login/', CustomAuthToken.as_view(), name='api_login'),
    path('meu-perfil/', MeuPerfilAPIView.as_view(), name='api_meu_perfil'),
    path('alterar-minha-senha/', AlterarMinhaSenhaAPIView.as_view(),
         name='api_alterar_minha_senha'),

    # Auditorias
    path('auditorias/pendentes/', AuditoriasPendentesAPIView.as_view(),
         name='api_auditorias_pendentes'),
    path('auditorias/concluidas/', AuditoriasConcluidasAPIView.as_view(),
         name='api_auditorias_concluidas'),
    path('instancias/<int:pk>/', AuditoriaInstanciaDetailAPIView.as_view(),
         name='api_instancia_detail'),
    path('instancias/<int:pk>/submeter/',
         SubmeterAuditoriaAPIView.as_view(), name='api_instancia_submeter'),
]


# URLs da Documentação
schema_urlpatterns = [
    path('schema/', SpectacularAPIView.as_view(), name='schema'),
    path('schema/swagger-ui/',
         SpectacularSwaggerView.as_view(url_name='schema'), name='swagger-ui'),
]

# Adiciona os blocos de URLs da API e Documentação ao urlpatterns principal
urlpatterns += [
    path('api/', include(api_urlpatterns)),
    path('api/', include(schema_urlpatterns)),
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL,
                          document_root=settings.MEDIA_ROOT)
    urlpatterns += static(settings.STATIC_URL,
                          document_root=settings.STATIC_ROOT)

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\core\views.py

# core/views.py

from django.shortcuts import render
from django.contrib.auth.decorators import login_required
from django.utils import timezone
from auditorias.models import Auditoria, AuditoriaInstancia


@login_required
def home(request):
    # Contagem de auditorias agendadas
    total_auditorias = Auditoria.objects.count()
    auditorias_agendadas = Auditoria.objects.filter(
        data_inicio__gt=timezone.now()).count()
    auditorias_executadas = AuditoriaInstancia.objects.filter(
        executada=True).count()

    context = {
        'total_auditorias': total_auditorias,
        'auditorias_agendadas': auditorias_agendadas,
        'auditorias_executadas': auditorias_executadas,
    }
    return render(request, 'home.html', context)


def lista_auditorias(request):
    todas_auditorias = Auditoria.objects.all()
    context = {
        'todas_auditorias': todas_auditorias,
    }
    return render(request, 'lista_auditorias.html', context)

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\core\wsgi.py

"""
WSGI config for core project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')

application = get_wsgi_application()

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\core\__init__.py


_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\fornecedores\admin.py

# fornecedores/admin.py

from django.contrib import admin
from .models import Fornecedor


@admin.register(Fornecedor)
class FornecedorAdmin(admin.ModelAdmin):
    list_display = (
        'nome',
        'npr',
        'usuario_responsavel',  # Exibe o usuário associado
        'ativo',
        'data_cadastro'
    )
    list_filter = ('ativo', 'usuario_responsavel')
    search_fields = ('nome', 'npr', 'usuario_responsavel__username',
                     'usuario_responsavel__first_name', 'usuario_responsavel__last_name')
    fieldsets = (
        (None, {
            'fields': ('nome', 'npr',)
        }),
        ('Associação', {
            'fields': ('usuario_responsavel',)
        }),
        ('Status', {
            'fields': ('ativo',)
        }),
    )

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\fornecedores\apps.py

from django.apps import AppConfig


class FornecedoresConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'fornecedores'

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\fornecedores\models.py

# fornecedores/models.py

from django.db import models
# Importar o modelo de Usuário padrão do Django
from django.contrib.auth.models import User
from django.conf import settings


class Fornecedor(models.Model):
    nome = models.CharField(max_length=100, unique=True,
                            verbose_name="Nome do Fornecedor")
    # Assumi que NPR é um campo de texto/código
    npr = models.CharField(max_length=50, null=True,
                           blank=True, verbose_name="NPR")

    # Relação com o modelo de Usuário padrão do Django
    # Um fornecedor pode ter um usuário associado (ex: o responsável pelo contato com o fornecedor no sistema)
    usuario_responsavel = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,  # Se o usuário for apagado, o campo no fornecedor fica nulo
        null=True, blank=True,
        verbose_name="Usuário Responsável",
        related_name='fornecedores_responsavel'  # Nome único para a relação reversa
    )

    # Campos de controle
    ativo = models.BooleanField(default=True, verbose_name="Ativo")
    data_cadastro = models.DateTimeField(
        auto_now_add=True, verbose_name="Data de Cadastro")
    data_atualizacao = models.DateTimeField(
        auto_now=True, verbose_name="Última Atualização")

    class Meta:
        verbose_name = "Fornecedor"
        verbose_name_plural = "Fornecedores"
        ordering = ['nome']

    def __str__(self):
        return self.nome

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\fornecedores\tests.py

from django.test import TestCase

# Create your tests here.

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\fornecedores\urls.py

# fornecedores/urls.py

from django.urls import path
from . import views

app_name = 'fornecedores'

urlpatterns = [
    # URLs para Fornecedores
    path('', views.lista_fornecedores, name='lista_fornecedores'),
    path('criar/', views.criar_fornecedor, name='criar_fornecedor'),
    path('<int:pk>/editar/', views.editar_fornecedor, name='editar_fornecedor'),
    path('<int:pk>/deletar/', views.deletar_fornecedor, name='deletar_fornecedor'),
]

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\fornecedores\views.py

# fornecedores/views.py

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.core.paginator import Paginator
from django.db.models import Q
from .models import Fornecedor
from usuarios.models import Usuario

@login_required
def lista_fornecedores(request):
    """Lista todos os fornecedores com busca e paginação."""
    search = request.GET.get('search', '')
    fornecedores = Fornecedor.objects.select_related('usuario_responsavel').order_by('nome')

    if search:
        fornecedores = fornecedores.filter(
            Q(nome__icontains=search) |
            Q(npr__icontains=search) |
            Q(usuario_responsavel__username__icontains=search)
        )

    paginator = Paginator(fornecedores, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'page_obj': page_obj,
        'search': search,
        'title': 'Fornecedores',
        'singular': 'Fornecedor',
        'button_text': 'Novo Fornecedor',
        'create_url': 'fornecedores:criar_fornecedor',
        'artigo': 'o',
        'empty_message': 'Nenhum fornecedor cadastrado.',
        'empty_subtitle': 'Comece criando o primeiro fornecedor.'
    }
    return render(request, 'fornecedores/lista.html', context)

@login_required
def criar_fornecedor(request):
    """Cria um novo fornecedor."""
    if request.method == 'POST':
        nome = request.POST.get('nome')
        if not nome:
            messages.error(request, 'O nome do fornecedor é obrigatório.')
        else:
            try:
                Fornecedor.objects.create(
                    nome=nome,
                    npr=request.POST.get('npr'),
                    ativo=request.POST.get('ativo') == 'on',
                    usuario_responsavel_id=request.POST.get('usuario_responsavel') or None
                )
                messages.success(request, 'Fornecedor criado com sucesso!')
                return redirect('fornecedores:lista_fornecedores')
            except Exception as e:
                messages.error(request, f'Erro ao criar fornecedor: {e}')

    context = {
        'title': 'Criar Fornecedor',
        'back_url': 'fornecedores:lista_fornecedores',
        'usuarios': Usuario.objects.filter(is_active=True)
    }
    return render(request, 'fornecedores/form.html', context)

@login_required
def editar_fornecedor(request, pk):
    """Edita um fornecedor existente."""
    fornecedor = get_object_or_404(Fornecedor, pk=pk)
    if request.method == 'POST':
        nome = request.POST.get('nome')
        if not nome:
            messages.error(request, 'O nome do fornecedor é obrigatório.')
        else:
            try:
                fornecedor.nome = nome
                fornecedor.npr = request.POST.get('npr')
                fornecedor.ativo = request.POST.get('ativo') == 'on'
                fornecedor.usuario_responsavel_id = request.POST.get('usuario_responsavel') or None
                fornecedor.save()
                messages.success(request, 'Fornecedor atualizado com sucesso!')
                return redirect('fornecedores:lista_fornecedores')
            except Exception as e:
                messages.error(request, f'Erro ao atualizar fornecedor: {e}')

    context = {
        'object': fornecedor,
        'title': 'Editar Fornecedor',
        'back_url': 'fornecedores:lista_fornecedores',
        'usuarios': Usuario.objects.filter(is_active=True)
    }
    return render(request, 'fornecedores/form.html', context)

@login_required
def deletar_fornecedor(request, pk):
    """Deleta um fornecedor."""
    fornecedor = get_object_or_404(Fornecedor, pk=pk)
    if request.method == 'POST':
        try:
            fornecedor.delete()
            messages.success(request, 'Fornecedor deletado com sucesso!')
        except Exception as e:
            messages.error(request, f'Erro ao deletar fornecedor: {e}')
        return redirect('fornecedores:lista_fornecedores')

    context = {
        'object': fornecedor,
        'title': 'Fornecedor'
    }
    return render(request, 'auditorias/deletar_generico.html', context)

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\fornecedores\__init__.py


_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\fornecedores\migrations\0001_initial.py

# Generated by Django 5.2.4 on 2025-09-02 15:03

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Fornecedor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, unique=True, verbose_name='Nome do Fornecedor')),
                ('npr', models.CharField(blank=True, max_length=50, null=True, verbose_name='NPR')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
            ],
            options={
                'verbose_name': 'Fornecedor',
                'verbose_name_plural': 'Fornecedores',
                'ordering': ['nome'],
            },
        ),
    ]

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\fornecedores\migrations\0002_fornecedor_usuario_responsavel.py

# Generated by Django 5.2.4 on 2025-09-02 15:05

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('fornecedores', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='fornecedor',
            name='usuario_responsavel',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fornecedores_responsavel', to=settings.AUTH_USER_MODEL, verbose_name='Usuário Responsável'),
        ),
    ]

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\fornecedores\migrations\__init__.py


_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\fornecedores\templates\fornecedores\form.html

{% extends 'auditorias/form_generico.html' %}

{% block form_content %}
<div class="form-row">
    <div class="form-group required">
        <label for="nome" class="form-label">Nome do Fornecedor</label>
        <input type="text" id="nome" name="nome" class="form-control" value="{{ object.nome|default:'' }}" required maxlength="100">
    </div>
    <div class="form-group">
        <label for="npr" class="form-label">NPR</label>
        <input type="text" id="npr" name="npr" class="form-control" value="{{ object.npr|default:'' }}" maxlength="50">
    </div>
</div>
<div class="form-row">
    <div class="form-group">
        <label for="usuario_responsavel" class="form-label">Responsável</label>
        <select id="usuario_responsavel" name="usuario_responsavel" class="form-control form-select">
            <option value="">Selecione...</option>
            {% for usuario in usuarios %}
            <option value="{{ usuario.pk }}" {% if object.usuario_responsavel.pk == usuario.pk %}selected{% endif %}>{{ usuario.get_full_name|default:usuario.username }}</option>
            {% endfor %}
        </select>
    </div>
</div>
<div class="form-group">
    <label class="form-label">Status</label>
    <div style="display: flex; align-items: center; gap: 12px;">
        <label class="toggle-switch">
            <input type="checkbox" name="ativo" {% if object.ativo|default:True %}checked{% endif %}>
            <span class="toggle-slider"></span>
        </label>
        <span style="color: var(--text-secondary); font-size: 14px;">Fornecedor ativo no sistema</span>
    </div>
</div>
{% endblock %}

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\fornecedores\templates\fornecedores\lista.html

{% extends 'auditorias/lista_generica.html' %}

{% block table_headers %}
    <th>Nome do Fornecedor</th>
    <th>NPR</th>
    <th>Responsável</th>
    <th>Status</th>
    <th style="width: 120px;">Ações</th>
{% endblock %}

{% block table_row %}
    <td>
        <div style="font-weight: 600; color: var(--text-primary);">
            {{ object.nome }}
        </div>
    </td>
    <td>{{ object.npr|default:"—" }}</td>
    <td>{{ object.usuario_responsavel.get_full_name|default:object.usuario_responsavel.username|default:"—" }}</td>
    <td>
        {% if object.ativo %}
            <span class="badge badge-success"><i class="fas fa-check-circle"></i> Ativo</span>
        {% else %}
            <span class="badge badge-error"><i class="fas fa-times-circle"></i> Inativo</span>
        {% endif %}
    </td>
    <td>
        <div class="action-buttons">
            <a href="{% url 'fornecedores:editar_fornecedor' object.pk %}" class="btn btn-secondary btn-icon" title="Editar Fornecedor">
                <i class="fas fa-edit"></i>
            </a>
            <button type="button" class="btn btn-danger btn-icon" title="Deletar Fornecedor"
                    onclick="confirmDelete('{% url 'fornecedores:deletar_fornecedor' object.pk %}', '{{ object.nome }}')">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    </td>
{% endblock %}

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\itens\admin.py

# itens/admin.py

from django.contrib import admin
from .models import CategoriaItem, SubcategoriaItem, Almoxarifado, Item


@admin.register(CategoriaItem)
class CategoriaItemAdmin(admin.ModelAdmin):
    list_display = ('descricao', 'ativo', 'data_cadastro')
    list_filter = ('ativo',)
    search_fields = ('descricao',)


@admin.register(SubcategoriaItem)
class SubcategoriaItemAdmin(admin.ModelAdmin):
    list_display = ('descricao', 'categoria', 'ativo', 'data_cadastro')
    list_filter = ('ativo', 'categoria')
    search_fields = ('descricao', 'categoria__descricao')


@admin.register(Almoxarifado)
class AlmoxarifadoAdmin(admin.ModelAdmin):
    list_display = ('nome', 'ativo', 'data_cadastro')
    list_filter = ('ativo',)
    search_fields = ('nome', 'endereco')


@admin.register(Item)
class ItemAdmin(admin.ModelAdmin):
    list_display = (
        'codigo_interno',
        'descricao',
        'unidade_medida',
        'categoria_principal',
        'subcategoria_principal',
        'almoxarifado',
        'ativo',
        'data_cadastro'
    )
    list_filter = (
        'ativo',
        'unidade_medida',
        'categoria_principal',
        'subcategoria_principal',
        'almoxarifado'
    )
    search_fields = (
        'codigo_interno',
        'codigo_alternativo',
        'descricao',
        'unidade_medida__simbolo',  # Permite buscar pela unidade de medida
        'categoria_principal__descricao',
        'subcategoria_principal__descricao',
        'almoxarifado__nome'
    )
    fieldsets = (
        (None, {
            'fields': (
                'codigo_interno', 'codigo_alternativo', 'descricao',
                'imagem_item'
            )
        }),
        ('Dados Técnicos e Financeiros', {
            'fields': ('unidade_medida', 'peso', 'valor')
        }),
        ('Localização e Classificação', {
            'fields': ('almoxarifado', 'categoria_principal', 'subcategoria_principal')
        }),
        ('Status', {
            'fields': ('ativo',)
        }),
    )

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\itens\apps.py

from django.apps import AppConfig


class ItensConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'itens'

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\itens\models.py

# itens/models.py

from django.db import models
# Importar o modelo de Unidade de Medida
from cadastros_base.models import UnidadeMedida


class CategoriaItem(models.Model):
    descricao = models.CharField(
        max_length=100, unique=True, verbose_name="Descrição da Categoria")
    ativo = models.BooleanField(default=True, verbose_name="Ativo")
    data_cadastro = models.DateTimeField(
        auto_now_add=True, verbose_name="Data de Cadastro")
    data_atualizacao = models.DateTimeField(
        auto_now=True, verbose_name="Última Atualização")

    class Meta:
        verbose_name = "Categoria de Item"
        verbose_name_plural = "Categorias de Itens"
        ordering = ['descricao']

    def __str__(self):
        return self.descricao


class SubcategoriaItem(models.Model):
    # Uma subcategoria pertence a uma categoria principal
    categoria = models.ForeignKey(
        CategoriaItem,
        # Se a categoria for apagada, as subcategorias associadas também são
        on_delete=models.CASCADE,
        verbose_name="Categoria Principal",
        # Nome para a relação reversa (categoria.subcategorias.all())
        related_name='subcategorias'
    )
    descricao = models.CharField(
        max_length=100, verbose_name="Descrição da Subcategoria")
    ativo = models.BooleanField(default=True, verbose_name="Ativo")
    data_cadastro = models.DateTimeField(
        auto_now_add=True, verbose_name="Data de Cadastro")
    data_atualizacao = models.DateTimeField(
        auto_now=True, verbose_name="Última Atualização")

    class Meta:
        verbose_name = "Subcategoria de Item"
        verbose_name_plural = "Subcategorias de Itens"
        # Garante que uma subcategoria é única para uma categoria específica
        unique_together = ('categoria', 'descricao')
        ordering = ['categoria__descricao', 'descricao']

    def __str__(self):
        return f"{self.descricao} ({self.categoria.descricao})"


class Almoxarifado(models.Model):
    nome = models.CharField(max_length=100, unique=True,
                            verbose_name="Nome do Almoxarifado")
    endereco = models.CharField(
        max_length=255, null=True, blank=True, verbose_name="Endereço")
    ativo = models.BooleanField(default=True, verbose_name="Ativo")
    data_cadastro = models.DateTimeField(
        auto_now_add=True, verbose_name="Data de Cadastro")
    data_atualizacao = models.DateTimeField(
        auto_now=True, verbose_name="Última Atualização")

    class Meta:
        verbose_name = "Almoxarifado"
        verbose_name_plural = "Almoxarifados"
        ordering = ['nome']

    def __str__(self):
        return self.nome


class Item(models.Model):
    codigo_interno = models.CharField(
        max_length=50, unique=True, verbose_name="Código Interno")
    codigo_alternativo = models.CharField(
        max_length=50, null=True, blank=True, verbose_name="Código Alternativo")
    descricao = models.CharField(max_length=255, verbose_name="Descrição")

    # Relações com outros cadastros base
    unidade_medida = models.ForeignKey(
        UnidadeMedida,
        # Se a unidade de medida for apagada, o campo no item fica nulo
        on_delete=models.SET_NULL,
        null=True, blank=True,
        verbose_name="Unidade de Medida"
    )
    peso = models.DecimalField(
        max_digits=10, decimal_places=3, null=True, blank=True, verbose_name="Peso")
    valor = models.DecimalField(
        max_digits=10, decimal_places=2, null=True, blank=True, verbose_name="Valor")

    almoxarifado = models.ForeignKey(
        Almoxarifado,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        verbose_name="Almoxarifado"
    )

    # Relações com categorias e subcategorias de item.
    # Por enquanto, assumimos que um item tem UMA categoria principal e UMA subcategoria principal.
    # Se precisar de múltiplas, teremos que mudar para ManyToManyField e ajustar a lógica da UI.
    categoria_principal = models.ForeignKey(
        CategoriaItem,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        verbose_name="Categoria Principal",
        related_name='itens_por_categoria'
    )
    subcategoria_principal = models.ForeignKey(
        SubcategoriaItem,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        verbose_name="Subcategoria Principal",
        related_name='itens_por_subcategoria'
    )

    # Campo para imagem do item (opcional)
    imagem_item = models.ImageField(
        upload_to='itens_imagens/', null=True, blank=True, verbose_name="Imagem do Item")

    # Campos de controle
    ativo = models.BooleanField(default=True, verbose_name="Ativo")
    data_cadastro = models.DateTimeField(
        auto_now_add=True, verbose_name="Data de Cadastro")
    data_atualizacao = models.DateTimeField(
        auto_now=True, verbose_name="Última Atualização")

    class Meta:
        verbose_name = "Item"
        verbose_name_plural = "Itens"
        ordering = ['codigo_interno']

    def __str__(self):
        return f"{self.codigo_interno} - {self.descricao}"

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\itens\tests.py

from django.test import TestCase

# Create your tests here.

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\itens\urls.py

# itens/urls.py

from django.urls import path
from . import views

app_name = 'itens'

urlpatterns = [
    # Dashboard
    path('dashboard/', views.dashboard_itens, name='dashboard'),

    # Itens
    path('', views.lista_itens, name='lista_itens'),
    path('criar/', views.criar_item, name='criar_item'),
    path('<int:pk>/editar/', views.editar_item, name='editar_item'),
    path('<int:pk>/deletar/', views.deletar_item, name='deletar_item'),
    
    # Categorias de Itens
    path('categorias/', views.lista_categorias, name='lista_categorias'),
    path('categorias/criar/', views.criar_categoria, name='criar_categoria'),
    path('categorias/<int:pk>/editar/', views.editar_categoria, name='editar_categoria'),
    path('categorias/<int:pk>/deletar/', views.deletar_categoria, name='deletar_categoria'),

    # Subcategorias de Itens
    path('subcategorias/', views.lista_subcategorias, name='lista_subcategorias'),
    path('subcategorias/criar/', views.criar_subcategoria, name='criar_subcategoria'),
    path('subcategorias/<int:pk>/editar/', views.editar_subcategoria, name='editar_subcategoria'),
    path('subcategorias/<int:pk>/deletar/', views.deletar_subcategoria, name='deletar_subcategoria'),

    # Almoxarifados
    path('almoxarifados/', views.lista_almoxarifados, name='lista_almoxarifados'),
    path('almoxarifados/criar/', views.criar_almoxarifado, name='criar_almoxarifado'),
    path('almoxarifados/<int:pk>/editar/', views.editar_almoxarifado, name='editar_almoxarifado'),
    path('almoxarifados/<int:pk>/deletar/', views.deletar_almoxarifado, name='deletar_almoxarifado'),
    
    # AJAX
    path('ajax/subcategorias-por-categoria/', views.get_subcategorias_por_categoria, name='get_subcategorias_por_categoria'),
]
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\itens\views.py

# itens/views.py

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.core.paginator import Paginator
from django.db.models import Q, Count
from django.http import JsonResponse

from .models import Item, CategoriaItem, SubcategoriaItem, Almoxarifado
from cadastros_base.models import UnidadeMedida

# ============================================================================
# DASHBOARD
# ============================================================================

@login_required
def dashboard_itens(request):
    """Dashboard principal do módulo de itens."""
    context = {
        'total_itens': Item.objects.count(),
        'itens_ativos': Item.objects.filter(ativo=True).count(),
        'total_categorias': CategoriaItem.objects.count(),
        'total_subcategorias': SubcategoriaItem.objects.count(),
        'total_almoxarifados': Almoxarifado.objects.count(),
        'itens_recentes': Item.objects.select_related(
            'categoria_principal', 'almoxarifado'
        ).order_by('-data_cadastro')[:5],
    }
    return render(request, 'itens/dashboard.html', context)


# ============================================================================
# VIEWS PARA CATEGORIAS DE ITEM
# ============================================================================

@login_required
def lista_categorias(request):
    """Lista todas as categorias de itens."""
    search = request.GET.get('search', '')
    categorias = CategoriaItem.objects.annotate(total_itens=Count('itens_por_categoria')).order_by('descricao')
    
    if search:
        categorias = categorias.filter(descricao__icontains=search)
        
    paginator = Paginator(categorias, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    context = {
        'page_obj': page_obj,
        'search': search,
        'title': 'Categorias de Itens',
        'singular': 'Categoria',
        'button_text': 'Nova Categoria',
        'create_url': 'itens:criar_categoria',
        'artigo': 'a',
        'empty_message': 'Nenhuma categoria de item cadastrada.',
        'empty_subtitle': 'Comece criando a primeira categoria.'
    }
    return render(request, 'itens/categorias/lista.html', context)

@login_required
def criar_categoria(request):
    """Cria uma nova categoria de item."""
    if request.method == 'POST':
        descricao = request.POST.get('descricao')
        ativo = request.POST.get('ativo') == 'on'
        
        if descricao:
            try:
                CategoriaItem.objects.create(descricao=descricao, ativo=ativo)
                messages.success(request, 'Categoria de item criada com sucesso!')
                return redirect('itens:lista_categorias')
            except Exception as e:
                messages.error(request, f'Erro ao criar categoria: {e}')
        else:
            messages.error(request, 'A descrição é obrigatória.')
            
    context = {
        'title': 'Criar Categoria de Item',
        'back_url': 'itens:lista_categorias'
    }
    return render(request, 'itens/categorias/form.html', context)

@login_required
def editar_categoria(request, pk):
    """Edita uma categoria de item existente."""
    categoria = get_object_or_404(CategoriaItem, pk=pk)
    if request.method == 'POST':
        categoria.descricao = request.POST.get('descricao')
        categoria.ativo = request.POST.get('ativo') == 'on'
        
        if categoria.descricao:
            try:
                categoria.save()
                messages.success(request, 'Categoria de item atualizada com sucesso!')
                return redirect('itens:lista_categorias')
            except Exception as e:
                messages.error(request, f'Erro ao atualizar categoria: {e}')
        else:
            messages.error(request, 'A descrição é obrigatória.')

    context = {
        'object': categoria,
        'title': 'Editar Categoria de Item',
        'back_url': 'itens:lista_categorias'
    }
    return render(request, 'itens/categorias/form.html', context)

@login_required
def deletar_categoria(request, pk):
    """Deleta uma categoria de item."""
    categoria = get_object_or_404(CategoriaItem, pk=pk)
    if request.method == 'POST':
        try:
            categoria.delete()
            messages.success(request, 'Categoria de item deletada com sucesso!')
        except Exception as e:
            messages.error(request, f'Erro ao deletar categoria: {e}')
        return redirect('itens:lista_categorias')
    
    context = {
        'object': categoria,
        'title': 'Categoria de Item'
    }
    return render(request, 'auditorias/deletar_generico.html', context)


# ============================================================================
# VIEWS PARA SUBCATEGORIAS DE ITEM
# ============================================================================

@login_required
def lista_subcategorias(request):
    """Lista todas as subcategorias de itens."""
    search = request.GET.get('search', '')
    subcategorias = SubcategoriaItem.objects.select_related('categoria').annotate(total_itens=Count('itens_por_subcategoria')).order_by('categoria__descricao', 'descricao')
    
    if search:
        subcategorias = subcategorias.filter(
            Q(descricao__icontains=search) | Q(categoria__descricao__icontains=search)
        )
        
    paginator = Paginator(subcategorias, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    context = {
        'page_obj': page_obj,
        'search': search,
        'title': 'Subcategorias de Itens',
        'singular': 'Subcategoria',
        'button_text': 'Nova Subcategoria',
        'create_url': 'itens:criar_subcategoria',
        'artigo': 'a',
        'empty_message': 'Nenhuma subcategoria de item cadastrada.',
        'empty_subtitle': 'Comece criando a primeira subcategoria.'
    }
    return render(request, 'itens/subcategorias/lista.html', context)

@login_required
def criar_subcategoria(request):
    """Cria uma nova subcategoria de item."""
    if request.method == 'POST':
        descricao = request.POST.get('descricao')
        categoria_id = request.POST.get('categoria')
        ativo = request.POST.get('ativo') == 'on'
        
        if descricao and categoria_id:
            try:
                categoria = get_object_or_404(CategoriaItem, pk=categoria_id)
                SubcategoriaItem.objects.create(descricao=descricao, categoria=categoria, ativo=ativo)
                messages.success(request, 'Subcategoria de item criada com sucesso!')
                return redirect('itens:lista_subcategorias')
            except Exception as e:
                messages.error(request, f'Erro ao criar subcategoria: {e}')
        else:
            messages.error(request, 'Descrição e Categoria são obrigatórios.')
            
    context = {
        'title': 'Criar Subcategoria de Item',
        'back_url': 'itens:lista_subcategorias',
        'categorias': CategoriaItem.objects.filter(ativo=True)
    }
    return render(request, 'itens/subcategorias/form.html', context)

@login_required
def editar_subcategoria(request, pk):
    """Edita uma subcategoria de item existente."""
    subcategoria = get_object_or_404(SubcategoriaItem, pk=pk)
    if request.method == 'POST':
        subcategoria.descricao = request.POST.get('descricao')
        subcategoria.categoria_id = request.POST.get('categoria')
        subcategoria.ativo = request.POST.get('ativo') == 'on'
        
        if subcategoria.descricao and subcategoria.categoria_id:
            try:
                subcategoria.save()
                messages.success(request, 'Subcategoria de item atualizada com sucesso!')
                return redirect('itens:lista_subcategorias')
            except Exception as e:
                messages.error(request, f'Erro ao atualizar subcategoria: {e}')
        else:
            messages.error(request, 'Descrição e Categoria são obrigatórios.')

    context = {
        'object': subcategoria,
        'title': 'Editar Subcategoria de Item',
        'back_url': 'itens:lista_subcategorias',
        'categorias': CategoriaItem.objects.filter(ativo=True)
    }
    return render(request, 'itens/subcategorias/form.html', context)

@login_required
def deletar_subcategoria(request, pk):
    """Deleta uma subcategoria de item."""
    subcategoria = get_object_or_404(SubcategoriaItem, pk=pk)
    if request.method == 'POST':
        try:
            subcategoria.delete()
            messages.success(request, 'Subcategoria de item deletada com sucesso!')
        except Exception as e:
            messages.error(request, f'Erro ao deletar subcategoria: {e}')
        return redirect('itens:lista_subcategorias')
    
    context = {
        'object': subcategoria,
        'title': 'Subcategoria de Item'
    }
    return render(request, 'auditorias/deletar_generico.html', context)

# ============================================================================
# VIEWS PARA ALMOXARIFADOS
# ============================================================================

@login_required
def lista_almoxarifados(request):
    """Lista todos os almoxarifados."""
    search = request.GET.get('search', '')
    almoxarifados = Almoxarifado.objects.annotate(total_itens=Count('item')).order_by('nome')
    
    if search:
        almoxarifados = almoxarifados.filter(
            Q(nome__icontains=search) | Q(endereco__icontains=search)
        )
        
    paginator = Paginator(almoxarifados, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    context = {
        'page_obj': page_obj,
        'search': search,
        'title': 'Almoxarifados',
        'singular': 'Almoxarifado',
        'button_text': 'Novo Almoxarifado',
        'create_url': 'itens:criar_almoxarifado',
        'artigo': 'o',
        'empty_message': 'Nenhum almoxarifado cadastrado.',
        'empty_subtitle': 'Comece criando o primeiro almoxarifado.'
    }
    return render(request, 'itens/almoxarifados/lista.html', context)

@login_required
def criar_almoxarifado(request):
    """Cria um novo almoxarifado."""
    if request.method == 'POST':
        nome = request.POST.get('nome')
        endereco = request.POST.get('endereco')
        ativo = request.POST.get('ativo') == 'on'
        
        if nome:
            try:
                Almoxarifado.objects.create(nome=nome, endereco=endereco, ativo=ativo)
                messages.success(request, 'Almoxarifado criado com sucesso!')
                return redirect('itens:lista_almoxarifados')
            except Exception as e:
                messages.error(request, f'Erro ao criar almoxarifado: {e}')
        else:
            messages.error(request, 'O nome é obrigatório.')
            
    context = {
        'title': 'Criar Almoxarifado',
        'back_url': 'itens:lista_almoxarifados'
    }
    return render(request, 'itens/almoxarifados/form.html', context)

@login_required
def editar_almoxarifado(request, pk):
    """Edita um almoxarifado existente."""
    almoxarifado = get_object_or_404(Almoxarifado, pk=pk)
    if request.method == 'POST':
        almoxarifado.nome = request.POST.get('nome')
        almoxarifado.endereco = request.POST.get('endereco')
        almoxarifado.ativo = request.POST.get('ativo') == 'on'
        
        if almoxarifado.nome:
            try:
                almoxarifado.save()
                messages.success(request, 'Almoxarifado atualizado com sucesso!')
                return redirect('itens:lista_almoxarifados')
            except Exception as e:
                messages.error(request, f'Erro ao atualizar almoxarifado: {e}')
        else:
            messages.error(request, 'O nome é obrigatório.')

    context = {
        'object': almoxarifado,
        'title': 'Editar Almoxarifado',
        'back_url': 'itens:lista_almoxarifados'
    }
    return render(request, 'itens/almoxarifados/form.html', context)

@login_required
def deletar_almoxarifado(request, pk):
    """Deleta um almoxarifado."""
    almoxarifado = get_object_or_404(Almoxarifado, pk=pk)
    if request.method == 'POST':
        try:
            almoxarifado.delete()
            messages.success(request, 'Almoxarifado deletado com sucesso!')
        except Exception as e:
            messages.error(request, f'Erro ao deletar almoxarifado: {e}')
        return redirect('itens:lista_almoxarifados')
    
    context = {
        'object': almoxarifado,
        'title': 'Almoxarifado'
    }
    return render(request, 'auditorias/deletar_generico.html', context)

# ============================================================================
# VIEWS PARA ITENS
# ============================================================================

@login_required
def lista_itens(request):
    """Lista todos os itens com busca e paginação."""
    search = request.GET.get('search', '')
    itens_list = Item.objects.select_related(
        'unidade_medida', 
        'categoria_principal', 
        'subcategoria_principal', 
        'almoxarifado'
    ).order_by('codigo_interno')

    if search:
        itens_list = itens_list.filter(
            Q(codigo_interno__icontains=search) |
            Q(descricao__icontains=search) |
            Q(categoria_principal__descricao__icontains=search) |
            Q(almoxarifado__nome__icontains=search)
        )

    paginator = Paginator(itens_list, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'page_obj': page_obj,
        'search': search,
        'title': 'Itens',
        'singular': 'Item',
        'button_text': 'Novo Item',
        'create_url': 'itens:criar_item',
        'artigo': 'o',
        'empty_message': 'Nenhum item cadastrado',
        'empty_subtitle': 'Comece criando o primeiro item.'
    }
    return render(request, 'itens/lista.html', context)

@login_required
def criar_item(request):
    """Cria um novo item."""
    if request.method == 'POST':
        # Tratamento de dados do form
        codigo_interno = request.POST.get('codigo_interno')
        descricao = request.POST.get('descricao')

        if not codigo_interno or not descricao:
            messages.error(request, 'Código Interno e Descrição são obrigatórios.')
        else:
            try:
                item = Item(
                    codigo_interno=codigo_interno,
                    descricao=descricao,
                    codigo_alternativo=request.POST.get('codigo_alternativo'),
                    peso=request.POST.get('peso') or None,
                    valor=request.POST.get('valor') or None,
                    ativo=request.POST.get('ativo') == 'on',
                    unidade_medida_id=request.POST.get('unidade_medida') or None,
                    almoxarifado_id=request.POST.get('almoxarifado') or None,
                    categoria_principal_id=request.POST.get('categoria_principal') or None,
                    subcategoria_principal_id=request.POST.get('subcategoria_principal') or None,
                )
                if request.FILES.get('imagem_item'):
                    item.imagem_item = request.FILES['imagem_item']

                item.save()
                messages.success(request, f"Item '{item.descricao}' criado com sucesso!")
                return redirect('itens:lista_itens')
            except Exception as e:
                messages.error(request, f"Erro ao criar o item: {e}")

    context = {
        'title': 'Criar Item',
        'back_url': 'itens:lista_itens',
        'unidades_medida': UnidadeMedida.objects.filter(ativo=True),
        'almoxarifados': Almoxarifado.objects.filter(ativo=True),
        'categorias': CategoriaItem.objects.filter(ativo=True),
        'subcategorias': SubcategoriaItem.objects.filter(ativo=True),
    }
    return render(request, 'itens/form.html', context)

@login_required
def editar_item(request, pk):
    """Edita um item existente."""
    item = get_object_or_404(Item, pk=pk)
    if request.method == 'POST':
        codigo_interno = request.POST.get('codigo_interno')
        descricao = request.POST.get('descricao')

        if not codigo_interno or not descricao:
            messages.error(request, 'Código Interno e Descrição são obrigatórios.')
        else:
            try:
                item.codigo_interno = codigo_interno
                item.descricao = descricao
                item.codigo_alternativo = request.POST.get('codigo_alternativo')
                item.peso = request.POST.get('peso') or None
                item.valor = request.POST.get('valor') or None
                item.ativo = request.POST.get('ativo') == 'on'
                item.unidade_medida_id = request.POST.get('unidade_medida') or None
                item.almoxarifado_id = request.POST.get('almoxarifado') or None
                item.categoria_principal_id = request.POST.get('categoria_principal') or None
                item.subcategoria_principal_id = request.POST.get('subcategoria_principal') or None
                
                if request.FILES.get('imagem_item'):
                    item.imagem_item = request.FILES['imagem_item']

                item.save()
                messages.success(request, f"Item '{item.descricao}' atualizado com sucesso!")
                return redirect('itens:lista_itens')
            except Exception as e:
                messages.error(request, f"Erro ao atualizar o item: {e}")

    context = {
        'object': item,
        'title': 'Editar Item',
        'back_url': 'itens:lista_itens',
        'unidades_medida': UnidadeMedida.objects.filter(ativo=True),
        'almoxarifados': Almoxarifado.objects.filter(ativo=True),
        'categorias': CategoriaItem.objects.filter(ativo=True),
        'subcategorias': SubcategoriaItem.objects.filter(ativo=True),
    }
    return render(request, 'itens/form.html', context)


@login_required
def deletar_item(request, pk):
    """Deleta um item."""
    item = get_object_or_404(Item, pk=pk)
    if request.method == 'POST':
        try:
            item_desc = item.descricao
            item.delete()
            messages.success(request, f"Item '{item_desc}' deletado com sucesso!")
        except Exception as e:
            messages.error(request, f"Erro ao deletar o item: {e}")
        return redirect('itens:lista_itens')

    context = {
        'object': item,
        'title': 'Item'
    }
    return render(request, 'auditorias/deletar_generico.html', context)

# AJAX view to get subcategories for a category
@login_required
def get_subcategorias_por_categoria(request):
    """Retorna subcategorias de uma categoria via AJAX"""
    categoria_id = request.GET.get('categoria_id')
    subcategorias = SubcategoriaItem.objects.filter(categoria_id=categoria_id, ativo=True).values('id', 'descricao')
    return JsonResponse(list(subcategorias), safe=False)
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\itens\__init__.py


_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\itens\migrations\0001_initial.py

# Generated by Django 5.2.4 on 2025-07-28 12:54

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cadastros_base', '0002_alter_turno_options_remove_turno_hora_fim_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Almoxarifado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, unique=True, verbose_name='Nome do Almoxarifado')),
                ('endereco', models.CharField(blank=True, max_length=255, null=True, verbose_name='Endereço')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
            ],
            options={
                'verbose_name': 'Almoxarifado',
                'verbose_name_plural': 'Almoxarifados',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='CategoriaItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', models.CharField(max_length=100, unique=True, verbose_name='Descrição da Categoria')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
            ],
            options={
                'verbose_name': 'Categoria de Item',
                'verbose_name_plural': 'Categorias de Itens',
                'ordering': ['descricao'],
            },
        ),
        migrations.CreateModel(
            name='SubcategoriaItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', models.CharField(max_length=100, verbose_name='Descrição da Subcategoria')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('categoria', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subcategorias', to='itens.categoriaitem', verbose_name='Categoria Principal')),
            ],
            options={
                'verbose_name': 'Subcategoria de Item',
                'verbose_name_plural': 'Subcategorias de Itens',
                'ordering': ['categoria__descricao', 'descricao'],
                'unique_together': {('categoria', 'descricao')},
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo_interno', models.CharField(max_length=50, unique=True, verbose_name='Código Interno')),
                ('codigo_alternativo', models.CharField(blank=True, max_length=50, null=True, verbose_name='Código Alternativo')),
                ('descricao', models.CharField(max_length=255, verbose_name='Descrição')),
                ('peso', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True, verbose_name='Peso')),
                ('valor', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Valor')),
                ('imagem_item', models.ImageField(blank=True, null=True, upload_to='itens_imagens/', verbose_name='Imagem do Item')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('almoxarifado', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='itens.almoxarifado', verbose_name='Almoxarifado')),
                ('categoria_principal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='itens_por_categoria', to='itens.categoriaitem', verbose_name='Categoria Principal')),
                ('unidade_medida', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cadastros_base.unidademedida', verbose_name='Unidade de Medida')),
                ('subcategoria_principal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='itens_por_subcategoria', to='itens.subcategoriaitem', verbose_name='Subcategoria Principal')),
            ],
            options={
                'verbose_name': 'Item',
                'verbose_name_plural': 'Itens',
                'ordering': ['codigo_interno'],
            },
        ),
    ]

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\itens\migrations\__init__.py


_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\itens\templates\itens\dashboard.html

{% extends 'auditorias/base.html' %}

{% block title %}Dashboard de Itens{% endblock %}
{% block page_title %}Dashboard de Itens{% endblock %}

{% block content %}
<div class="content-header">
    <h2 class="content-title">Visão Geral de Itens</h2>
    <p class="content-subtitle">Estatísticas e informações sobre os itens cadastrados.</p>
</div>

<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 24px; margin-bottom: 32px;">
    <div class="card">
        <div class="card-body" style="padding: 24px;">
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <div>
                    <h3 style="font-size: 32px; font-weight: 700; color: var(--primary); margin-bottom: 8px;">{{ total_itens }}</h3>
                    <p style="color: var(--text-secondary); font-size: 14px; margin: 0;">Total de Itens</p>
                </div>
                <div style="font-size: 24px; color: var(--primary);"><i class="fas fa-boxes"></i></div>
            </div>
        </div>
    </div>
    <div class="card">
        <div class="card-body" style="padding: 24px;">
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <div>
                    <h3 style="font-size: 32px; font-weight: 700; color: var(--success); margin-bottom: 8px;">{{ itens_ativos }}</h3>
                    <p style="color: var(--text-secondary); font-size: 14px; margin: 0;">Itens Ativos</p>
                </div>
                <div style="font-size: 24px; color: var(--success);"><i class="fas fa-check-circle"></i></div>
            </div>
        </div>
    </div>
    <div class="card">
        <div class="card-body" style="padding: 24px;">
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <div>
                    <h3 style="font-size: 32px; font-weight: 700; color: var(--warning); margin-bottom: 8px;">{{ total_categorias }}</h3>
                    <p style="color: var(--text-secondary); font-size: 14px; margin: 0;">Categorias</p>
                </div>
                <div style="font-size: 24px; color: var(--warning);"><i class="fas fa-tags"></i></div>
            </div>
        </div>
    </div>
    <div class="card">
        <div class="card-body" style="padding: 24px;">
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <div>
                    <h3 style="font-size: 32px; font-weight: 700; color: var(--info); margin-bottom: 8px;">{{ total_almoxarifados }}</h3>
                    <p style="color: var(--text-secondary); font-size: 14px; margin: 0;">Almoxarifados</p>
                </div>
                <div style="font-size: 24px; color: var(--info);"><i class="fas fa-warehouse"></i></div>
            </div>
        </div>
    </div>
</div>

<div style="display: grid; grid-template-columns: 2fr 1fr; gap: 32px;">
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Itens Adicionados Recentemente</h3>
        </div>
        <div class="card-body">
            {% if itens_recentes %}
                <div class="table-container">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Código</th>
                                <th>Descrição</th>
                                <th>Categoria</th>
                                <th>Data Cadastro</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for item in itens_recentes %}
                            <tr>
                                <td><a href="{% url 'itens:editar_item' item.pk %}">{{ item.codigo_interno }}</a></td>
                                <td>{{ item.descricao }}</td>
                                <td><span class="badge badge-info">{{ item.categoria_principal.descricao|default:'N/A' }}</span></td>
                                <td>{{ item.data_cadastro|date:"d/m/Y" }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            {% else %}
                <p>Nenhum item cadastrado recentemente.</p>
            {% endif %}
        </div>
    </div>

    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Ações Rápidas</h3>
        </div>
        <div class="card-body" style="display: flex; flex-direction: column; gap: 12px;">
            <a href="{% url 'itens:criar_item' %}" class="btn btn-primary"><i class="fas fa-plus"></i> Novo Item</a>
            <a href="{% url 'itens:criar_categoria' %}" class="btn btn-secondary"><i class="fas fa-plus"></i> Nova Categoria</a>
            <a href="{% url 'itens:criar_subcategoria' %}" class="btn btn-secondary"><i class="fas fa-plus"></i> Nova Subcategoria</a>
            <a href="{% url 'itens:criar_almoxarifado' %}" class="btn btn-secondary"><i class="fas fa-plus"></i> Novo Almoxarifado</a>
        </div>
    </div>
</div>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\itens\templates\itens\deletar_item.html

{% extends 'auditorias/base.html' %}

{% block title %}Deletar Item - Sistema de Auditorias{% endblock %}
{% block page_title %}Confirmar Exclusão de Item{% endblock %}

{% block content %}
<div class="card" style="max-width: 600px; margin: auto;">
    <div class="card-body" style="text-align: center; padding: 40px;">
        <i class="fas fa-exclamation-triangle" style="font-size: 48px; color: var(--warning); margin-bottom: 24px;"></i>
        <h3 class="card-title" style="font-size: 22px;">Tem certeza?</h3>
        <p class="card-subtitle" style="margin-top: 8px; margin-bottom: 24px;">
            Você está prestes a deletar permanentemente o item: <br>
            <strong style="color: var(--text-primary);">"{{ item.codigo_interno }} - {{ item.descricao }}"</strong>
        </p>
        <p class="card-subtitle" style="color: var(--error);">
            Esta ação não pode ser desfeita.
        </p>

        <form method="post">
            {% csrf_token %}
            <div style="display: flex; gap: 16px; justify-content: center; margin-top: 32px;">
                <a href="{% url 'itens:lista_itens' %}" class="btn btn-secondary">
                    <i class="fas fa-times"></i> Cancelar
                </a>
                <button type="submit" class="btn btn-danger">
                    <i class="fas fa-trash"></i> Sim, deletar
                </button>
            </div>
        </form>
    </div>
</div>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\itens\templates\itens\form.html

{% extends 'auditorias/form_generico.html' %}

{% block form_content %}
<h4 style="color: var(--text-primary); margin-bottom: 16px; padding-bottom: 8px; border-bottom: 1px solid var(--border);">
    Identificação do Item
</h4>
<div class="form-row">
    <div class="form-group required">
        <label for="codigo_interno" class="form-label">Código Interno</label>
        <input type="text" id="codigo_interno" name="codigo_interno" class="form-control" value="{{ object.codigo_interno|default:'' }}" required maxlength="50">
    </div>
    <div class="form-group">
        <label for="codigo_alternativo" class="form-label">Código Alternativo</label>
        <input type="text" id="codigo_alternativo" name="codigo_alternativo" class="form-control" value="{{ object.codigo_alternativo|default:'' }}" maxlength="50">
    </div>
</div>
<div class="form-row single">
    <div class="form-group required">
        <label for="descricao" class="form-label">Descrição</label>
        <input type="text" id="descricao" name="descricao" class="form-control" value="{{ object.descricao|default:'' }}" required maxlength="255">
    </div>
</div>

<div class="form-row triple">
    <div class="form-group">
        <label for="unidade_medida" class="form-label">Unidade de Medida</label>
        <select id="unidade_medida" name="unidade_medida" class="form-control form-select">
            <option value="">Selecione...</option>
            {% for um in unidades_medida %}<option value="{{ um.pk }}" {% if object.unidade_medida.pk == um.pk %}selected{% endif %}>{{ um.nome }}</option>{% endfor %}
        </select>
    </div>
    <div class="form-group">
        <label for="peso" class="form-label">Peso</label>
        <input type="number" step="0.001" id="peso" name="peso" class="form-control" value="{{ object.peso|default:'' }}">
    </div>
    <div class="form-group">
        <label for="valor" class="form-label">Valor (R$)</label>
        <input type="number" step="0.01" id="valor" name="valor" class="form-control" value="{{ object.valor|default:'' }}">
    </div>
</div>

<h4 style="color: var(--text-primary); margin: 32px 0 16px; padding-bottom: 8px; border-bottom: 1px solid var(--border);">
    Classificação e Localização
</h4>
<div class="form-row">
    <div class="form-group">
        <label for="categoria_principal" class="form-label">Categoria</label>
        <select id="categoria_principal" name="categoria_principal" class="form-control form-select">
            <option value="">Selecione...</option>
            {% for cat in categorias %}<option value="{{ cat.pk }}" {% if object.categoria_principal.pk == cat.pk %}selected{% endif %}>{{ cat.descricao }}</option>{% endfor %}
        </select>
    </div>
    <div class="form-group">
        <label for="subcategoria_principal" class="form-label">Subcategoria</label>
        <select id="subcategoria_principal" name="subcategoria_principal" class="form-control form-select">
            <option value="">Selecione uma categoria primeiro</option>
             {% if object.subcategoria_principal %}
                <option value="{{ object.subcategoria_principal.pk }}" selected>{{ object.subcategoria_principal.descricao }}</option>
            {% endif %}
        </select>
    </div>
</div>
<div class="form-row single">
    <div class="form-group">
        <label for="almoxarifado" class="form-label">Almoxarifado</label>
        <select id="almoxarifado" name="almoxarifado" class="form-control form-select">
            <option value="">Selecione...</option>
            {% for almox in almoxarifados %}<option value="{{ almox.pk }}" {% if object.almoxarifado.pk == almox.pk %}selected{% endif %}>{{ almox.nome }}</option>{% endfor %}
        </select>
    </div>
</div>
<div class="form-group">
    <label for="imagem_item" class="form-label">Imagem do Item</label>
    {% if object.imagem_item %}
    <p>Imagem atual: <a href="{{ object.imagem_item.url }}" target="_blank">{{ object.imagem_item.name }}</a></p>
    {% endif %}
    <input type="file" id="imagem_item" name="imagem_item" class="form-control">
</div>
<div class="form-group">
    <label class="form-label">Status</label>
    <div style="display: flex; align-items: center; gap: 12px;">
        <label class="toggle-switch">
            <input type="checkbox" name="ativo" {% if object.ativo|default:True %}checked{% endif %}>
            <span class="toggle-slider"></span>
        </label>
        <span style="color: var(--text-secondary); font-size: 14px;">Item ativo no sistema</span>
    </div>
</div>
{% endblock %}

{% block extra_js %}
{{ block.super }}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const categoriaSelect = document.getElementById('categoria_principal');
    const subcategoriaSelect = document.getElementById('subcategoria_principal');

    categoriaSelect.addEventListener('change', function() {
        const categoriaId = this.value;
        subcategoriaSelect.innerHTML = '<option value="">Carregando...</option>';

        if (categoriaId) {
            fetch(`{% url 'itens:get_subcategorias_por_categoria' %}?categoria_id=${categoriaId}`)
                .then(response => response.json())
                .then(data => {
                    subcategoriaSelect.innerHTML = '<option value="">Selecione uma subcategoria</option>';
                    data.forEach(subcat => {
                        const option = document.createElement('option');
                        option.value = subcat.id;
                        option.textContent = subcat.descricao;
                        subcategoriaSelect.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Erro ao buscar subcategorias:', error);
                    subcategoriaSelect.innerHTML = '<option value="">Erro ao carregar</option>';
                });
        } else {
            subcategoriaSelect.innerHTML = '<option value="">Selecione uma categoria primeiro</option>';
        }
    });
});
</script>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\itens\templates\itens\form_item.html

{% extends 'auditorias/form_generico.html' %}

{% block form_content %}
    <div class="form-row">
        <div class="form-group required">
            <label for="codigo_interno" class="form-label">Código Interno</label>
            <input type="text" id="codigo_interno" name="codigo_interno" class="form-control" value="{{ item.codigo_interno|default:'' }}" required maxlength="50" placeholder="Ex: ITM-001">
        </div>
        <div class="form-group">
            <label for="codigo_alternativo" class="form-label">Código Alternativo</label>
            <input type="text" id="codigo_alternativo" name="codigo_alternativo" class="form-control" value="{{ item.codigo_alternativo|default:'' }}" maxlength="50">
        </div>
    </div>
    <div class="form-row single">
        <div class="form-group required">
            <label for="descricao" class="form-label">Descrição do Item</label>
            <input type="text" id="descricao" name="descricao" class="form-control" value="{{ item.descricao|default:'' }}" required maxlength="255" placeholder="Digite uma descrição completa para o item">
        </div>
    </div>

    <div class="form-row triple">
        <div class="form-group">
            <label for="unidade_medida" class="form-label">Unidade de Medida</label>
            <select id="unidade_medida" name="unidade_medida" class="form-control form-select">
                <option value="">Selecione...</option>
                {% for um in unidades_medida %}
                <option value="{{ um.pk }}" {% if item.unidade_medida.pk == um.pk %}selected{% endif %}>{{ um.nome }} ({{ um.simbolo }})</option>
                {% endfor %}
            </select>
        </div>
        <div class="form-group">
            <label for="peso" class="form-label">Peso</label>
            <input type="number" step="0.001" id="peso" name="peso" class="form-control" value="{{ item.peso|default:'' }}">
        </div>
        <div class="form-group">
            <label for="valor" class="form-label">Valor (R$)</label>
            <input type="number" step="0.01" id="valor" name="valor" class="form-control" value="{{ item.valor|default:'' }}">
        </div>
    </div>

    <div class="form-row">
        <div class="form-group">
            <label for="categoria_principal" class="form-label">Categoria</label>
            <select id="categoria_principal" name="categoria_principal" class="form-control form-select">
                <option value="">Selecione...</option>
                {% for cat in categorias %}
                <option value="{{ cat.pk }}" {% if item.categoria_principal.pk == cat.pk %}selected{% endif %}>{{ cat.descricao }}</option>
                {% endfor %}
            </select>
        </div>
        <div class="form-group">
            <label for="subcategoria_principal" class="form-label">Subcategoria</label>
            <select id="subcategoria_principal" name="subcategoria_principal" class="form-control form-select">
                <option value="">Selecione...</option>
                {% for subcat in subcategorias %}
                <option value="{{ subcat.pk }}" {% if item.subcategoria_principal.pk == subcat.pk %}selected{% endif %}>{{ subcat.descricao }}</option>
                {% endfor %}
            </select>
        </div>
    </div>
    <div class="form-row single">
         <div class="form-group">
            <label for="almoxarifado" class="form-label">Almoxarifado</label>
            <select id="almoxarifado" name="almoxarifado" class="form-control form-select">
                <option value="">Selecione...</option>
                {% for almox in almoxarifados %}
                <option value="{{ almox.pk }}" {% if item.almoxarifado.pk == almox.pk %}selected{% endif %}>{{ almox.nome }}</option>
                {% endfor %}
            </select>
        </div>
    </div>
    
    <div class="form-row single">
        <div class="form-group">
            <label class="form-label">Status</label>
            <div style="display: flex; align-items: center; gap: 12px;">
                <label class="toggle-switch">
                    <input type="checkbox" name="ativo" {% if item.ativo|default:True %}checked{% endif %}>
                    <span class="toggle-slider"></span>
                </label>
                <span style="color: var(--text-secondary); font-size: 14px;">
                    Item ativo no sistema
                </span>
            </div>
        </div>
    </div>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\itens\templates\itens\lista.html

{% extends 'auditorias/lista_generica.html' %}

{% block table_headers %}
    <th>Código Interno</th>
    <th>Descrição</th>
    <th>Categoria</th>
    <th>Almoxarifado</th>
    <th>Status</th>
    <th style="width: 120px;">Ações</th>
{% endblock %}

{% block table_row %}
    <td>
        <div style="font-weight: 600; color: var(--text-primary);">
            {{ object.codigo_interno }}
        </div>
    </td>
    <td>{{ object.descricao|truncatechars:40 }}</td>
    <td>{{ object.categoria_principal.descricao|default:"—" }}</td>
    <td>{{ object.almoxarifado.nome|default:"—" }}</td>
    <td>
        {% if object.ativo %}
            <span class="badge badge-success"><i class="fas fa-check-circle"></i> Ativo</span>
        {% else %}
            <span class="badge badge-error"><i class="fas fa-times-circle"></i> Inativo</span>
        {% endif %}
    </td>
    <td>
         <div class="action-buttons">
            <a href="{% url 'itens:editar_item' object.pk %}" class="btn btn-secondary btn-icon" title="Editar Item">
                <i class="fas fa-edit"></i>
            </a>
            <button type="button" class="btn btn-danger btn-icon" title="Deletar Item"
                    onclick="confirmDelete('{% url 'itens:deletar_item' object.pk %}', '{{ object.codigo_interno }}')">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    </td>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\itens\templates\itens\lista_itens.html

{% extends 'auditorias/lista_generica.html' %}

{% block table_headers %}
    <th>Código Interno</th>
    <th>Descrição</th>
    <th>Categoria</th>
    <th>Almoxarifado</th>
    <th>Status</th>
    <th style="width: 120px;">Ações</th>
{% endblock %}

{% block table_row %}
    <td>
        <div style="font-weight: 600; color: var(--text-primary);">
            {{ object.codigo_interno }}
        </div>
    </td>
    <td>
        <div style="max-width: 300px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;" title="{{ object.descricao }}">
            {{ object.descricao|default:"—" }}
        </div>
    </td>
    <td>{{ object.categoria_principal.descricao|default:"—" }}</td>
    <td>{{ object.almoxarifado.nome|default:"—" }}</td>
    <td>
        {% if object.ativo %}
            <span class="badge badge-success">
                <i class="fas fa-check-circle"></i> Ativo
            </span>
        {% else %}
            <span class="badge badge-error">
                <i class="fas fa-times-circle"></i> Inativo
            </span>
        {% endif %}
    </td>
    <td>
        <div class="action-buttons">
            <a href="{% url 'itens:editar_item' object.pk %}" class="btn btn-secondary btn-icon" title="Editar Item">
                <i class="fas fa-edit"></i>
            </a>
            <button type="button" class="btn btn-danger btn-icon" title="Deletar Item"
                    onclick="confirmDelete('{% url 'itens:deletar_item' object.pk %}', '{{ object.descricao }}')">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    </td>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\itens\templates\itens\almoxarifados\form.html

{% extends 'auditorias/form_generico.html' %}

{% block form_content %}
<div class="form-row single">
    <div class="form-group required">
        <label for="nome" class="form-label">Nome do Almoxarifado</label>
        <input type="text" id="nome" name="nome" class="form-control" value="{{ object.nome|default:'' }}" required maxlength="100">
    </div>
</div>

<div class="form-row single">
    <div class="form-group">
        <label for="endereco" class="form-label">Endereço</label>
        <input type="text" id="endereco" name="endereco" class="form-control" value="{{ object.endereco|default:'' }}" maxlength="255">
    </div>
</div>

<div class="form-row single">
    <div class="form-group">
        <label class="form-label">Status</label>
        <div style="display: flex; align-items: center; gap: 12px;">
            <label class="toggle-switch">
                <input type="checkbox" name="ativo" {% if object.ativo|default:True %}checked{% endif %}>
                <span class="toggle-slider"></span>
            </label>
            <span style="color: var(--text-secondary); font-size: 14px;">
                Almoxarifado ativo no sistema
            </span>
        </div>
    </div>
</div>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\itens\templates\itens\almoxarifados\lista.html

{% extends 'auditorias/lista_generica.html' %}

{% block table_headers %}
    <th>Nome do Almoxarifado</th>
    <th>Endereço</th>
    <th>Total de Itens</th>
    <th>Status</th>
    <th style="width: 120px;">Ações</th>
{% endblock %}

{% block table_row %}
    <td>
        <div style="font-weight: 600; color: var(--text-primary);">
            {{ object.nome }}
        </div>
    </td>
    <td>{{ object.endereco|default:"—" }}</td>
    <td>{{ object.total_itens }}</td>
    <td>
        {% if object.ativo %}
            <span class="badge badge-success"><i class="fas fa-check-circle"></i> Ativo</span>
        {% else %}
            <span class="badge badge-error"><i class="fas fa-times-circle"></i> Inativo</span>
        {% endif %}
    </td>
    <td>
        <div class="action-buttons">
            <a href="{% url 'itens:editar_almoxarifado' object.pk %}" class="btn btn-secondary btn-icon" title="Editar Almoxarifado">
                <i class="fas fa-edit"></i>
            </a>
            <button type="button" class="btn btn-danger btn-icon" title="Deletar Almoxarifado"
                    onclick="confirmDelete('{% url 'itens:deletar_almoxarifado' object.pk %}', '{{ object.nome }}')">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    </td>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\itens\templates\itens\categorias\form.html

{% extends 'auditorias/form_generico.html' %}

{% block form_content %}
<div class="form-row single">
    <div class="form-group required">
        <label for="descricao" class="form-label">Descrição da Categoria</label>
        <input type="text" id="descricao" name="descricao" class="form-control" value="{{ object.descricao|default:'' }}" required maxlength="100">
    </div>
</div>

<div class="form-row single">
    <div class="form-group">
        <label class="form-label">Status</label>
        <div style="display: flex; align-items: center; gap: 12px;">
            <label class="toggle-switch">
                <input type="checkbox" name="ativo" {% if object.ativo|default:True %}checked{% endif %}>
                <span class="toggle-slider"></span>
            </label>
            <span style="color: var(--text-secondary); font-size: 14px;">
                Categoria ativa no sistema
            </span>
        </div>
    </div>
</div>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\itens\templates\itens\categorias\lista.html

{% extends 'auditorias/lista_generica.html' %}

{% block table_headers %}
    <th>Descrição da Categoria</th>
    <th>Total de Itens</th>
    <th>Status</th>
    <th>Data de Cadastro</th>
    <th style="width: 120px;">Ações</th>
{% endblock %}

{% block table_row %}
    <td>
        <div style="font-weight: 600; color: var(--text-primary);">
            {{ object.descricao }}
        </div>
    </td>
    <td>{{ object.total_itens }}</td>
    <td>
        {% if object.ativo %}
            <span class="badge badge-success"><i class="fas fa-check-circle"></i> Ativo</span>
        {% else %}
            <span class="badge badge-error"><i class="fas fa-times-circle"></i> Inativo</span>
        {% endif %}
    </td>
    <td>{{ object.data_cadastro|date:"d/m/Y" }}</td>
    <td>
        <div class="action-buttons">
            <a href="{% url 'itens:editar_categoria' object.pk %}" class="btn btn-secondary btn-icon" title="Editar Categoria">
                <i class="fas fa-edit"></i>
            </a>
            <button type="button" class="btn btn-danger btn-icon" title="Deletar Categoria"
                    onclick="confirmDelete('{% url 'itens:deletar_categoria' object.pk %}', '{{ object.descricao }}')">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    </td>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\itens\templates\itens\subcategorias\form.html

{% extends 'auditorias/form_generico.html' %}

{% block form_content %}
<div class="form-row single">
    <div class="form-group required">
        <label for="descricao" class="form-label">Descrição da Subcategoria</label>
        <input type="text" id="descricao" name="descricao" class="form-control" value="{{ object.descricao|default:'' }}" required maxlength="100">
    </div>
</div>

<div class="form-row single">
    <div class="form-group required">
        <label for="categoria" class="form-label">Categoria Principal</label>
        <select id="categoria" name="categoria" class="form-control form-select" required>
            <option value="">Selecione...</option>
            {% for cat in categorias %}
            <option value="{{ cat.pk }}" {% if object.categoria.pk == cat.pk %}selected{% endif %}>{{ cat.descricao }}</option>
            {% endfor %}
        </select>
    </div>
</div>

<div class="form-row single">
    <div class="form-group">
        <label class="form-label">Status</label>
        <div style="display: flex; align-items: center; gap: 12px;">
            <label class="toggle-switch">
                <input type="checkbox" name="ativo" {% if object.ativo|default:True %}checked{% endif %}>
                <span class="toggle-slider"></span>
            </label>
            <span style="color: var(--text-secondary); font-size: 14px;">
                Subcategoria ativa no sistema
            </span>
        </div>
    </div>
</div>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\itens\templates\itens\subcategorias\lista.html

{% extends 'auditorias/lista_generica.html' %}

{% block table_headers %}
    <th>Descrição da Subcategoria</th>
    <th>Categoria Principal</th>
    <th>Total de Itens</th>
    <th>Status</th>
    <th style="width: 120px;">Ações</th>
{% endblock %}

{% block table_row %}
    <td>
        <div style="font-weight: 600; color: var(--text-primary);">
            {{ object.descricao }}
        </div>
    </td>
    <td>{{ object.categoria.descricao }}</td>
    <td>{{ object.total_itens }}</td>
    <td>
        {% if object.ativo %}
            <span class="badge badge-success"><i class="fas fa-check-circle"></i> Ativo</span>
        {% else %}
            <span class="badge badge-error"><i class="fas fa-times-circle"></i> Inativo</span>
        {% endif %}
    </td>
    <td>
        <div class="action-buttons">
            <a href="{% url 'itens:editar_subcategoria' object.pk %}" class="btn btn-secondary btn-icon" title="Editar Subcategoria">
                <i class="fas fa-edit"></i>
            </a>
            <button type="button" class="btn btn-danger btn-icon" title="Deletar Subcategoria"
                    onclick="confirmDelete('{% url 'itens:deletar_subcategoria' object.pk %}', '{{ object.descricao }}')">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    </td>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\organizacao\admin.py

from django.contrib import admin
from .models import Empresa, Area, Setor, SubSetor


@admin.register(Empresa)
class EmpresaAdmin(admin.ModelAdmin):
    list_display = ('nome', 'usuario_responsavel', 'ativo', 'data_cadastro')
    list_filter = ('ativo', 'usuario_responsavel')
    search_fields = ('nome', 'cnpj', 'endereco',
                     'usuario_responsavel__username')
    fieldsets = (
        (None, {
            'fields': ('nome', 'cnpj', 'endereco', 'ativo', 'usuario_responsavel')
        }),
    )


@admin.register(Area)
class AreaAdmin(admin.ModelAdmin):
    list_display = ('nome', 'empresa', 'usuario_responsavel',
                    'ativo', 'data_cadastro')
    list_filter = ('ativo', 'empresa', 'usuario_responsavel')
    search_fields = ('nome', 'empresa__nome', 'usuario_responsavel__username')
    fieldsets = (
        (None, {
            'fields': ('empresa', 'nome', 'ativo', 'usuario_responsavel')
        }),
    )


@admin.register(Setor)
class SetorAdmin(admin.ModelAdmin):
    list_display = ('nome', 'area', 'usuario_responsavel',
                    'ativo', 'data_cadastro')
    list_filter = ('ativo', 'area__empresa', 'area', 'usuario_responsavel')
    search_fields = ('nome', 'area__nome', 'area__empresa__nome',
                     'usuario_responsavel__username')
    fieldsets = (
        (None, {
            'fields': ('area', 'nome', 'ativo', 'usuario_responsavel')
        }),
    )


@admin.register(SubSetor)
class SubSetorAdmin(admin.ModelAdmin):
    list_display = ('nome', 'setor', 'usuario_responsavel',
                    'ativo', 'data_cadastro')
    list_filter = ('ativo', 'setor__area__empresa',
                   'setor__area', 'setor', 'usuario_responsavel')
    search_fields = ('nome', 'setor__nome', 'setor__area__nome',
                     'setor__area__empresa__nome', 'usuario_responsavel__username')
    fieldsets = (
        (None, {
            'fields': ('setor', 'nome', 'ativo', 'usuario_responsavel')
        }),
    )

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\organizacao\apps.py

from django.apps import AppConfig


class OrganizacaoConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'organizacao'

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\organizacao\models.py

# organizacao/models.py

from django.db import models
from django.conf import settings


class Empresa(models.Model):
    nome = models.CharField(max_length=100, unique=True,
                            verbose_name="Nome da Empresa")
    cnpj = models.CharField(max_length=18, unique=True,
                            null=True, blank=True, verbose_name="CNPJ")
    endereco = models.CharField(
        max_length=255, null=True, blank=True, verbose_name="Endereço")
    ativo = models.BooleanField(default=True, verbose_name="Ativo")
    data_cadastro = models.DateTimeField(
        auto_now_add=True, verbose_name="Data de Cadastro")
    data_atualizacao = models.DateTimeField(
        auto_now=True, verbose_name="Última Atualização")
    # Novo campo para o responsável
    usuario_responsavel = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        verbose_name="Usuário Responsável",
        related_name='empresas_responsavel'
    )

    class Meta:
        verbose_name = "Empresa"
        verbose_name_plural = "Empresas"
        ordering = ['nome']

    def __str__(self):
        return self.nome


class Area(models.Model):
    empresa = models.ForeignKey(
        Empresa, on_delete=models.CASCADE, verbose_name="Empresa")
    nome = models.CharField(max_length=100, verbose_name="Nome da Área")
    ativo = models.BooleanField(default=True, verbose_name="Ativo")
    data_cadastro = models.DateTimeField(
        auto_now_add=True, verbose_name="Data de Cadastro")
    data_atualizacao = models.DateTimeField(
        auto_now=True, verbose_name="Última Atualização")
    # Novo campo para o responsável
    usuario_responsavel = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        verbose_name="Usuário Responsável",
        related_name='areas_responsavel'
    )

    class Meta:
        verbose_name = "Área"
        verbose_name_plural = "Áreas"
        unique_together = ('empresa', 'nome')
        ordering = ['empresa__nome', 'nome']

    def __str__(self):
        return f"{self.nome} ({self.empresa.nome})"


class Setor(models.Model):
    area = models.ForeignKey(
        Area, on_delete=models.CASCADE, verbose_name="Área")
    nome = models.CharField(max_length=100, verbose_name="Nome do Setor")
    ativo = models.BooleanField(default=True, verbose_name="Ativo")
    data_cadastro = models.DateTimeField(
        auto_now_add=True, verbose_name="Data de Cadastro")
    data_atualizacao = models.DateTimeField(
        auto_now=True, verbose_name="Última Atualização")
    # Novo campo para o responsável
    usuario_responsavel = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        verbose_name="Usuário Responsável",
        related_name='setores_responsavel'
    )

    class Meta:
        verbose_name = "Setor"
        verbose_name_plural = "Setores"
        unique_together = ('area', 'nome')
        ordering = ['area__empresa__nome', 'area__nome', 'nome']

    def __str__(self):
        return f"{self.nome} ({self.area.nome} - {self.area.empresa.nome})"


class SubSetor(models.Model):
    setor = models.ForeignKey(
        Setor, on_delete=models.CASCADE, verbose_name="Setor")
    nome = models.CharField(max_length=100, verbose_name="Nome do Subsetor")
    ativo = models.BooleanField(default=True, verbose_name="Ativo")
    data_cadastro = models.DateTimeField(
        auto_now_add=True, verbose_name="Data de Cadastro")
    data_atualizacao = models.DateTimeField(
        auto_now=True, verbose_name="Última Atualização")
    # Novo campo para o responsável
    usuario_responsavel = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        verbose_name="Usuário Responsável",
        related_name='subsetores_responsavel'
    )

    class Meta:
        verbose_name = "Subsetor"
        verbose_name_plural = "Subsetores"
        unique_together = ('setor', 'nome')
        ordering = ['setor__area__empresa__nome',
                    'setor__area__nome', 'setor__nome', 'nome']

    def __str__(self):
        return f"{self.nome} ({self.setor.nome} - {self.setor.area.nome})"

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\organizacao\tests.py

from django.test import TestCase

# Create your tests here.

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\organizacao\urls.py

# organizacao/urls.py

from django.urls import path
from . import views

app_name = 'organizacao'

urlpatterns = [
    # URLs para Empresas
    path('empresas/', views.lista_empresas, name='lista_empresas'),
    path('empresas/criar/', views.criar_empresa, name='criar_empresa'),
    path('empresas/<int:pk>/editar/', views.editar_empresa, name='editar_empresa'),
    path('empresas/<int:pk>/deletar/', views.deletar_empresa, name='deletar_empresa'),

    # URLs para Áreas
    path('areas/', views.lista_areas, name='lista_areas'),
    path('areas/criar/', views.criar_area, name='criar_area'),
    path('areas/<int:pk>/editar/', views.editar_area, name='editar_area'),
    path('areas/<int:pk>/deletar/', views.deletar_area, name='deletar_area'),

    # URLs para Setores
    path('setores/', views.lista_setores, name='lista_setores'),
    path('setores/criar/', views.criar_setor, name='criar_setor'),
    path('setores/<int:pk>/editar/', views.editar_setor, name='editar_setor'),
    path('setores/<int:pk>/deletar/', views.deletar_setor, name='deletar_setor'),

    # URLs para Subsetores
    path('subsetores/', views.lista_subsetores, name='lista_subsetores'),
    path('subsetores/criar/', views.criar_subsetor, name='criar_subsetor'),
    path('subsetores/<int:pk>/editar/', views.editar_subsetor, name='editar_subsetor'),
    path('subsetores/<int:pk>/deletar/', views.deletar_subsetor, name='deletar_subsetor'),
]
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\organizacao\views.py

# organizacao/views.py

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.core.paginator import Paginator
from django.db.models import Q
from .models import Empresa, Area, Setor, SubSetor
from usuarios.models import Usuario

# ============================================================================
# VIEWS PARA EMPRESAS
# ============================================================================

@login_required
def lista_empresas(request):
    """Lista todas as empresas."""
    search = request.GET.get('search', '')
    empresas = Empresa.objects.all()
    if search:
        empresas = empresas.filter(Q(nome__icontains=search) | Q(cnpj__icontains=search))
    
    paginator = Paginator(empresas, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    context = {
        'page_obj': page_obj,
        'search': search,
        'title': 'Empresas',
        'singular': 'Empresa',
        'button_text': 'Nova Empresa',
        'create_url': 'organizacao:criar_empresa',
        'artigo': 'a',
        'empty_message': 'Nenhuma empresa cadastrada.',
        'empty_subtitle': 'Comece criando a primeira empresa.'
    }
    return render(request, 'organizacao/empresas/lista.html', context)

@login_required
def criar_empresa(request):
    """Cria uma nova empresa."""
    if request.method == 'POST':
        nome = request.POST.get('nome')
        if nome:
            try:
                Empresa.objects.create(
                    nome=nome,
                    cnpj=request.POST.get('cnpj'),
                    endereco=request.POST.get('endereco'),
                    ativo=request.POST.get('ativo') == 'on',
                    usuario_responsavel_id=request.POST.get('usuario_responsavel') or None
                )
                messages.success(request, 'Empresa criada com sucesso!')
                return redirect('organizacao:lista_empresas')
            except Exception as e:
                messages.error(request, f'Erro ao criar empresa: {e}')
        else:
            messages.error(request, 'O nome da empresa é obrigatório.')
    
    context = {
        'title': 'Criar Empresa',
        'back_url': 'organizacao:lista_empresas',
        'usuarios': Usuario.objects.filter(is_active=True)
    }
    return render(request, 'organizacao/empresas/form.html', context)

@login_required
def editar_empresa(request, pk):
    """Edita uma empresa existente."""
    empresa = get_object_or_404(Empresa, pk=pk)
    if request.method == 'POST':
        nome = request.POST.get('nome')
        if nome:
            try:
                empresa.nome = nome
                empresa.cnpj = request.POST.get('cnpj')
                empresa.endereco = request.POST.get('endereco')
                empresa.ativo = request.POST.get('ativo') == 'on'
                empresa.usuario_responsavel_id = request.POST.get('usuario_responsavel') or None
                empresa.save()
                messages.success(request, 'Empresa atualizada com sucesso!')
                return redirect('organizacao:lista_empresas')
            except Exception as e:
                messages.error(request, f'Erro ao atualizar empresa: {e}')
        else:
            messages.error(request, 'O nome da empresa é obrigatório.')
            
    context = {
        'object': empresa,
        'title': 'Editar Empresa',
        'back_url': 'organizacao:lista_empresas',
        'usuarios': Usuario.objects.filter(is_active=True)
    }
    return render(request, 'organizacao/empresas/form.html', context)

@login_required
def deletar_empresa(request, pk):
    """Deleta uma empresa."""
    empresa = get_object_or_404(Empresa, pk=pk)
    if request.method == 'POST':
        try:
            empresa.delete()
            messages.success(request, 'Empresa deletada com sucesso!')
        except Exception as e:
            messages.error(request, f'Erro ao deletar empresa: {e}')
        return redirect('organizacao:lista_empresas')
    
    context = {'object': empresa, 'title': 'Empresa'}
    return render(request, 'auditorias/deletar_generico.html', context)

# ============================================================================
# VIEWS PARA ÁREAS
# ============================================================================

@login_required
def lista_areas(request):
    """Lista todas as áreas."""
    search = request.GET.get('search', '')
    areas = Area.objects.select_related('empresa').all()
    if search:
        areas = areas.filter(Q(nome__icontains=search) | Q(empresa__nome__icontains=search))
    
    paginator = Paginator(areas, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    context = {
        'page_obj': page_obj,
        'search': search,
        'title': 'Áreas',
        'singular': 'Área',
        'button_text': 'Nova Área',
        'create_url': 'organizacao:criar_area',
        'artigo': 'a',
        'empty_message': 'Nenhuma área cadastrada.',
        'empty_subtitle': 'Comece criando a primeira área.'
    }
    return render(request, 'organizacao/areas/lista.html', context)

@login_required
def criar_area(request):
    """Cria uma nova área."""
    if request.method == 'POST':
        nome = request.POST.get('nome')
        empresa_id = request.POST.get('empresa')
        if nome and empresa_id:
            try:
                Area.objects.create(
                    nome=nome,
                    empresa_id=empresa_id,
                    ativo=request.POST.get('ativo') == 'on',
                    usuario_responsavel_id=request.POST.get('usuario_responsavel') or None
                )
                messages.success(request, 'Área criada com sucesso!')
                return redirect('organizacao:lista_areas')
            except Exception as e:
                messages.error(request, f'Erro ao criar área: {e}')
        else:
            messages.error(request, 'Nome e Empresa são obrigatórios.')
    
    context = {
        'title': 'Criar Área',
        'back_url': 'organizacao:lista_areas',
        'empresas': Empresa.objects.filter(ativo=True),
        'usuarios': Usuario.objects.filter(is_active=True)
    }
    return render(request, 'organizacao/areas/form.html', context)

@login_required
def editar_area(request, pk):
    """Edita uma área existente."""
    area = get_object_or_404(Area, pk=pk)
    if request.method == 'POST':
        nome = request.POST.get('nome')
        empresa_id = request.POST.get('empresa')
        if nome and empresa_id:
            try:
                area.nome = nome
                area.empresa_id = empresa_id
                area.ativo = request.POST.get('ativo') == 'on'
                area.usuario_responsavel_id = request.POST.get('usuario_responsavel') or None
                area.save()
                messages.success(request, 'Área atualizada com sucesso!')
                return redirect('organizacao:lista_areas')
            except Exception as e:
                messages.error(request, f'Erro ao atualizar área: {e}')
        else:
            messages.error(request, 'Nome e Empresa são obrigatórios.')
            
    context = {
        'object': area,
        'title': 'Editar Área',
        'back_url': 'organizacao:lista_areas',
        'empresas': Empresa.objects.filter(ativo=True),
        'usuarios': Usuario.objects.filter(is_active=True)
    }
    return render(request, 'organizacao/areas/form.html', context)

@login_required
def deletar_area(request, pk):
    """Deleta uma área."""
    area = get_object_or_404(Area, pk=pk)
    if request.method == 'POST':
        try:
            area.delete()
            messages.success(request, 'Área deletada com sucesso!')
        except Exception as e:
            messages.error(request, f'Erro ao deletar área: {e}')
        return redirect('organizacao:lista_areas')
    
    context = {'object': area, 'title': 'Área'}
    return render(request, 'auditorias/deletar_generico.html', context)

# ============================================================================
# VIEWS PARA SETORES
# ============================================================================

@login_required
def lista_setores(request):
    """Lista todos os setores."""
    search = request.GET.get('search', '')
    setores = Setor.objects.select_related('area__empresa').all()
    if search:
        setores = setores.filter(Q(nome__icontains=search) | Q(area__nome__icontains=search) | Q(area__empresa__nome__icontains=search))
    
    paginator = Paginator(setores, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    context = {
        'page_obj': page_obj,
        'search': search,
        'title': 'Setores',
        'singular': 'Setor',
        'button_text': 'Novo Setor',
        'create_url': 'organizacao:criar_setor',
        'artigo': 'o',
        'empty_message': 'Nenhum setor cadastrado.',
        'empty_subtitle': 'Comece criando o primeiro setor.'
    }
    return render(request, 'organizacao/setores/lista.html', context)

@login_required
def criar_setor(request):
    """Cria um novo setor."""
    if request.method == 'POST':
        nome = request.POST.get('nome')
        area_id = request.POST.get('area')
        if nome and area_id:
            try:
                Setor.objects.create(
                    nome=nome,
                    area_id=area_id,
                    ativo=request.POST.get('ativo') == 'on',
                    usuario_responsavel_id=request.POST.get('usuario_responsavel') or None
                )
                messages.success(request, 'Setor criado com sucesso!')
                return redirect('organizacao:lista_setores')
            except Exception as e:
                messages.error(request, f'Erro ao criar setor: {e}')
        else:
            messages.error(request, 'Nome e Área são obrigatórios.')
    
    context = {
        'title': 'Criar Setor',
        'back_url': 'organizacao:lista_setores',
        'areas': Area.objects.filter(ativo=True),
        'usuarios': Usuario.objects.filter(is_active=True)
    }
    return render(request, 'organizacao/setores/form.html', context)

@login_required
def editar_setor(request, pk):
    """Edita um setor existente."""
    setor = get_object_or_404(Setor, pk=pk)
    if request.method == 'POST':
        nome = request.POST.get('nome')
        area_id = request.POST.get('area')
        if nome and area_id:
            try:
                setor.nome = nome
                setor.area_id = area_id
                setor.ativo = request.POST.get('ativo') == 'on'
                setor.usuario_responsavel_id = request.POST.get('usuario_responsavel') or None
                setor.save()
                messages.success(request, 'Setor atualizado com sucesso!')
                return redirect('organizacao:lista_setores')
            except Exception as e:
                messages.error(request, f'Erro ao atualizar setor: {e}')
        else:
            messages.error(request, 'Nome e Área são obrigatórios.')
            
    context = {
        'object': setor,
        'title': 'Editar Setor',
        'back_url': 'organizacao:lista_setores',
        'areas': Area.objects.filter(ativo=True),
        'usuarios': Usuario.objects.filter(is_active=True)
    }
    return render(request, 'organizacao/setores/form.html', context)

@login_required
def deletar_setor(request, pk):
    """Deleta um setor."""
    setor = get_object_or_404(Setor, pk=pk)
    if request.method == 'POST':
        try:
            setor.delete()
            messages.success(request, 'Setor deletado com sucesso!')
        except Exception as e:
            messages.error(request, f'Erro ao deletar setor: {e}')
        return redirect('organizacao:lista_setores')
    
    context = {'object': setor, 'title': 'Setor'}
    return render(request, 'auditorias/deletar_generico.html', context)

# ============================================================================
# VIEWS PARA SUBSETORES
# ============================================================================

@login_required
def lista_subsetores(request):
    """Lista todos os subsetores."""
    search = request.GET.get('search', '')
    subsetores = SubSetor.objects.select_related('setor__area__empresa').all()
    if search:
        subsetores = subsetores.filter(Q(nome__icontains=search) | Q(setor__nome__icontains=search) | Q(setor__area__nome__icontains=search))
    
    paginator = Paginator(subsetores, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    context = {
        'page_obj': page_obj,
        'search': search,
        'title': 'Subsetores',
        'singular': 'Subsetor',
        'button_text': 'Novo Subsetor',
        'create_url': 'organizacao:criar_subsetor',
        'artigo': 'o',
        'empty_message': 'Nenhum subsetor cadastrado.',
        'empty_subtitle': 'Comece criando o primeiro subsetor.'
    }
    return render(request, 'organizacao/subsetores/lista.html', context)

@login_required
def criar_subsetor(request):
    """Cria um novo subsetor."""
    if request.method == 'POST':
        nome = request.POST.get('nome')
        setor_id = request.POST.get('setor')
        if nome and setor_id:
            try:
                SubSetor.objects.create(
                    nome=nome,
                    setor_id=setor_id,
                    ativo=request.POST.get('ativo') == 'on',
                    usuario_responsavel_id=request.POST.get('usuario_responsavel') or None
                )
                messages.success(request, 'Subsetor criado com sucesso!')
                return redirect('organizacao:lista_subsetores')
            except Exception as e:
                messages.error(request, f'Erro ao criar subsetor: {e}')
        else:
            messages.error(request, 'Nome e Setor são obrigatórios.')
    
    context = {
        'title': 'Criar Subsetor',
        'back_url': 'organizacao:lista_subsetores',
        'setores': Setor.objects.filter(ativo=True),
        'usuarios': Usuario.objects.filter(is_active=True)
    }
    return render(request, 'organizacao/subsetores/form.html', context)

@login_required
def editar_subsetor(request, pk):
    """Edita um subsetor existente."""
    subsetor = get_object_or_404(SubSetor, pk=pk)
    if request.method == 'POST':
        nome = request.POST.get('nome')
        setor_id = request.POST.get('setor')
        if nome and setor_id:
            try:
                subsetor.nome = nome
                subsetor.setor_id = setor_id
                subsetor.ativo = request.POST.get('ativo') == 'on'
                subsetor.usuario_responsavel_id = request.POST.get('usuario_responsavel') or None
                subsetor.save()
                messages.success(request, 'Subsetor atualizado com sucesso!')
                return redirect('organizacao:lista_subsetores')
            except Exception as e:
                messages.error(request, f'Erro ao atualizar subsetor: {e}')
        else:
            messages.error(request, 'Nome e Setor são obrigatórios.')
            
    context = {
        'object': subsetor,
        'title': 'Editar Subsetor',
        'back_url': 'organizacao:lista_subsetores',
        'setores': Setor.objects.filter(ativo=True),
        'usuarios': Usuario.objects.filter(is_active=True)
    }
    return render(request, 'organizacao/subsetores/form.html', context)

@login_required
def deletar_subsetor(request, pk):
    """Deleta um subsetor."""
    subsetor = get_object_or_404(SubSetor, pk=pk)
    if request.method == 'POST':
        try:
            subsetor.delete()
            messages.success(request, 'Subsetor deletado com sucesso!')
        except Exception as e:
            messages.error(request, f'Erro ao deletar subsetor: {e}')
        return redirect('organizacao:lista_subsetores')
    
    context = {'object': subsetor, 'title': 'Subsetor'}
    return render(request, 'auditorias/deletar_generico.html', context)
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\organizacao\__init__.py


_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\organizacao\migrations\0001_initial.py

# Generated by Django 5.2.4 on 2025-07-25 19:47

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Empresa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, unique=True, verbose_name='Nome da Empresa')),
                ('cnpj', models.CharField(blank=True, max_length=18, null=True, unique=True, verbose_name='CNPJ')),
                ('endereco', models.CharField(blank=True, max_length=255, null=True, verbose_name='Endereço')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
            ],
            options={
                'verbose_name': 'Empresa',
                'verbose_name_plural': 'Empresas',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome da Área')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('empresa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organizacao.empresa', verbose_name='Empresa')),
            ],
            options={
                'verbose_name': 'Área',
                'verbose_name_plural': 'Áreas',
                'ordering': ['empresa__nome', 'nome'],
                'unique_together': {('empresa', 'nome')},
            },
        ),
        migrations.CreateModel(
            name='Setor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome do Setor')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organizacao.area', verbose_name='Área')),
            ],
            options={
                'verbose_name': 'Setor',
                'verbose_name_plural': 'Setores',
                'ordering': ['area__empresa__nome', 'area__nome', 'nome'],
                'unique_together': {('area', 'nome')},
            },
        ),
        migrations.CreateModel(
            name='SubSetor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome do Subsetor')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('setor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organizacao.setor', verbose_name='Setor')),
            ],
            options={
                'verbose_name': 'Subsetor',
                'verbose_name_plural': 'Subsetores',
                'ordering': ['setor__area__empresa__nome', 'setor__area__nome', 'setor__nome', 'nome'],
                'unique_together': {('setor', 'nome')},
            },
        ),
    ]

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\organizacao\migrations\0002_area_usuario_responsavel_empresa_usuario_responsavel_and_more.py

# Generated by Django 5.2.4 on 2025-09-02 15:12

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('organizacao', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='area',
            name='usuario_responsavel',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='areas_responsavel', to=settings.AUTH_USER_MODEL, verbose_name='Usuário Responsável'),
        ),
        migrations.AddField(
            model_name='empresa',
            name='usuario_responsavel',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='empresas_responsavel', to=settings.AUTH_USER_MODEL, verbose_name='Usuário Responsável'),
        ),
        migrations.AddField(
            model_name='setor',
            name='usuario_responsavel',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='setores_responsavel', to=settings.AUTH_USER_MODEL, verbose_name='Usuário Responsável'),
        ),
        migrations.AddField(
            model_name='subsetor',
            name='usuario_responsavel',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subsetores_responsavel', to=settings.AUTH_USER_MODEL, verbose_name='Usuário Responsável'),
        ),
    ]

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\organizacao\migrations\__init__.py


_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\organizacao\templates\organizacao\areas\form.html

{% extends 'auditorias/form_generico.html' %}

{% block form_content %}
<div class="form-row single">
    <div class="form-group required">
        <label for="empresa" class="form-label">Empresa</label>
        <select id="empresa" name="empresa" class="form-control form-select" required>
            <option value="">Selecione...</option>
            {% for empresa in empresas %}
            <option value="{{ empresa.pk }}" {% if object.empresa.pk == empresa.pk %}selected{% endif %}>{{ empresa.nome }}</option>
            {% endfor %}
        </select>
    </div>
</div>
<div class="form-row single">
    <div class="form-group required">
        <label for="nome" class="form-label">Nome da Área</label>
        <input type="text" id="nome" name="nome" class="form-control" value="{{ object.nome|default:'' }}" required maxlength="100">
    </div>
</div>
<div class="form-row">
    <div class="form-group">
        <label for="usuario_responsavel" class="form-label">Responsável</label>
        <select id="usuario_responsavel" name="usuario_responsavel" class="form-control form-select">
            <option value="">Selecione...</option>
            {% for usuario in usuarios %}
            <option value="{{ usuario.pk }}" {% if object.usuario_responsavel.pk == usuario.pk %}selected{% endif %}>{{ usuario.get_full_name|default:usuario.username }}</option>
            {% endfor %}
        </select>
    </div>
</div>
<div class="form-row single">
    <div class="form-group">
        <label class="form-label">Status</label>
        <div style="display: flex; align-items: center; gap: 12px;">
            <label class="toggle-switch">
                <input type="checkbox" name="ativo" {% if object.ativo|default:True %}checked{% endif %}>
                <span class="toggle-slider"></span>
            </label>
            <span style="color: var(--text-secondary); font-size: 14px;">Área ativa no sistema</span>
        </div>
    </div>
</div>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\organizacao\templates\organizacao\areas\lista.html

{% extends 'auditorias/lista_generica.html' %}

{% block table_headers %}
    <th>Nome da Área</th>
    <th>Empresa</th>
    <th>Responsável</th>
    <th>Status</th>
    <th style="width: 120px;">Ações</th>
{% endblock %}

{% block table_row %}
    <td>
        <div style="font-weight: 600; color: var(--text-primary);">
            {{ object.nome }}
        </div>
    </td>
    <td>{{ object.empresa.nome|default:"—" }}</td>
    <td>{{ object.usuario_responsavel.get_full_name|default:object.usuario_responsavel.username|default:"—" }}</td>
    <td>
        {% if object.ativo %}
            <span class="badge badge-success"><i class="fas fa-check-circle"></i> Ativo</span>
        {% else %}
            <span class="badge badge-error"><i class="fas fa-times-circle"></i> Inativo</span>
        {% endif %}
    </td>
    <td>
        <div class="action-buttons">
            <a href="{% url 'organizacao:editar_area' object.pk %}" class="btn btn-secondary btn-icon" title="Editar Área">
                <i class="fas fa-edit"></i>
            </a>
            <button type="button" class="btn btn-danger btn-icon" title="Deletar Área"
                    onclick="confirmDelete('{% url 'organizacao:deletar_area' object.pk %}', '{{ object.nome }}')">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    </td>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\organizacao\templates\organizacao\empresas\form.html

{% extends 'auditorias/form_generico.html' %}

{% block form_content %}
<div class="form-row single">
    <div class="form-group required">
        <label for="nome" class="form-label">Nome da Empresa</label>
        <input type="text" id="nome" name="nome" class="form-control" value="{{ object.nome|default:'' }}" required maxlength="100">
    </div>
</div>
<div class="form-row">
    <div class="form-group">
        <label for="cnpj" class="form-label">CNPJ</label>
        <input type="text" id="cnpj" name="cnpj" class="form-control" value="{{ object.cnpj|default:'' }}" maxlength="18">
    </div>
    <div class="form-group">
        <label for="endereco" class="form-label">Endereço</label>
        <input type="text" id="endereco" name="endereco" class="form-control" value="{{ object.endereco|default:'' }}" maxlength="255">
    </div>
</div>
<div class="form-row">
    <div class="form-group">
        <label for="usuario_responsavel" class="form-label">Responsável</label>
        <select id="usuario_responsavel" name="usuario_responsavel" class="form-control form-select">
            <option value="">Selecione...</option>
            {% for usuario in usuarios %}
            <option value="{{ usuario.pk }}" {% if object.usuario_responsavel.pk == usuario.pk %}selected{% endif %}>{{ usuario.get_full_name|default:usuario.username }}</option>
            {% endfor %}
        </select>
    </div>
</div>
<div class="form-row single">
    <div class="form-group">
        <label class="form-label">Status</label>
        <div style="display: flex; align-items: center; gap: 12px;">
            <label class="toggle-switch">
                <input type="checkbox" name="ativo" {% if object.ativo|default:True %}checked{% endif %}>
                <span class="toggle-slider"></span>
            </label>
            <span style="color: var(--text-secondary); font-size: 14px;">Empresa ativa no sistema</span>
        </div>
    </div>
</div>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\organizacao\templates\organizacao\empresas\lista.html

{% extends 'auditorias/lista_generica.html' %}

{% block table_headers %}
    <th>Nome da Empresa</th>
    <th>CNPJ</th>
    <th>Responsável</th>
    <th>Status</th>
    <th style="width: 120px;">Ações</th>
{% endblock %}

{% block table_row %}
    <td>
        <div style="font-weight: 600; color: var(--text-primary);">
            {{ object.nome }}
        </div>
    </td>
    <td>{{ object.cnpj|default:"—" }}</td>
    <td>{{ object.usuario_responsavel.get_full_name|default:object.usuario_responsavel.username|default:"—" }}</td>
    <td>
        {% if object.ativo %}
            <span class="badge badge-success"><i class="fas fa-check-circle"></i> Ativo</span>
        {% else %}
            <span class="badge badge-error"><i class="fas fa-times-circle"></i> Inativo</span>
        {% endif %}
    </td>
    <td>
        <div class="action-buttons">
            <a href="{% url 'organizacao:editar_empresa' object.pk %}" class="btn btn-secondary btn-icon" title="Editar Empresa">
                <i class="fas fa-edit"></i>
            </a>
            <button type="button" class="btn btn-danger btn-icon" title="Deletar Empresa"
                    onclick="confirmDelete('{% url 'organizacao:deletar_empresa' object.pk %}', '{{ object.nome }}')">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    </td>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\organizacao\templates\organizacao\setores\form.html

{% extends 'auditorias/form_generico.html' %}

{% block form_content %}
<div class="form-row single">
    <div class="form-group required">
        <label for="area" class="form-label">Área</label>
        <select id="area" name="area" class="form-control form-select" required>
            <option value="">Selecione...</option>
            {% for area in areas %}
            <option value="{{ area.pk }}" {% if object.area.pk == area.pk %}selected{% endif %}>{{ area.nome }} ({{ area.empresa.nome }})</option>
            {% endfor %}
        </select>
    </div>
</div>
<div class="form-row single">
    <div class="form-group required">
        <label for="nome" class="form-label">Nome do Setor</label>
        <input type="text" id="nome" name="nome" class="form-control" value="{{ object.nome|default:'' }}" required maxlength="100">
    </div>
</div>
<div class="form-row">
    <div class="form-group">
        <label for="usuario_responsavel" class="form-label">Responsável</label>
        <select id="usuario_responsavel" name="usuario_responsavel" class="form-control form-select">
            <option value="">Selecione...</option>
            {% for usuario in usuarios %}
            <option value="{{ usuario.pk }}" {% if object.usuario_responsavel.pk == usuario.pk %}selected{% endif %}>{{ usuario.get_full_name|default:usuario.username }}</option>
            {% endfor %}
        </select>
    </div>
</div>
<div class="form-row single">
    <div class="form-group">
        <label class="form-label">Status</label>
        <div style="display: flex; align-items: center; gap: 12px;">
            <label class="toggle-switch">
                <input type="checkbox" name="ativo" {% if object.ativo|default:True %}checked{% endif %}>
                <span class="toggle-slider"></span>
            </label>
            <span style="color: var(--text-secondary); font-size: 14px;">Setor ativo no sistema</span>
        </div>
    </div>
</div>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\organizacao\templates\organizacao\setores\lista.html

{% extends 'auditorias/lista_generica.html' %}

{% block table_headers %}
    <th>Nome do Setor</th>
    <th>Área</th>
    <th>Empresa</th>
    <th>Responsável</th>
    <th>Status</th>
    <th style="width: 120px;">Ações</th>
{% endblock %}

{% block table_row %}
    <td>
        <div style="font-weight: 600; color: var(--text-primary);">
            {{ object.nome }}
        </div>
    </td>
    <td>{{ object.area.nome|default:"—" }}</td>
    <td>{{ object.area.empresa.nome|default:"—" }}</td>
    <td>{{ object.usuario_responsavel.get_full_name|default:object.usuario_responsavel.username|default:"—" }}</td>
    <td>
        {% if object.ativo %}
            <span class="badge badge-success"><i class="fas fa-check-circle"></i> Ativo</span>
        {% else %}
            <span class="badge badge-error"><i class="fas fa-times-circle"></i> Inativo</span>
        {% endif %}
    </td>
    <td>
        <div class="action-buttons">
            <a href="{% url 'organizacao:editar_setor' object.pk %}" class="btn btn-secondary btn-icon" title="Editar Setor">
                <i class="fas fa-edit"></i>
            </a>
            <button type="button" class="btn btn-danger btn-icon" title="Deletar Setor"
                    onclick="confirmDelete('{% url 'organizacao:deletar_setor' object.pk %}', '{{ object.nome }}')">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    </td>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\organizacao\templates\organizacao\subsetores\form.html

{% extends 'auditorias/form_generico.html' %}

{% block form_content %}
<div class="form-row single">
    <div class="form-group required">
        <label for="setor" class="form-label">Setor</label>
        <select id="setor" name="setor" class="form-control form-select" required>
            <option value="">Selecione...</option>
            {% for setor in setores %}
            <option value="{{ setor.pk }}" {% if object.setor.pk == setor.pk %}selected{% endif %}>{{ setor.nome }} ({{ setor.area.nome }})</option>
            {% endfor %}
        </select>
    </div>
</div>
<div class="form-row single">
    <div class="form-group required">
        <label for="nome" class="form-label">Nome do Subsetor</label>
        <input type="text" id="nome" name="nome" class="form-control" value="{{ object.nome|default:'' }}" required maxlength="100">
    </div>
</div>
<div class="form-row">
    <div class="form-group">
        <label for="usuario_responsavel" class="form-label">Responsável</label>
        <select id="usuario_responsavel" name="usuario_responsavel" class="form-control form-select">
            <option value="">Selecione...</option>
            {% for usuario in usuarios %}
            <option value="{{ usuario.pk }}" {% if object.usuario_responsavel.pk == usuario.pk %}selected{% endif %}>{{ usuario.get_full_name|default:usuario.username }}</option>
            {% endfor %}
        </select>
    </div>
</div>
<div class="form-row single">
    <div class="form-group">
        <label class="form-label">Status</label>
        <div style="display: flex; align-items: center; gap: 12px;">
            <label class="toggle-switch">
                <input type="checkbox" name="ativo" {% if object.ativo|default:True %}checked{% endif %}>
                <span class="toggle-slider"></span>
            </label>
            <span style="color: var(--text-secondary); font-size: 14px;">Subsetor ativo no sistema</span>
        </div>
    </div>
</div>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\organizacao\templates\organizacao\subsetores\lista.html

{% extends 'auditorias/lista_generica.html' %}

{% block table_headers %}
    <th>Nome do Subsetor</th>
    <th>Setor</th>
    <th>Área</th>
    <th>Responsável</th>
    <th>Status</th>
    <th style="width: 120px;">Ações</th>
{% endblock %}

{% block table_row %}
    <td>
        <div style="font-weight: 600; color: var(--text-primary);">
            {{ object.nome }}
        </div>
    </td>
    <td>{{ object.setor.nome|default:"—" }}</td>
    <td>{{ object.setor.area.nome|default:"—" }}</td>
    <td>{{ object.usuario_responsavel.get_full_name|default:object.usuario_responsavel.username|default:"—" }}</td>
    <td>
        {% if object.ativo %}
            <span class="badge badge-success"><i class="fas fa-check-circle"></i> Ativo</span>
        {% else %}
            <span class="badge badge-error"><i class="fas fa-times-circle"></i> Inativo</span>
        {% endif %}
    </td>
    <td>
        <div class="action-buttons">
            <a href="{% url 'organizacao:editar_subsetor' object.pk %}" class="btn btn-secondary btn-icon" title="Editar Subsetor">
                <i class="fas fa-edit"></i>
            </a>
            <button type="button" class="btn btn-danger btn-icon" title="Deletar Subsetor"
                    onclick="confirmDelete('{% url 'organizacao:deletar_subsetor' object.pk %}', '{{ object.nome }}')">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    </td>
{% endblock %}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\planos_de_acao\admin.py

# planos_de_acao/admin.py

from django.contrib import admin
from .models import (
    ResponsavelLocal,
    NaoConformidade,
    Forum,
    MensagemForum
)


@admin.register(ResponsavelLocal)
class ResponsavelLocalAdmin(admin.ModelAdmin):
    list_display = ('usuario', 'local_empresa', 'local_area',
                    'local_setor', 'local_subsetor')
    search_fields = ('usuario__username',
                     'local_empresa__nome', 'local_area__nome')
    fieldsets = (
        (None, {
            'fields': ('usuario', 'local_empresa', 'local_area', 'local_setor', 'local_subsetor')
        }),
    )


@admin.register(NaoConformidade)
class NaoConformidadeAdmin(admin.ModelAdmin):
    list_display = (
        'id_nao_conformidade',
        'id_formulario',
        'titulo',
        'responsavel_acao',
        'data_abertura',
        'data_encerramento',
        'criticidade',
        'local_setor'  # Exibe o setor como exemplo de local
    )
    list_filter = ('criticidade', 'data_abertura', 'responsavel_acao')
    search_fields = ('id_nao_conformidade', 'titulo__descricao')
    filter_horizontal = ('ferramentas_auxiliares',)
    readonly_fields = ('data_abertura', 'data_encerramento',
                       'id_nao_conformidade')
    fieldsets = (
        ("Identificação", {
            'fields': ('id_nao_conformidade', 'id_formulario', 'titulo', 'descricao_desvio')
        }),
        ("Responsabilidade e Ação", {
            'fields': ('responsavel_acao', 'acao_corretiva', 'prazo_conclusao', 'criticidade')
        }),
        ("Detalhes da Auditoria", {
            'fields': ('ferramenta', 'categoria', 'local_empresa', 'local_area', 'local_setor', 'local_subsetor')
        }),
        ("Análise e Suporte", {
            'fields': ('analise', 'ferramentas_auxiliares', 'forum')
        }),
        ("Datas", {
            'fields': ('data_abertura', 'data_encerramento')
        })
    )

# Registro dos modelos de fórum (opcional, mas recomendado)


@admin.register(Forum)
class ForumAdmin(admin.ModelAdmin):
    list_display = ('nome', 'data_criacao')


@admin.register(MensagemForum)
class MensagemForumAdmin(admin.ModelAdmin):
    list_display = ('autor', 'forum', 'data_envio')
    list_filter = ('forum', 'autor')

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\planos_de_acao\apps.py

from django.apps import AppConfig


class PlanosDeAcaoConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'planos_de_acao'

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\planos_de_acao\models.py

# planos_de_acao/models.py

from django.db import models
from django.conf import settings
from django.utils import timezone
from datetime import timedelta

from auditorias.models import AuditoriaInstancia, CategoriaAuditoria, FerramentaDigital, FerramentaCausaRaiz, Topico
from organizacao.models import Empresa, Area, Setor, SubSetor

# Definição do modelo de Responsáveis de Plano de Ação por Local


class ResponsavelLocal(models.Model):
    usuario = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        verbose_name="Responsável"
    )
    # Relação com os níveis organizacionais
    local_empresa = models.ForeignKey(
        Empresa, on_delete=models.CASCADE, null=True, blank=True)
    local_area = models.ForeignKey(
        Area, on_delete=models.CASCADE, null=True, blank=True)
    local_setor = models.ForeignKey(
        Setor, on_delete=models.CASCADE, null=True, blank=True)
    local_subsetor = models.ForeignKey(
        SubSetor, on_delete=models.CASCADE, null=True, blank=True)

    class Meta:
        verbose_name = "Responsável por Local"
        verbose_name_plural = "Responsáveis por Local"

    def __str__(self):
        return f"{self.usuario.get_full_name()} - {self.local_empresa or self.local_area or self.local_setor or self.local_subsetor}"

# Modelos para o Fórum/Chat


class Forum(models.Model):
    nome = models.CharField(max_length=255, verbose_name="Título do Fórum")
    data_criacao = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = "Fórum"
        verbose_name_plural = "Fóruns"

    def __str__(self):
        return self.nome


class MensagemForum(models.Model):
    forum = models.ForeignKey(
        Forum, on_delete=models.CASCADE, related_name='mensagens')
    autor = models.ForeignKey(settings.AUTH_USER_MODEL,
                              on_delete=models.SET_NULL, null=True)
    conteudo = models.TextField()
    data_envio = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = "Mensagem de Fórum"
        verbose_name_plural = "Mensagens de Fórum"
        ordering = ['data_envio']

    def __str__(self):
        return f"Mensagem de {self.autor} em {self.data_envio.strftime('%d/%m/%Y %H:%M')}"


# Opções para a Criticidade
CRITICIDADE_CHOICES = [
    ('NC MAIOR', 'Não Conformidade Maior'),
    ('NC MENOR', 'Não Conformidade Menor'),
    ('DESVIO SOLUCIONADO', 'Desvio Solucionado'),
    ('NA', 'N/A'),
]

# Modelo principal para a Não Conformidade / Plano de Ação


class NaoConformidade(models.Model):
    # Campos de identificação
    id_nao_conformidade = models.CharField(
        max_length=50, unique=True, verbose_name="ID Não Conformidade")
    id_formulario = models.ForeignKey(
        AuditoriaInstancia,
        on_delete=models.CASCADE,
        verbose_name="ID do Formulário"
    )
    titulo = models.ForeignKey(
        Topico,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        verbose_name="Título"
    )

    # Campos de Ação
    descricao_desvio = models.TextField(verbose_name="Descrição do Desvio")
    acao_corretiva = models.TextField(
        verbose_name="Ação Corretiva", null=True, blank=True)
    responsavel_acao = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        verbose_name="Responsável pela Ação"
    )
    prazo_conclusao = models.DateField(verbose_name="Prazo de Conclusão")

    # Campos da sua tabela
    perfil_responsavel = models.CharField(
        max_length=100, verbose_name="Perfil")
    forum = models.ForeignKey(
        Forum, on_delete=models.SET_NULL, null=True, blank=True)
    ferramenta = models.ForeignKey(
        FerramentaDigital, on_delete=models.SET_NULL, null=True, blank=True)
    categoria = models.ForeignKey(
        CategoriaAuditoria, on_delete=models.SET_NULL, null=True, blank=True)
    data_abertura = models.DateTimeField(auto_now_add=True)
    data_encerramento = models.DateTimeField(
        verbose_name="Data de Encerramento", null=True, blank=True)

    # Campo para criticidade
    criticidade = models.CharField(
        max_length=20,
        choices=CRITICIDADE_CHOICES,
        null=True, blank=True,
        verbose_name="Criticidade"
    )

    # Relação com o Local
    local_empresa = models.ForeignKey(
        Empresa, on_delete=models.SET_NULL, null=True, blank=True, related_name='nao_conformidades_empresa')
    local_area = models.ForeignKey(Area, on_delete=models.SET_NULL,
                                   null=True, blank=True, related_name='nao_conformidades_area')
    local_setor = models.ForeignKey(
        Setor, on_delete=models.SET_NULL, null=True, blank=True, related_name='nao_conformidades_setor')
    local_subsetor = models.ForeignKey(
        SubSetor, on_delete=models.SET_NULL, null=True, blank=True, related_name='nao_conformidades_subsetor')

    analise = models.TextField(null=True, blank=True, verbose_name="Análise")
    ferramentas_auxiliares = models.ManyToManyField(
        FerramentaCausaRaiz,
        verbose_name="Ferramentas Auxiliares",
        related_name='nao_conformidades',
        blank=True
    )

    class Meta:
        verbose_name = "Não Conformidade"
        verbose_name_plural = "Não Conformidades"
        ordering = ['-data_abertura']

    def __str__(self):
        return f"Não Conformidade {self.id_nao_conformidade}"

    def save(self, *args, **kwargs):
        if not self.data_encerramento:
            self.data_encerramento = self.data_abertura + timedelta(days=7)
        super().save(*args, **kwargs)

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\planos_de_acao\tests.py

from django.test import TestCase

# Create your tests here.

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\planos_de_acao\views.py

from django.shortcuts import render

# Create your views here.

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\planos_de_acao\__init__.py


_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\planos_de_acao\migrations\0001_initial.py

# Generated by Django 5.2.4 on 2025-09-05 18:20

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auditorias', '0010_opcaopergunta_instrucoes_usuario_and_more'),
        ('organizacao', '0002_area_usuario_responsavel_empresa_usuario_responsavel_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Forum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=255, verbose_name='Título do Fórum')),
                ('data_criacao', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Fórum',
                'verbose_name_plural': 'Fóruns',
            },
        ),
        migrations.CreateModel(
            name='MensagemForum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conteudo', models.TextField()),
                ('data_envio', models.DateTimeField(auto_now_add=True)),
                ('autor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('forum', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mensagens', to='planos_de_acao.forum')),
            ],
            options={
                'verbose_name': 'Mensagem de Fórum',
                'verbose_name_plural': 'Mensagens de Fórum',
                'ordering': ['data_envio'],
            },
        ),
        migrations.CreateModel(
            name='NaoConformidade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_nao_conformidade', models.CharField(max_length=50, unique=True, verbose_name='ID Não Conformidade')),
                ('descricao_desvio', models.TextField(verbose_name='Descrição do Desvio')),
                ('acao_corretiva', models.TextField(blank=True, null=True, verbose_name='Ação Corretiva')),
                ('prazo_conclusao', models.DateField(verbose_name='Prazo de Conclusão')),
                ('perfil_responsavel', models.CharField(max_length=100, verbose_name='Perfil')),
                ('data_abertura', models.DateTimeField(auto_now_add=True)),
                ('data_encerramento', models.DateTimeField(blank=True, null=True, verbose_name='Data de Encerramento')),
                ('criticidade', models.CharField(blank=True, choices=[('NC MAIOR', 'Não Conformidade Maior'), ('NC MENOR', 'Não Conformidade Menor'), ('DESVIO SOLUCIONADO', 'Desvio Solucionado'), ('NA', 'N/A')], max_length=20, null=True, verbose_name='Criticidade')),
                ('analise', models.TextField(blank=True, null=True, verbose_name='Análise')),
                ('categoria', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='auditorias.categoriaauditoria')),
                ('ferramenta', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='auditorias.ferramentadigital')),
                ('ferramentas_auxiliares', models.ManyToManyField(blank=True, related_name='nao_conformidades', to='auditorias.ferramentacausaraiz', verbose_name='Ferramentas Auxiliares')),
                ('forum', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planos_de_acao.forum')),
                ('id_formulario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auditorias.auditoriainstancia', verbose_name='ID do Formulário')),
                ('local_area', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nao_conformidades_area', to='organizacao.area')),
                ('local_empresa', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nao_conformidades_empresa', to='organizacao.empresa')),
                ('local_setor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nao_conformidades_setor', to='organizacao.setor')),
                ('local_subsetor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nao_conformidades_subsetor', to='organizacao.subsetor')),
                ('responsavel_acao', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Responsável pela Ação')),
                ('titulo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='auditorias.topico', verbose_name='Título')),
            ],
            options={
                'verbose_name': 'Não Conformidade',
                'verbose_name_plural': 'Não Conformidades',
                'ordering': ['-data_abertura'],
            },
        ),
        migrations.CreateModel(
            name='ResponsavelLocal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('local_area', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='organizacao.area')),
                ('local_empresa', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='organizacao.empresa')),
                ('local_setor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='organizacao.setor')),
                ('local_subsetor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='organizacao.subsetor')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Responsável')),
            ],
            options={
                'verbose_name': 'Responsável por Local',
                'verbose_name_plural': 'Responsáveis por Local',
            },
        ),
    ]

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\planos_de_acao\migrations\__init__.py


_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\static\css\login.css

@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');
        
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

:root {
    --primary: #2563eb;
    --primary-dark: #1d4ed8;
    --primary-light: #3b82f6;
    --secondary: #f8fafc;
    --accent: #059669;
    --error: #dc2626;
    --text-primary: #0f172a;
    --text-secondary: #475569;
    --text-muted: #64748b;
    --border: rgba(255, 255, 255, 0.2);
    --border-focus: #93c5fd;
    --bg-primary: rgba(255, 255, 255, 0.95);
    --bg-secondary: #f1f5f9;
    --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
    --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    --shadow-xl: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    --radius-sm: 8px;
    --radius-md: 12px;
    --radius-lg: 16px;
    --radius-xl: 20px;
}

body {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 15px;
    position: relative;
    overflow-x: hidden;
    background: linear-gradient(135deg, #0f172a 0%, #1e293b 25%, #334155 50%, #475569 75%, #64748b 100%);
}

/* Animated Background Elements */
body::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: 
        radial-gradient(circle at 20% 80%, rgba(37, 99, 235, 0.15) 0%, transparent 50%),
        radial-gradient(circle at 80% 20%, rgba(168, 85, 247, 0.1) 0%, transparent 50%),
        radial-gradient(circle at 40% 40%, rgba(59, 130, 246, 0.12) 0%, transparent 50%),
        radial-gradient(circle at 60% 70%, rgba(139, 92, 246, 0.08) 0%, transparent 50%);
    pointer-events: none;
    z-index: -1;
}

body::after {
    content: '';
    position: fixed;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: 
        linear-gradient(45deg, transparent 30%, rgba(255, 255, 255, 0.02) 50%, transparent 70%),
        linear-gradient(-45deg, transparent 30%, rgba(37, 99, 235, 0.03) 50%, transparent 70%);
    pointer-events: none;
    z-index: -1;
}

/* Floating geometric shapes */
.bg-shape {
    position: fixed;
    border-radius: 50%;
    background: linear-gradient(135deg, rgba(37, 99, 235, 0.1), rgba(168, 85, 247, 0.05));
    animation: float 6s ease-in-out infinite;
    z-index: -1;
}

.bg-shape:nth-child(1) {
    width: 120px;
    height: 120px;
    top: 10%;
    left: 10%;
    animation-delay: 0s;
}

.bg-shape:nth-child(2) {
    width: 80px;
    height: 80px;
    top: 70%;
    right: 15%;
    animation-delay: -2s;
}

.bg-shape:nth-child(3) {
    width: 60px;
    height: 60px;
    bottom: 20%;
    left: 20%;
    animation-delay: -4s;
}

.bg-shape:nth-child(4) {
    width: 100px;
    height: 100px;
    top: 30%;
    right: 25%;
    animation-delay: -1s;
}

.login-container {
    width: 100%;
    max-width: 1000px;
    min-height: 70vh;
    position: relative;
    z-index: 10;
    display: flex;
    background: rgba(255, 255, 255, 0.08);
    backdrop-filter: blur(20px);
    border-radius: var(--radius-xl);
    box-shadow: var(--shadow-xl);
    border: 1px solid rgba(255, 255, 255, 0.1);
    overflow: hidden;
    animation: containerFadeIn 1s ease-out;
}

.welcome-section {
    flex: 1;
    background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
    backdrop-filter: blur(10px);
    padding: 40px 35px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    color: white;
    position: relative;
    overflow: hidden;
    min-height: 100%;
}

.welcome-section::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: 
        radial-gradient(circle at 30% 20%, rgba(255, 255, 255, 0.1) 0%, transparent 60%),
        radial-gradient(circle at 70% 80%, rgba(59, 130, 246, 0.15) 0%, transparent 60%),
        linear-gradient(45deg, transparent 40%, rgba(255, 255, 255, 0.03) 50%, transparent 60%);
    pointer-events: none;
}

.welcome-header-content {
    position: relative;
    z-index: 2;
    flex-shrink: 0;
}

.company-logo {
    width: 60px;
    height: 60px;
    background: rgba(255, 255, 255, 0.12);
    backdrop-filter: blur(10px);
    border-radius: var(--radius-lg);
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 30px;
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
}

.company-logo svg {
    width: 28px;
    height: 28px;
    color: white;
}

.welcome-section h1 {
    font-size: clamp(1.8rem, 4vw, 2.5rem);
    font-weight: 800;
    margin-bottom: 15px;
    letter-spacing: -0.03em;
    line-height: 1.1;
    background: linear-gradient(135deg, #ffffff 0%, #e2e8f0 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

.welcome-section p {
    font-size: clamp(1rem, 2.5vw, 1.1rem);
    opacity: 0.9;
    line-height: 1.6;
    margin-bottom: 30px;
    font-weight: 400;
}

/* Container da imagem do celular */
.mobile-illustration-container {
    position: relative;
    width: 100%;
    flex: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    /* Adicione uma margem negativa para puxar para cima */
    margin-top: -30px; 
    margin-bottom: 20px;
    max-height: 300px;
    overflow: hidden;
}

/* Estilo para a imagem do celular */
.mobile-illustration {
    /* Use 'relative' para que o top e left funcionem em relação ao fluxo normal */
    position: relative; 
    max-width: 80%;
    height: auto;
    max-height: 250px;
    object-fit: contain;
    
    left: -45px; /* Ajuste para mover para a esquerda */
    
    transform: rotate(-10deg);
    opacity: 0.9;
    z-index: 1;
    transition: transform 0.5s ease-in-out;
}

.mobile-illustration:hover {
    transform: scale(1.05) rotate(-10deg);
}

.features-list {
    list-style: none;
    padding: 0;
    margin: 0;
    position: relative;
    z-index: 2;
    flex-shrink: 0;
}

.features-list li {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
    font-size: clamp(0.9rem, 2vw, 1rem);
    opacity: 0.9;
    font-weight: 500;
}

.features-list li::before {
    content: '✓';
    width: 20px;
    height: 20px;
    background: rgba(255, 255, 255, 0.15);
    backdrop-filter: blur(5px);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 12px;
    font-size: 12px;
    font-weight: bold;
    border: 1px solid rgba(255, 255, 255, 0.2);
    flex-shrink: 0;
}

.login-section {
    flex: 1;
    padding: 40px 35px;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    display: flex;
    flex-direction: column;
    justify-content: center;
    position: relative;
    min-height: 100%;
}

.login-section::before {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    width: 150px;
    height: 150px;
    background: radial-gradient(circle, rgba(37, 99, 235, 0.03) 0%, transparent 70%);
    border-radius: 50%;
    transform: translate(75px, -75px);
}

.login-header {
    margin-bottom: 30px;
    position: relative;
    z-index: 2;
}

.login-header h2 {
    font-size: clamp(1.5rem, 3vw, 1.8rem);
    font-weight: 700;
    color: var(--text-primary);
    margin-bottom: 8px;
    letter-spacing: -0.02em;
}

.login-header p {
    color: var(--text-secondary);
    font-size: clamp(0.95rem, 2vw, 1rem);
    font-weight: 400;
}

.form-group {
    margin-bottom: 24px;
    position: relative;
}

.input-wrapper {
    position: relative;
    display: flex;
    flex-direction: column;
}

.input-wrapper input {
    background: rgba(255, 255, 255, 0.8);
    backdrop-filter: blur(10px);
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: var(--radius-md);
    padding: 16px 20px;
    color: var(--text-primary);
    font-size: 15px;
    font-weight: 500;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    width: 100%;
    outline: none;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
}

.input-wrapper input::placeholder {
    color: transparent;
}

.input-wrapper label {
    position: absolute;
    left: 20px;
    top: 50%;
    transform: translateY(-50%);
    color: var(--text-muted);
    font-size: 15px;
    font-weight: 500;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    pointer-events: none;
    background: rgba(255, 255, 255, 0.9);
    padding: 0 6px;
    margin-left: -6px;
    border-radius: 4px;
}

.input-wrapper input:focus,
.input-wrapper input:valid,
.input-wrapper input.has-value {
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1), 0 4px 20px rgba(37, 99, 235, 0.1);
    background: rgba(255, 255, 255, 0.95);
}

.input-wrapper input:focus + label,
.input-wrapper input:valid + label,
.input-wrapper input.has-value + label {
    transform: translateY(-32px) scale(0.85);
    color: var(--primary);
    font-weight: 600;
}

.password-wrapper {
    position: relative;
}

.password-wrapper input {
    padding-right: 50px;
}

.password-toggle {
    position: absolute;
    right: 15px;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    cursor: pointer;
    padding: 8px;
    color: var(--text-muted);
    transition: all 0.2s ease;
    border-radius: var(--radius-sm);
}

.password-toggle:hover {
    color: var(--text-secondary);
    background: rgba(37, 99, 235, 0.05);
}

.eye-icon {
    width: 20px;
    height: 20px;
}

.login-btn {
    width: 100%;
    background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
    border: none;
    border-radius: var(--radius-md);
    padding: 16px 24px;
    color: white;
    font-size: 15px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    margin-bottom: 24px;
    overflow: hidden;
    box-shadow: 0 4px 15px rgba(37, 99, 235, 0.3);
}

.login-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s ease;
}

.login-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 6px 20px rgba(37, 99, 235, 0.4);
}

.login-btn:active {
    transform: translateY(0);
}

.login-btn:disabled {
    pointer-events: none;
    background: var(--text-muted);
    box-shadow: none;
}

.btn-content {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    transition: opacity 0.2s ease;
    position: relative;
    z-index: 2;
}

.btn-loader {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 20px;
    height: 20px;
    border: 2px solid transparent;
    border-top: 2px solid white;
    border-radius: 50%;
    opacity: 0;
    animation: spin 1s linear infinite;
    transition: opacity 0.2s ease;
}

.login-btn.loading .btn-content {
    opacity: 0;
}

.login-btn.loading .btn-loader {
    opacity: 1;
}

/* Django form errors */
.errorlist {
    list-style: none;
    padding: 0;
    margin: 6px 0 0 0;
}

.errorlist li {
    color: var(--error);
    font-size: 0.85rem;
    margin-bottom: 3px;
    font-weight: 500;
}

@keyframes spin {
    0% { transform: translate(-50%, -50%) rotate(0deg); }
    100% { transform: translate(-50%, -50%) rotate(360deg); }
}

@keyframes float {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    50% { transform: translateY(-15px) rotate(180deg); }
}

@keyframes containerFadeIn {
    from { 
        opacity: 0; 
        transform: translateY(20px) scale(0.95);
    }
    to { 
        opacity: 1; 
        transform: translateY(0) scale(1);
    }
}

/* Mobile Responsive */
@media (max-width: 768px) {
    body {
        padding: 10px;
        align-items: flex-start;
        padding-top: 20px;
    }
    
    .login-container {
        flex-direction: column;
        max-width: 100%;
        min-height: auto;
        max-height: none;
    }
    
    .welcome-section {
        padding: 30px 25px;
        min-height: auto;
        justify-content: flex-start;
    }
    
    .welcome-section h1 {
        font-size: 2rem;
        margin-bottom: 12px;
    }
    
    .welcome-section p {
        margin-bottom: 20px;
    }
    
    .mobile-illustration-container {
        max-height: 200px;
        margin: 15px 0;
    }
    
    .mobile-illustration {
        max-width: 70%;
        max-height: 180px;
    }
    
    .features-list li {
        margin-bottom: 12px;
        font-size: 0.9rem;
    }
    
    .features-list li::before {
        width: 18px;
        height: 18px;
        margin-right: 10px;
    }
    
    .login-section {
        padding: 30px 25px;
        min-height: auto;
    }
    
    .login-header {
        margin-bottom: 25px;
    }
    
    .form-group {
        margin-bottom: 20px;
    }
    
    .login-btn {
        margin-bottom: 20px;
    }
}

@media (max-width: 480px) {
    body {
        padding: 8px;
    }
    
    .login-container {
        border-radius: var(--radius-md);
    }
    
    .welcome-section {
        padding: 25px 20px;
    }
    
    .welcome-section h1 {
        font-size: 1.8rem;
    }
    
    .mobile-illustration-container {
        max-height: 180px;
        margin: 10px 0;
    }
    
    .mobile-illustration {
        max-width: 70%;
        max-height: 170px;
    }
    
    .features-list li {
        font-size: 0.85rem;
        margin-bottom: 10px;
    }
    
    .login-section {
        padding: 25px 20px;
    }
    
    .input-wrapper input {
        padding: 14px 18px;
        font-size: 16px; /* Evita zoom no iOS */
    }
    
    .password-wrapper input {
        padding-right: 45px;
    }
}

@media (max-width: 360px) {
    .welcome-section {
        padding: 20px 15px;
    }
    
    .login-section {
        padding: 20px 15px;
    }
    
    .company-logo {
        width: 50px;
        height: 50px;
        margin-bottom: 20px;
    }
    
    .mobile-illustration-container {
        max-height: 120px;
    }
    
    .mobile-illustration {
        max-height: 110px;
    }
}

/* Landscape orientation fixes for mobile */
@media (max-height: 600px) and (orientation: landscape) {
    body {
        align-items: center;
        padding: 10px;
    }
    
    .login-container {
        min-height: auto;
        max-height: 90vh;
    }
    
    .welcome-section {
        padding: 20px;
    }
    
    .mobile-illustration-container {
        display: none; /* Esconde a ilustração em landscape */
    }
    
    .features-list {
        display: none; /* Esconde features em landscape para economizar espaço */
    }
    
    .login-section {
        padding: 20px;
    }
    
    .form-group {
        margin-bottom: 15px;
    }
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
    .login-section {
        background: rgba(30, 41, 59, 0.95);
        color: #f8fafc;
    }

    .login-header h2 {
        color: #f8fafc;
    }

    .login-header p {
        color: #cbd5e1;
    }

    .input-wrapper input {
        background: rgba(15, 23, 42, 0.8);
        color: #f8fafc;
        border-color: rgba(255, 255, 255, 0.1);
    }

    .input-wrapper label {
        background: rgba(30, 41, 59, 0.9);
        color: #94a3b8;
    }

    .input-wrapper input:focus,
    .input-wrapper input:valid,
    .input-wrapper input.has-value {
        background: rgba(15, 23, 42, 0.95);
    }

    .password-toggle:hover {
        background: rgba(255, 255, 255, 0.1);
    }

    .toast-container {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        z-index: 10000;
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 20px;
        pointer-events: none; /* Permite cliques através do container */
        gap: 12px;
    }

    .toast {
        background: linear-gradient(135deg, 
            rgba(15, 23, 42, 0.98) 0%, 
            rgba(30, 41, 59, 0.98) 100%);
        backdrop-filter: blur(20px);
        border-radius: 16px;
        padding: 20px;
        min-width: 400px;
        max-width: 500px;
        width: 90%;
        box-shadow: 
            0 25px 50px -12px rgba(0, 0, 0, 0.4),
            0 0 0 1px rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.15);
        display: flex;
        align-items: flex-start;
        gap: 16px;
        position: relative;
        overflow: hidden;
        pointer-events: auto; /* Permite interação com o toast */
        animation: slideDownIn 0.5s cubic-bezier(0.16, 1, 0.3, 1);
        transform-origin: top center;
    }

    .toast::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(90deg, 
            transparent 0%, 
            currentColor 50%, 
            transparent 100%);
    }

    .toast.toast-error {
        color: #fca5a5;
        border-color: rgba(239, 68, 68, 0.3);
    }

    .toast.toast-error::before {
        background: linear-gradient(90deg, 
            transparent 0%, 
            #ef4444 50%, 
            transparent 100%);
    }

    .toast.toast-success {
        color: #86efac;
        border-color: rgba(34, 197, 94, 0.3);
    }

    .toast.toast-success::before {
        background: linear-gradient(90deg, 
            transparent 0%, 
            #22c55e 50%, 
            transparent 100%);
    }

    .toast-icon {
        flex-shrink: 0;
        width: 44px;
        height: 44px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 12px;
        background: rgba(239, 68, 68, 0.15);
        border: 1px solid rgba(239, 68, 68, 0.25);
    }

    .toast.toast-success .toast-icon {
        background: rgba(34, 197, 94, 0.15);
        border-color: rgba(34, 197, 94, 0.25);
    }

    .toast-content {
        flex: 1;
        min-width: 0;
    }

    .toast-title {
        font-size: 16px;
        font-weight: 700;
        color: #f8fafc;
        margin-bottom: 6px;
        letter-spacing: -0.025em;
    }

    .toast-message {
        font-size: 14px;
        color: rgba(248, 250, 252, 0.85);
        line-height: 1.5;
        word-wrap: break-word;
    }

    .toast-close {
        flex-shrink: 0;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.2s ease;
        color: rgba(255, 255, 255, 0.6);
    }

    .toast-close:hover {
        background: rgba(255, 255, 255, 0.1);
        color: rgba(255, 255, 255, 0.9);
        transform: scale(1.05);
    }

    .toast-progress {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: rgba(255, 255, 255, 0.1);
        overflow: hidden;
    }

    .progress-bar {
        height: 100%;
        background: linear-gradient(90deg, 
            currentColor 0%, 
            rgba(255, 255, 255, 0.8) 50%, 
            currentColor 100%);
        width: 100%;
        transform: translateX(-100%);
        animation: progressSlide 8s linear forwards;
    }

    /* Animações */
    @keyframes slideDownIn {
        from {
            opacity: 0;
            transform: translateY(-100px) scale(0.95);
        }
        to {
            opacity: 1;
            transform: translateY(0) scale(1);
        }
    }

    @keyframes slideUpOut {
        from {
            opacity: 1;
            transform: translateY(0) scale(1);
        }
        to {
            opacity: 0;
            transform: translateY(-100px) scale(0.95);
        }
    }

    @keyframes progressSlide {
        from {
            transform: translateX(-100%);
        }
        to {
            transform: translateX(0);
        }
    }

    .toast.hiding {
        animation: slideUpOut 0.4s cubic-bezier(0.4, 0, 1, 1) forwards;
    }

    /* Responsivo para toasts */
    @media (max-width: 600px) {
        .toast-container {
            padding: 16px 12px;
        }
        
        .toast {
            min-width: unset;
            width: 100%;
            max-width: unset;
            padding: 16px;
            border-radius: 12px;
        }
        
        .toast-icon {
            width: 36px;
            height: 36px;
        }
        
        .toast-title {
            font-size: 15px;
        }
        
        .toast-message {
            font-size: 13px;
        }
        
        .toast-close {
            width: 28px;
            height: 28px;
        }
    }

    @media (max-width: 400px) {
        .toast {
            padding: 14px;
            gap: 12px;
        }
        
        .toast-icon {
            width: 32px;
            height: 32px;
        }
        
        .toast-title {
            font-size: 14px;
        }
        
        .toast-message {
            font-size: 12px;
        }
    }

    .field-error {
        color: var(--error);
        font-size: 0.85rem;
        margin-top: 8px; /* Aumenta o espaçamento superior */
        font-weight: 500;
        padding-left: 5px; /* Adiciona um pequeno recuo */
        animation: shake 0.3s ease-in-out; /* Adiciona uma animação sutil */
    }

    /* Estilo para inputs com erro */
    .input-wrapper input.error {
        border-color: var(--error) !important;
        box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.1) !important;
    }

    .input-wrapper input.error + label {
        color: var(--error) !important;
    }

    /* Animação de "tremor" para erros */
    @keyframes shake {
        0%, 100% { transform: translateX(0); }
        25% { transform: translateX(-4px); }
        75% { transform: translateX(4px); }
    }

}
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\static\js\login.js

class ModernLoginForm {
    constructor() {
        this.form = document.getElementById('loginForm');
        this.passwordToggle = document.getElementById('passwordToggle');
        this.loginButton = document.getElementById('loginButton');
        this.messagesContainer = document.getElementById('messagesContainer');
        
        this.init();
    }
    
    init() {
        this.setupFloatingLabels();
        this.setupPasswordToggle();
        this.setupFormSubmission();
        this.initializeExistingValues();
        this.setupFormAnimations();
        this.initializeAutoHideMessages();
        this.setupClientSideValidation();
    }
    
    initializeExistingValues() {
        const inputs = this.form.querySelectorAll('input[type="text"], input[type="password"]');
        inputs.forEach(input => {
            if (input.value.trim() !== '') {
                input.classList.add('has-value');
            }
        });
    }
    
    setupFloatingLabels() {
        const inputs = this.form.querySelectorAll('input[type="text"], input[type="password"]');
        
        inputs.forEach(input => {
            input.addEventListener('input', () => {
                if (input.value.trim() !== '') {
                    input.classList.add('has-value');
                } else {
                    input.classList.remove('has-value');
                }
            });
            
            input.addEventListener('blur', () => {
                if (input.value.trim() !== '') {
                    input.classList.add('has-value');
                } else {
                    input.classList.remove('has-value');
                }
            });

            input.addEventListener('focus', () => {
                input.parentElement.style.transform = 'scale(1.02)';
            });

            input.addEventListener('blur', () => {
                input.parentElement.style.transform = 'scale(1)';
            });
        });
    }
    
    setupPasswordToggle() {
        if (this.passwordToggle) {
            const passwordInput = this.form.querySelector('input[type="password"]');
            
            this.passwordToggle.addEventListener('click', () => {
                const type = passwordInput.type === 'password' ? 'text' : 'password';
                passwordInput.type = type;
                
                const eyeIcon = this.passwordToggle.querySelector('.eye-icon');
                if (type === 'text') {
                    eyeIcon.innerHTML = `
                        <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"/>
                        <line x1="1" y1="1" x2="23" y2="23"/>
                    `;
                } else {
                    eyeIcon.innerHTML = `
                        <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                        <circle cx="12" cy="12" r="3"/>
                    `;
                }
            });
        }
    }
    
    setupFormSubmission() {
        this.form.addEventListener('submit', (e) => {
            // Validação básica do lado cliente
            const username = this.form.querySelector('#username').value.trim();
            const password = this.form.querySelector('#password').value;
            
            if (!username || !password) {
                e.preventDefault();
                this.showMessage('error', 'Campos Obrigatórios', 'Por favor, preencha todos os campos.');
                return;
            }
            
            this.loginButton.classList.add('loading');
            this.loginButton.disabled = true;
            
            // Se houver erro de validação no servidor, o formulário será recarregado
            // e as mensagens de erro do Django aparecerão
        });
    }

    setupFormAnimations() {
        const formElements = this.form.querySelectorAll('.form-group, .login-btn');
        formElements.forEach((element, index) => {
            element.style.opacity = '0';
            element.style.transform = 'translateY(20px)';
            element.style.animation = `fadeInUp 0.6s ease-out ${index * 0.1}s forwards`;
        });
    }
    
    setupClientSideValidation() {
        const inputs = this.form.querySelectorAll('input[required]');
        
        inputs.forEach(input => {
            input.addEventListener('blur', () => {
                this.validateField(input);
            });
            
            input.addEventListener('input', () => {
                if (input.classList.contains('error')) {
                    this.validateField(input);
                }
            });
        });
    }
    
    validateField(input) {
        const fieldGroup = input.closest('.form-group');
        const existingError = fieldGroup.querySelector('.field-error');
        
        // Remove erro existente
        if (existingError) {
            existingError.remove();
        }
        
        input.classList.remove('error');
        
        // Validação
        if (!input.value.trim()) {
            this.showFieldError(input, `${input.previousElementSibling.textContent} é obrigatório`);
        } else if (input.type === 'email' && !this.isValidEmail(input.value)) {
            this.showFieldError(input, 'Digite um email válido');
        }
    }
    
    showFieldError(input, message) {
        input.classList.add('error');
        
        const errorDiv = document.createElement('div');
        errorDiv.className = 'field-error';
        errorDiv.textContent = message;
        
        input.parentElement.parentElement.appendChild(errorDiv);
    }
    
    isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }
    
    initializeAutoHideMessages() {
        // Configurar auto-hide para mensagens existentes
        const existingMessages = document.querySelectorAll('.message[data-auto-hide]');
        existingMessages.forEach(message => {
            const timeout = parseInt(message.dataset.autoHide) || 5000;
            this.setupAutoHide(message, timeout);
        });
    }
    
    setupAutoHide(messageElement, timeout = 5000) {
        // Adicionar classe para animação da barra de progresso
        setTimeout(() => {
            messageElement.classList.add('auto-hide');
        }, 100);
        
        // Esconder a mensagem após o timeout
        setTimeout(() => {
            this.hideMessage(messageElement);
        }, timeout);
    }
    
    showMessage(type, title, text, autoHide = true) {
        const icons = {
            error: `<svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                      <path d="M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2zm-1 15h2v-2h-2v2zm0-4h2V7h-2v6z"/>
                    </svg>`,
            success: `<svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2zm-1.5 13L7 11.5l1.5-1.5L10 11.5 15.5 6 17 7.5 10.5 15z"/>
                      </svg>`,
            warning: `<svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 2L2 22h20L12 2zm-1 15h2v2h-2v-2zm0-6h2v4h-2v-4z"/>
                      </svg>`
        };
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `message message-${type}`;
        
        messageDiv.innerHTML = `
            <div class="message-icon">
                ${icons[type] || icons.error}
            </div>
            <div class="message-content">
                <div class="message-title">${title}</div>
                <div class="message-text">${text}</div>
            </div>
            <button type="button" class="message-close" onclick="window.loginForm.closeMessage(this)">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M18 6L6 18M6 6l12 12"/>
                </svg>
            </button>
        `;
        
        const dynamicMessages = document.getElementById('dynamicMessages');
        dynamicMessages.appendChild(messageDiv);
        
        if (autoHide) {
            this.setupAutoHide(messageDiv, 5000);
        }
        
        return messageDiv;
    }
    
    hideMessage(messageElement) {
        messageElement.classList.add('hiding');
        setTimeout(() => {
            if (messageElement.parentNode) {
                messageElement.parentNode.removeChild(messageElement);
            }
        }, 300);
    }
    
    closeMessage(closeButton) {
        const message = closeButton.closest('.message');
        this.hideMessage(message);
    }
}

// Função global para fechar mensagem (chamada pelo onclick no HTML)
window.closeMessage = function(closeButton) {
    if (window.loginForm) {
        window.loginForm.closeMessage(closeButton);
    }
};

// Add CSS for animations and error states
const style = document.createElement('style');
style.textContent = `
    @keyframes fadeInUp {
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @keyframes shake {
        0%, 100% { transform: translateX(0); }
        25% { transform: translateX(-5px); }
        75% { transform: translateX(5px); }
    }

    .input-wrapper {
        transition: transform 0.2s ease;
    }
    
    .input-wrapper input.error {
        border-color: var(--error) !important;
        box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.1) !important;
    }
    
    .input-wrapper input.error + label {
        color: var(--error) !important;
    }
`;
document.head.appendChild(style);

document.addEventListener('DOMContentLoaded', () => {
    window.loginForm = new ModernLoginForm();
});

function closeToast(closeButton) {
    const toast = closeButton.closest('.toast');
    hideToast(toast);
}

function hideToast(toastElement) {
    toastElement.classList.add('hiding');
    setTimeout(() => {
        if (toastElement.parentNode) {
            toastElement.parentNode.removeChild(toastElement);
        }
    }, 400);
}

function showToast(type, title, message, autoHide = true, duration = 6000) {
    const icons = {
        error: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"/>
                  <line x1="12" y1="9" x2="12" y2="13"/>
                  <line x1="12" y1="17" x2="12.01" y2="17"/>
                </svg>`,
        success: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2zm-1.5 13L7 11.5l1.5-1.5L10 11.5 15.5 6 17 7.5 10.5 15z"/>
                  </svg>`,
        warning: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M12 2L2 22h20L12 2zm-1 15h2v2h-2v-2zm0-6h2v4h-2v-4z"/>
                  </svg>`
    };
    
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    
    toast.innerHTML = `
        <div class="toast-icon">
            ${icons[type] || icons.error}
        </div>
        <div class="toast-content">
            <div class="toast-title">${title}</div>
            <div class="toast-message">${message}</div>
        </div>
        <button type="button" class="toast-close" onclick="closeToast(this)" aria-label="Fechar">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M18 6L6 18M6 6l12 12"/>
            </svg>
        </button>
        <div class="toast-progress">
            <div class="progress-bar" style="animation-duration: ${duration}ms;"></div>
        </div>
    `;
    
    const container = document.getElementById('dynamicToasts') || document.getElementById('toastContainer');
    container.appendChild(toast);
    
    if (autoHide) {
        setTimeout(() => {
            hideToast(toast);
        }, duration);
    }
    
    return toast;
}

// Atualizar a função setupFormSubmission para usar toasts
function setupFormSubmission() {
    this.form.addEventListener('submit', (e) => {
        const username = this.form.querySelector('#username').value.trim();
        const password = this.form.querySelector('#password').value;
        
        if (!username || !password) {
            e.preventDefault();
            showToast('error', 'Campos Obrigatórios', 'Por favor, preencha todos os campos.');
            return;
        }
        
        this.loginButton.classList.add('loading');
        this.loginButton.disabled = true;
    });
}

// Inicializar auto-hide para toasts existentes
document.addEventListener('DOMContentLoaded', function() {
    const existingToasts = document.querySelectorAll('.toast[data-auto-hide]');
    existingToasts.forEach(toast => {
        const duration = parseInt(toast.dataset.autoHide) || 6000;
        setTimeout(() => {
            hideToast(toast);
        }, duration);
    });
    
    // Inicializar o formulário de login
    window.loginForm = new ModernLoginForm();
});
_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\templates\home.html

{% extends 'auditorias/base.html' %}

{% block title %}Dashboard - Sistema de Auditorias{% endblock %}
{% block page_title %}Dashboard{% endblock %}

{% block content %}
<div class="content-header">
    <h2 class="content-title">Bem-vindo, {{ user.get_full_name|default:user.username }}!</h2>
    <p class="content-subtitle">Esta é a página inicial do sistema de auditorias.</p>
</div>

<!-- Cards de Estatísticas -->
<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 24px; margin-bottom: 32px;">
    <div class="card">
        <div class="card-body" style="padding: 24px;">
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <div>
                    <h3 style="font-size: 32px; font-weight: 700; color: var(--primary); margin-bottom: 8px;">
                        {{ total_auditorias }}
                    </h3>
                    <p style="color: var(--text-secondary); font-size: 14px; margin: 0;">Total de Auditorias</p>
                </div>
                <div style="width: 60px; height: 60px; background: linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%); border-radius: var(--radius-lg); display: flex; align-items: center; justify-content: center; color: white; font-size: 24px;">
                    <i class="fas fa-calendar-check"></i>
                </div>
            </div>
        </div>
    </div>
    <div class="card">
        <div class="card-body" style="padding: 24px;">
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <div>
                    <h3 style="font-size: 32px; font-weight: 700; color: var(--success); margin-bottom: 8px;">
                        {{ auditorias_agendadas }}
                    </h3>
                    <p style="color: var(--text-secondary); font-size: 14px; margin: 0;">Auditorias Futuras</p>
                </div>
                <div style="width: 60px; height: 60px; background: linear-gradient(135deg, var(--success) 0%, #059669 100%); border-radius: var(--radius-lg); display: flex; align-items: center; justify-content: center; color: white; font-size: 24px;">
                    <i class="fas fa-calendar-plus"></i>
                </div>
            </div>
        </div>
    </div>
    <div class="card">
        <div class="card-body" style="padding: 24px;">
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <div>
                    <h3 style="font-size: 32px; font-weight: 700; color: var(--error); margin-bottom: 8px;">
                        {{ auditorias_executadas }}
                    </h3>
                    <p style="color: var(--text-secondary); font-size: 14px; margin: 0;">Executadas</p>
                </div>
                <div style="width: 60px; height: 60px; background: linear-gradient(135deg, var(--error) 0%, #b91c1c 100%); border-radius: var(--radius-lg); display: flex; align-items: center; justify-content: center; color: white; font-size: 24px;">
                    <i class="fas fa-clipboard-check"></i>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="card" style="margin-top: 32px;">
    <div class="card-header">
        <h3 class="card-title">Acesso rápido</h3>
        <p class="card-subtitle">Vá direto para os principais módulos</p>
    </div>
    <div class="card-body">
        <div style="display: flex; gap: 16px; flex-wrap: wrap;">
            <a href="{% url 'auditorias:lista_auditorias' %}" class="btn btn-primary">
                <i class="fas fa-list"></i> Ver Todas as Auditorias
            </a>
            <a href="{% url 'auditorias:criar_auditoria' %}" class="btn btn-secondary">
                <i class="fas fa-plus"></i> Nova Auditoria
            </a>
            <a href="{% url 'logout' %}" class="btn btn-danger">
                <i class="fas fa-sign-out-alt"></i> Sair
            </a>
        </div>
    </div>
</div>
{% endblock %}

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\templates\lista_auditorias.html

{% extends 'auditorias/base.html' %}

{% block title %}Lista de Auditorias - Sistema de Auditorias{% endblock %}
{% block page_title %}Auditorias Agendadas{% endblock %}

{% block content %}
<div class="content-header">
    <h2 class="content-title">Auditorias Agendadas</h2>
    <p class="content-subtitle">Veja todas as auditorias agendadas no sistema.</p>
</div>

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Lista de Auditorias</h3>
    </div>
    <div class="card-body">
        {% if todas_auditorias %}
        <div class="table-container">
            <table class="table">
                <thead>
                    <tr>
                        <th>Ferramenta</th>
                        <th>Descrição</th>
                    </tr>
                </thead>
                <tbody>
                    {% for auditoria in todas_auditorias %}
                    <tr>
                        <td>{{ auditoria.ferramenta }}</td>
                        <td>{{ auditoria.descricao }}</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
        {% else %}
        <div style="text-align:center; padding:2em;">
            <i class="fas fa-calendar-times" style="font-size: 2em; color: var(--text-muted);"></i>
            <p>Nenhuma auditoria agendada.</p>
        </div>
        {% endif %}
        <a href="{% url 'home' %}" class="btn btn-secondary" style="margin-top:20px;">
            <i class="fas fa-arrow-left"></i> Voltar ao Dashboard
        </a>
    </div>
</div>
{% endblock %}

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\templates\registration\login.html

{% load static %}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - Sistema de Auditorias</title>
    
    <link rel="stylesheet" href="{% static 'css/login.css' %}">
</head>
<body>
    <div class="bg-shape"></div>
    <div class="bg-shape"></div>
    <div class="bg-shape"></div>
    <div class="bg-shape"></div>

    <!-- NOVO: Container de mensagens fixo no topo da tela -->
    <div class="toast-container" id="toastContainer">
        {% if form.errors %}
            <div class="toast toast-error" data-auto-hide="8000">
                <div class="toast-icon">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"/>
                        <line x1="12" y1="9" x2="12" y2="13"/>
                        <line x1="12" y1="17" x2="12.01" y2="17"/>
                    </svg>
                </div>
                <div class="toast-content">
                    <div class="toast-title">Acesso Negado</div>
                    <div class="toast-message">
                        {% if form.non_field_errors %}
                            {{ form.non_field_errors.0 }}
                        {% else %}
                            Por favor, entre com um usuário e senha corretos. Note que ambos os campos diferenciam maiúsculas e minúsculas.
                        {% endif %}
                    </div>
                </div>
                <button type="button" class="toast-close" onclick="closeToast(this)" aria-label="Fechar">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M18 6L6 18M6 6l12 12"/>
                    </svg>
                </button>
                <div class="toast-progress">
                    <div class="progress-bar"></div>
                </div>
            </div>
        {% endif %}
        
        <!-- Container para toasts dinâmicos -->
        <div id="dynamicToasts"></div>
    </div>

    <div class="login-container">
        <div class="welcome-section">
            <div class="welcome-header-content">
                <h1>Bem-vindo de volta</h1>
                <p>Sistema de Gestão de Auditorias</p>
            </div>

            <div class="mobile-illustration-container">
                <img src="{% static 'img/imagem2.png' %}" 
                    alt="Interface do Sistema de Auditorias" 
                    class="mobile-illustration">
            </div>

            <ul class="features-list">
                <li>Gestão completa de auditorias</li>
                <li>Relatórios avançados e analytics</li>
                <li>Suporte técnico especializado</li>
            </ul>
        </div>
        
        <div class="login-section">
            <div class="login-header">
                <h2>Auditorias</h2>
                <p>Faça o login para acessar a plataforma</p>
            </div>
            
            <form method="post" class="login-form" id="loginForm" novalidate>
                {% csrf_token %}
                <div class="form-group">
                    <div class="input-wrapper">
                        <input 
                            type="text" 
                            id="username" 
                            name="username" 
                            required 
                            autocomplete="username"
                            value="{{ form.username.value|default:'' }}"
                        >
                        <label for="username">Nome de Usuário</label>
                    </div>
                    {% if form.username.errors %}
                        <div class="field-error">{{ form.username.errors.0 }}</div>
                    {% endif %}
                </div>

                <div class="form-group">
                    <div class="input-wrapper password-wrapper">
                        <input 
                            type="password" 
                            id="password" 
                            name="password" 
                            required 
                            autocomplete="current-password"
                        >
                        <label for="password">Senha</label>
                        <button type="button" class="password-toggle" id="passwordToggle" aria-label="Mostrar/ocultar senha">
                            <svg class="eye-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                                <circle cx="12" cy="12" r="3"/>
                            </svg>
                        </button>
                    </div>
                    {% if form.password.errors %}
                        <div class="field-error">{{ form.password.errors.0 }}</div>
                    {% endif %}
                </div>
                
                <button type="submit" class="login-btn" id="loginButton">
                    <div class="btn-content">
                        <span>Acessar Sistema</span>
                    </div>
                    <div class="btn-loader"></div>
                </button>
            </form>
        </div>
    </div>
    
    <script src="{% static 'js/login.js' %}"></script>
</body>
</html>

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\usuarios\admin.py

# usuarios/admin.py

from django.contrib import admin
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
from .models import Usuario

# Crie uma classe inline para gerenciar o ManyToMany se for o caso


class FornecedorInline(admin.TabularInline):
    model = Usuario.fornecedores.through  # Usar o modelo intermediário para o M2M
    extra = 1


@admin.register(Usuario)
class UsuarioAdmin(BaseUserAdmin):
    # Adicione os campos personalizados aos fieldsets
    fieldsets = BaseUserAdmin.fieldsets + (
        ('Informações Adicionais', {'fields': ('registro',)}),
    )

    # Adicione a relação a Fornecedores no `filter_horizontal`
    filter_horizontal = BaseUserAdmin.filter_horizontal + ('fornecedores',)

    # Ajuste o list_display para incluir o novo campo
    list_display = (
        'username',
        'email',
        'first_name',
        'last_name',
        'registro',  # Adicione o campo de registro
        'is_staff',
    )

    search_fields = (
        'username',
        'email',
        'first_name',
        'last_name',
        'registro'
    )

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\usuarios\apps.py

from django.apps import AppConfig


class UsuariosConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'usuarios'

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\usuarios\models.py

# usuarios/models.py

from django.db import models
from django.contrib.auth.models import AbstractUser
from fornecedores.models import Fornecedor  # Importe o modelo de Fornecedor


class Usuario(AbstractUser):
    # Campos personalizados
    registro = models.CharField(
        max_length=50,
        unique=True,
        null=True,
        blank=True,
        verbose_name="Nº de Registro"
    )

    # Relacionamento com Fornecedores
    fornecedores = models.ManyToManyField(
        Fornecedor,
        blank=True,
        verbose_name="Fornecedores com Acesso",
        related_name="usuarios_com_acesso"
    )

    # Acesso a permissões e grupos já é incluído com o AbstractUser

    class Meta:
        verbose_name = "Usuário"
        verbose_name_plural = "Usuários"

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\usuarios\serializers.py

# usuarios/serializers.py

from rest_framework import serializers
from .models import Usuario


class UsuarioSerializer(serializers.ModelSerializer):
    """
    Serializer para o modelo de Usuário.
    """
    class Meta:
        model = Usuario
        # Define os campos que serão expostos na API
        fields = ['id', 'username', 'email', 'first_name', 'last_name']
        # Garante que o username não possa ser alterado via API
        read_only_fields = ['username']


class AlterarSenhaSerializer(serializers.Serializer):
    """
    Serializer para o endpoint de alteração de senha.
    """
    old_password = serializers.CharField(required=True)
    new_password1 = serializers.CharField(required=True)
    new_password2 = serializers.CharField(required=True)

    def validate_old_password(self, value):
        user = self.context['request'].user
        if not user.check_password(value):
            raise serializers.ValidationError(
                "Sua senha antiga não foi digitada corretamente. Por favor, tente novamente.")
        return value

    def validate(self, data):
        if data['new_password1'] != data['new_password2']:
            raise serializers.ValidationError(
                {"new_password2": "As duas senhas não coincidem."})
        return data

    def save(self, **kwargs):
        password = self.validated_data['new_password1']
        user = self.context['request'].user
        user.set_password(password)
        user.save()
        return user

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\usuarios\tests.py

from django.test import TestCase

# Create your tests here.

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\usuarios\urls.py

# usuarios/urls.py

from django.urls import path
from . import views
from .views import CustomAuthToken

app_name = 'usuarios'

urlpatterns = [
    # Dashboard
    path('', views.dashboard_usuarios, name='dashboard'),

    # Usuários
    path('usuarios/', views.lista_usuarios, name='lista_usuarios'),
    path('usuarios/criar/', views.criar_usuario, name='criar_usuario'),
    path('usuarios/<int:pk>/editar/', views.editar_usuario, name='editar_usuario'),
    path('usuarios/<int:pk>/deletar/',
         views.deletar_usuario, name='deletar_usuario'),
    path('usuarios/<int:pk>/alterar-senha/',
         views.alterar_senha_usuario, name='alterar_senha_usuario'),

    # Grupos
    path('grupos/', views.lista_grupos, name='lista_grupos'),
    path('grupos/criar/', views.criar_grupo, name='criar_grupo'),
    path('grupos/<int:pk>/editar/', views.editar_grupo, name='editar_grupo'),
    path('grupos/<int:pk>/deletar/', views.deletar_grupo, name='deletar_grupo'),

    # AJAX
    path('ajax/verificar-username/',
         views.verificar_username, name='verificar_username'),
    path('ajax/verificar-email/', views.verificar_email, name='verificar_email'),
    path('ajax/toggle-status/<int:pk>/',
         views.toggle_usuario_status, name='toggle_usuario_status'),
    path('ajax/bulk-action/', views.bulk_action_usuarios,
         name='bulk_action_usuarios'),

    # Perfil do usuário
    path('meu-perfil/', views.meu_perfil, name='meu_perfil'),
    path('alterar-senha/', views.alterar_minha_senha, name='alterar_minha_senha'),

]

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\usuarios\views.py

# usuarios/views.py

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required, user_passes_test
from django.contrib.auth import update_session_auth_hash
from django.contrib.auth.models import Group, Permission
from django.contrib import messages
from django.core.paginator import Paginator
from django.db.models import Q
from django.http import JsonResponse
from django.views.decorators.http import require_http_methods
from django.contrib.auth.forms import PasswordChangeForm
from django.contrib.contenttypes.models import ContentType
import json

from .serializers import UsuarioSerializer

from .models import Usuario

from .serializers import AlterarSenhaSerializer

from rest_framework import status
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from rest_framework.authtoken.views import ObtainAuthToken
from rest_framework.authtoken.models import Token
from rest_framework.generics import RetrieveUpdateAPIView, UpdateAPIView

# Decorator para verificar se o usuário é administrador


def admin_required(user):
    return user.is_superuser or user.is_staff


# ============================================================================
# VIEWS PARA USUÁRIOS
# ============================================================================

@login_required
@user_passes_test(admin_required)
def dashboard_usuarios(request):
    """Dashboard principal do módulo de usuários."""
    context = {
        'total_usuarios': Usuario.objects.count(),
        'usuarios_ativos': Usuario.objects.filter(is_active=True).count(),
        'usuarios_staff': Usuario.objects.filter(is_staff=True).count(),
        'total_grupos': Group.objects.count(),
        'usuarios_recentes': Usuario.objects.order_by('-date_joined')[:5],
        'title': 'Dashboard de Usuários'
    }
    return render(request, 'usuarios/dashboard.html', context)


@login_required
@user_passes_test(admin_required)
def alterar_senha_usuario(request, pk):
    """Altera a senha de um usuário específico"""
    usuario = get_object_or_404(Usuario, pk=pk)

    if request.method == 'POST':
        password = request.POST.get('password')
        password_confirm = request.POST.get('password_confirm')

        if not password:
            messages.error(request, 'A senha é obrigatória!')
        elif password != password_confirm:
            messages.error(request, 'As senhas não coincidem!')
        elif len(password) < 8:
            messages.error(
                request, 'A senha deve ter pelo menos 8 caracteres!')
        else:
            try:
                usuario.set_password(password)
                usuario.save()
                messages.success(request, 'Senha alterada com sucesso!')
                return redirect('usuarios:lista_usuarios')
            except Exception as e:
                messages.error(request, f'Erro ao alterar senha: {str(e)}')

    context = {
        'usuario': usuario,
        'title': f'Alterar Senha - {usuario.get_full_name() or usuario.username}'
    }
    return render(request, 'usuarios/alterar_senha.html', context)


@login_required
@user_passes_test(admin_required)
def lista_usuarios(request):
    """Lista todos os usuários com busca e paginação"""
    search = request.GET.get('search', '')
    status = request.GET.get('status', '')
    grupo = request.GET.get('grupo', '')

    usuarios = Usuario.objects.all()

    if search:
        usuarios = usuarios.filter(
            Q(username__icontains=search) |
            Q(first_name__icontains=search) |
            Q(last_name__icontains=search) |
            Q(email__icontains=search)
        )

    if status == 'ativo':
        usuarios = usuarios.filter(is_active=True)
    elif status == 'inativo':
        usuarios = usuarios.filter(is_active=False)
    elif status == 'staff':
        usuarios = usuarios.filter(is_staff=True)

    if grupo:
        usuarios = usuarios.filter(groups__id=grupo)

    usuarios = usuarios.order_by('-date_joined')

    paginator = Paginator(usuarios, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'page_obj': page_obj,
        'search': search,
        'status': status,
        'grupo': grupo,
        'grupos': Group.objects.all(),
        'title': 'Usuários',
        'singular': 'Usuário',
        'button_text': 'Novo Usuário',
        'create_url': 'usuarios:criar_usuario',  # <-- Chave que faltava
        'artigo': 'o'
    }
    return render(request, 'usuarios/lista.html', context)


@login_required
@user_passes_test(admin_required)
def criar_usuario(request):
    """Cria um novo usuário"""
    if request.method == 'POST':
        username = request.POST.get('username')
        email = request.POST.get('email')
        first_name = request.POST.get('first_name')
        last_name = request.POST.get('last_name')
        password = request.POST.get('password')
        password_confirm = request.POST.get('password_confirm')
        is_active = request.POST.get('is_active') == 'on'
        is_staff = request.POST.get('is_staff') == 'on'
        is_superuser = request.POST.get('is_superuser') == 'on'
        grupos_ids = request.POST.getlist('grupos')

        # Validações
        if not username or not email or not password:
            messages.error(
                request, 'Username, email e senha são obrigatórios!')
        elif password != password_confirm:
            messages.error(request, 'As senhas não coincidem!')
        elif Usuario.objects.filter(username=username).exists():
            messages.error(request, 'Este username já está em uso!')
        elif Usuario.objects.filter(email=email).exists():
            messages.error(request, 'Este email já está em uso!')
        else:
            try:
                usuario = Usuario.objects.create_user(
                    username=username,
                    email=email,
                    password=password,
                    first_name=first_name,
                    last_name=last_name,
                    is_active=is_active,
                    is_staff=is_staff,
                    is_superuser=is_superuser
                )

                # Adicionar aos grupos
                if grupos_ids:
                    usuario.groups.set(grupos_ids)

                messages.success(request, 'Usuário criado com sucesso!')
                return redirect('usuarios:lista_usuarios')
            except Exception as e:
                messages.error(request, f'Erro ao criar usuário: {str(e)}')

    context = {
        'grupos': Group.objects.all(),
        'title': 'Criar Usuário'
    }
    return render(request, 'usuarios/form.html', context)


@login_required
@user_passes_test(admin_required)
def editar_usuario(request, pk):
    """Edita um usuário existente"""
    usuario = get_object_or_404(Usuario, pk=pk)

    if request.method == 'POST':
        usuario.username = request.POST.get('username')
        usuario.email = request.POST.get('email')
        usuario.first_name = request.POST.get('first_name')
        usuario.last_name = request.POST.get('last_name')
        usuario.is_active = request.POST.get('is_active') == 'on'
        usuario.is_staff = request.POST.get('is_staff') == 'on'
        usuario.is_superuser = request.POST.get('is_superuser') == 'on'
        grupos_ids = request.POST.getlist('grupos')

        # Validar username único (exceto o próprio usuário)
        if Usuario.objects.filter(username=usuario.username).exclude(pk=pk).exists():
            messages.error(request, 'Este username já está em uso!')
        # Validar email único (exceto o próprio usuário)
        elif Usuario.objects.filter(email=usuario.email).exclude(pk=pk).exists():
            messages.error(request, 'Este email já está em uso!')
        else:
            try:
                usuario.save()
                usuario.groups.set(grupos_ids)
                messages.success(request, 'Usuário atualizado com sucesso!')
                return redirect('usuarios:lista_usuarios')
            except Exception as e:
                messages.error(request, f'Erro ao atualizar usuário: {str(e)}')

    context = {
        'usuario': usuario,
        'grupos': Group.objects.all(),
        'title': 'Editar Usuário'
    }
    return render(request, 'usuarios/form.html', context)


@login_required
@user_passes_test(admin_required)
def deletar_usuario(request, pk):
    """Deleta um usuário"""
    usuario = get_object_or_404(Usuario, pk=pk)

    # Não permitir deletar o próprio usuário
    if usuario == request.user:
        messages.error(request, 'Você não pode deletar sua própria conta!')
        return redirect('usuarios:lista_usuarios')

    if request.method == 'POST':
        try:
            usuario.delete()
            messages.success(request, 'Usuário deletado com sucesso!')
        except Exception as e:
            messages.error(request, f'Erro ao deletar usuário: {str(e)}')
        return redirect('usuarios:lista_usuarios')

    context = {
        'usuario': usuario,
        'title': 'Deletar Usuário'
    }
    return render(request, 'usuarios/deletar.html', context)


@login_required
@user_passes_test(admin_required)
def alterar_senha_usuario(request, pk):
    """Altera a senha de um usuário"""
    usuario = get_object_or_404(Usuario, pk=pk)

    if request.method == 'POST':
        nova_senha = request.POST.get('nova_senha')
        confirmar_senha = request.POST.get('confirmar_senha')

        if not nova_senha:
            messages.error(request, 'Nova senha é obrigatória!')
        elif nova_senha != confirmar_senha:
            messages.error(request, 'As senhas não coincidem!')
        elif len(nova_senha) < 8:
            messages.error(
                request, 'A senha deve ter pelo menos 8 caracteres!')
        else:
            try:
                usuario.set_password(nova_senha)
                usuario.save()
                messages.success(request, 'Senha alterada com sucesso!')
                return redirect('usuarios:lista_usuarios')
            except Exception as e:
                messages.error(request, f'Erro ao alterar senha: {str(e)}')

    context = {
        'usuario': usuario,
        'title': 'Alterar Senha'
    }
    return render(request, 'usuarios/alterar_senha.html', context)


# ============================================================================
# VIEWS PARA GRUPOS E PERMISSÕES
# ============================================================================

@login_required
@user_passes_test(admin_required)
def lista_grupos(request):
    """Lista todos os grupos"""
    search = request.GET.get('search', '')
    grupos = Group.objects.all()

    if search:
        grupos = grupos.filter(name__icontains=search)

    paginator = Paginator(grupos, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'page_obj': page_obj,
        'search': search,
        'title': 'Grupos'
    }
    return render(request, 'usuarios/grupos/lista.html', context)


@login_required
@user_passes_test(admin_required)
def criar_grupo(request):
    """Cria um novo grupo"""
    if request.method == 'POST':
        name = request.POST.get('name')
        permissoes_ids = request.POST.getlist('permissions')

        if not name:
            messages.error(request, 'Nome do grupo é obrigatório!')
        elif Group.objects.filter(name=name).exists():
            messages.error(request, 'Este nome de grupo já existe!')
        else:
            try:
                grupo = Group.objects.create(name=name)
                if permissoes_ids:
                    grupo.permissions.set(permissoes_ids)

                messages.success(request, 'Grupo criado com sucesso!')
                return redirect('usuarios:lista_grupos')
            except Exception as e:
                messages.error(request, f'Erro ao criar grupo: {str(e)}')

    # Organizar permissões por app
    permissoes_por_app = {}
    for permission in Permission.objects.select_related('content_type').all():
        app_label = permission.content_type.app_label
        if app_label not in permissoes_por_app:
            permissoes_por_app[app_label] = []
        permissoes_por_app[app_label].append(permission)

    context = {
        'permissoes_por_app': permissoes_por_app,
        'title': 'Criar Grupo'
    }
    return render(request, 'usuarios/grupos/form.html', context)


@login_required
@user_passes_test(admin_required)
def editar_grupo(request, pk):
    """Edita um grupo existente"""
    grupo = get_object_or_404(Group, pk=pk)

    if request.method == 'POST':
        grupo.name = request.POST.get('name')
        permissoes_ids = request.POST.getlist('permissions')

        if not grupo.name:
            messages.error(request, 'Nome do grupo é obrigatório!')
        elif Group.objects.filter(name=grupo.name).exclude(pk=pk).exists():
            messages.error(request, 'Este nome de grupo já existe!')
        else:
            try:
                grupo.save()
                grupo.permissions.set(permissoes_ids)
                messages.success(request, 'Grupo atualizado com sucesso!')
                return redirect('usuarios:lista_grupos')
            except Exception as e:
                messages.error(request, f'Erro ao atualizar grupo: {str(e)}')

    # Organizar permissões por app
    permissoes_por_app = {}
    for permission in Permission.objects.select_related('content_type').all():
        app_label = permission.content_type.app_label
        if app_label not in permissoes_por_app:
            permissoes_por_app[app_label] = []
        permissoes_por_app[app_label].append(permission)

    context = {
        'grupo': grupo,
        'permissoes_por_app': permissoes_por_app,
        'title': 'Editar Grupo'
    }
    return render(request, 'usuarios/grupos/form.html', context)


@login_required
@user_passes_test(admin_required)
def deletar_grupo(request, pk):
    """Deleta um grupo"""
    grupo = get_object_or_404(Group, pk=pk)

    if request.method == 'POST':
        try:
            grupo.delete()
            messages.success(request, 'Grupo deletado com sucesso!')
        except Exception as e:
            messages.error(request, f'Erro ao deletar grupo: {str(e)}')
        return redirect('usuarios:lista_grupos')

    context = {
        'grupo': grupo,
        'title': 'Deletar Grupo'
    }
    return render(request, 'usuarios/grupos/deletar.html', context)


# ============================================================================
# VIEWS AJAX E UTILITÁRIAS
# ============================================================================

@require_http_methods(["GET"])
def verificar_username(request):
    """Verifica se um username está disponível"""
    username = request.GET.get('username')
    user_id = request.GET.get('user_id')

    if not username:
        return JsonResponse({'available': False, 'message': 'Username é obrigatório'})

    query = Usuario.objects.filter(username=username)
    if user_id:
        query = query.exclude(pk=user_id)

    if query.exists():
        return JsonResponse({'available': False, 'message': 'Este username já está em uso'})

    return JsonResponse({'available': True, 'message': 'Username disponível'})


@require_http_methods(["GET"])
def verificar_email(request):
    """Verifica se um email está disponível"""
    email = request.GET.get('email')
    user_id = request.GET.get('user_id')

    if not email:
        return JsonResponse({'available': False, 'message': 'Email é obrigatório'})

    query = Usuario.objects.filter(email=email)
    if user_id:
        query = query.exclude(pk=user_id)

    if query.exists():
        return JsonResponse({'available': False, 'message': 'Este email já está em uso'})

    return JsonResponse({'available': True, 'message': 'Email disponível'})


@require_http_methods(["POST"])
def toggle_usuario_status(request, pk):
    """Alterna o status ativo/inativo de um usuário"""
    usuario = get_object_or_404(Usuario, pk=pk)

    if usuario == request.user:
        return JsonResponse({'success': False, 'message': 'Você não pode desativar sua própria conta'})

    try:
        usuario.is_active = not usuario.is_active
        usuario.save()

        status_text = 'ativado' if usuario.is_active else 'desativado'
        return JsonResponse({
            'success': True,
            'message': f'Usuário {status_text} com sucesso',
            'new_status': usuario.is_active
        })
    except Exception as e:
        return JsonResponse({'success': False, 'message': str(e)})


@require_http_methods(["POST"])
def bulk_action_usuarios(request):
    """Executa ações em lote nos usuários"""
    action = request.POST.get('action')
    user_ids = request.POST.getlist('user_ids')

    if not action or not user_ids:
        return JsonResponse({'success': False, 'message': 'Ação ou usuários não especificados'})

    try:
        usuarios = Usuario.objects.filter(
            id__in=user_ids).exclude(pk=request.user.pk)
        count = usuarios.count()

        if action == 'activate':
            usuarios.update(is_active=True)
            message = f'{count} usuário(s) ativado(s) com sucesso'
        elif action == 'deactivate':
            usuarios.update(is_active=False)
            message = f'{count} usuário(s) desativado(s) com sucesso'
        elif action == 'delete':
            usuarios.delete()
            message = f'{count} usuário(s) excluído(s) com sucesso'
        else:
            return JsonResponse({'success': False, 'message': 'Ação inválida'})

        return JsonResponse({'success': True, 'message': message})
    except Exception as e:
        return JsonResponse({'success': False, 'message': str(e)})

# ============================================================================
# VIEWS PARA PERFIL DO USUÁRIO
# ============================================================================


@login_required
def meu_perfil(request):
    """Exibe e edita o perfil do usuário logado"""
    if request.method == 'POST':
        request.user.first_name = request.POST.get('first_name', '')
        request.user.last_name = request.POST.get('last_name', '')
        request.user.email = request.POST.get('email', '')

        try:
            request.user.save()
            messages.success(request, 'Perfil atualizado com sucesso!')
        except Exception as e:
            messages.error(request, f'Erro ao atualizar perfil: {str(e)}')

    context = {
        'title': 'Meu Perfil'
    }
    return render(request, 'usuarios/perfil.html', context)


@login_required
def alterar_minha_senha(request):
    """Permite ao usuário alterar sua própria senha"""
    if request.method == 'POST':
        form = PasswordChangeForm(request.user, request.POST)
        if form.is_valid():
            user = form.save()
            update_session_auth_hash(request, user)
            messages.success(request, 'Senha alterada com sucesso!')
            return redirect('usuarios:meu_perfil')
        else:
            for error in form.errors.values():
                messages.error(request, error[0])
    else:
        form = PasswordChangeForm(request.user)

    context = {
        'form': form,
        'title': 'Alterar Senha'
    }
    return render(request, 'usuarios/alterar_minha_senha.html', context)


class CustomAuthToken(ObtainAuthToken):
    """
    View de login personalizada para retornar mais dados além do token.
    """

    def post(self, request, *args, **kwargs):
        serializer = self.serializer_class(data=request.data,
                                           context={'request': request})
        serializer.is_valid(raise_exception=True)
        user = serializer.validated_data['user']
        token, created = Token.objects.get_or_create(user=user)

        # Serializa os dados do usuário para incluir na resposta
        user_serializer = UsuarioSerializer(user)

        return Response({
            'token': token.key,
            'user': user_serializer.data
        })


class MeuPerfilAPIView(RetrieveUpdateAPIView):
    """
    Endpoint da API para ver e editar o perfil do usuário logado.
    Permite requisições GET (buscar) e PUT/PATCH (atualizar).
    """
    serializer_class = UsuarioSerializer
    permission_classes = [IsAuthenticated]

    def get_object(self):
        """
        Retorna o objeto do próprio usuário que está fazendo a requisição.
        """
        return self.request.user


class AlterarMinhaSenhaAPIView(UpdateAPIView):
    """
    Endpoint para o usuário alterar a própria senha.
    """
    serializer_class = AlterarSenhaSerializer
    permission_classes = [IsAuthenticated]

    def get_object(self):
        return self.request.user

    def update(self, request, *args, **kwargs):
        usuario = self.get_object()
        serializer = self.get_serializer(data=request.data)

        if serializer.is_valid():
            serializer.save()
            return Response({"detail": "Senha alterada com sucesso!"}, status=status.HTTP_200_OK)

        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\usuarios\__init__.py


_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\usuarios\migrations\0001_initial.py

# Generated by Django 5.2.4 on 2025-09-02 15:05

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('fornecedores', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('registro', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='Nº de Registro')),
                ('fornecedores', models.ManyToManyField(blank=True, related_name='usuarios_com_acesso', to='fornecedores.fornecedor', verbose_name='Fornecedores com Acesso')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\usuarios\migrations\__init__.py


_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\usuarios\templates\usuarios\alterar_senha.html

{% extends 'auditorias/form_generico.html' %}

{% block form_content %}
<div class="form-group">
    <div style="background: rgba(37, 99, 235, 0.1); padding: 16px; border-radius: var(--radius-md); margin-bottom: 24px; border-left: 4px solid var(--primary);">
        <p style="margin: 0; color: var(--text-primary);">
            <i class="fas fa-info-circle" style="margin-right: 8px;"></i>
            Alterando senha para: <strong>{{ usuario.get_full_name|default:usuario.username }}</strong>
        </p>
    </div>
</div>

<div class="form-row">
    <div class="form-group required">
        <label for="password" class="form-label">Nova Senha</label>
        <input type="password" 
               id="password" 
               name="password" 
               class="form-control" 
               required 
               minlength="8"
               placeholder="Digite a nova senha">
        <div class="field-help">Mínimo de 8 caracteres</div>
    </div>
    
    <div class="form-group required">
        <label for="password_confirm" class="form-label">Confirmar Nova Senha</label>
        <input type="password" 
               id="password_confirm" 
               name="password_confirm" 
               class="form-control" 
               required 
               minlength="8"
               placeholder="Confirme a nova senha">
        <div class="field-help">Digite a senha novamente</div>
    </div>
</div>
{% endblock %}

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\usuarios\templates\usuarios\dashboard.html

{% extends 'auditorias/base.html' %}

{% block title %}Dashboard Usuários - Sistema de Auditorias{% endblock %}
{% block page_title %}Gestão de Usuários{% endblock %}

{% block content %}
<div class="content-header">
    <h2 class="content-title">Dashboard de Usuários</h2>
    <p class="content-subtitle">Gerencie usuários, permissões e grupos do sistema</p>
</div>

<!-- Cards de Estatísticas -->
<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 24px; margin-bottom: 32px;">
    <div class="card">
        <div class="card-body" style="padding: 24px;">
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <div>
                    <h3 style="font-size: 32px; font-weight: 700; color: var(--primary); margin-bottom: 8px;">
                        {{ total_usuarios }}
                    </h3>
                    <p style="color: var(--text-secondary); font-size: 14px; margin: 0;">Total de Usuários</p>
                </div>
                <div style="width: 60px; height: 60px; background: linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%); border-radius: var(--radius-lg); display: flex; align-items: center; justify-content: center; color: white; font-size: 24px;">
                    <i class="fas fa-users"></i>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body" style="padding: 24px;">
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <div>
                    <h3 style="font-size: 32px; font-weight: 700; color: var(--success); margin-bottom: 8px;">
                        {{ usuarios_ativos }}
                    </h3>
                    <p style="color: var(--text-secondary); font-size: 14px; margin: 0;">Usuários Ativos</p>
                </div>
                <div style="width: 60px; height: 60px; background: linear-gradient(135deg, var(--success) 0%, #059669 100%); border-radius: var(--radius-lg); display: flex; align-items: center; justify-content: center; color: white; font-size: 24px;">
                    <i class="fas fa-user-check"></i>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body" style="padding: 24px;">
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <div>
                    <h3 style="font-size: 32px; font-weight: 700; color: var(--warning); margin-bottom: 8px;">
                        {{ usuarios_staff }}
                    </h3>
                    <p style="color: var(--text-secondary); font-size: 14px; margin: 0;">Administradores</p>
                </div>
                <div style="width: 60px; height: 60px; background: linear-gradient(135deg, var(--warning) 0%, #d97706 100%); border-radius: var(--radius-lg); display: flex; align-items: center; justify-content: center; color: white; font-size: 24px;">
                    <i class="fas fa-user-shield"></i>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body" style="padding: 24px;">
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <div>
                    <h3 style="font-size: 32px; font-weight: 700; color: var(--error); margin-bottom: 8px;">
                        {{ total_grupos }}
                    </h3>
                    <p style="color: var(--text-secondary); font-size: 14px; margin: 0;">Grupos de Permissão</p>
                </div>
                <div style="width: 60px; height: 60px; background: linear-gradient(135deg, var(--error) 0%, #b91c1c 100%); border-radius: var(--radius-lg); display: flex; align-items: center; justify-content: center; color: white; font-size: 24px;">
                    <i class="fas fa-users-cog"></i>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Ações Rápidas -->
<div style="display: grid; grid-template-columns: 2fr 1fr; gap: 32px;">
    <!-- Usuários Recentes -->
    <div class="card">
        <div class="card-header">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <div>
                    <h3 class="card-title">Usuários Recentes</h3>
                    <p class="card-subtitle">Últimos usuários cadastrados no sistema</p>
                </div>
                <a href="{% url 'usuarios:lista_usuarios' %}" class="btn btn-primary btn-sm">
                    <i class="fas fa-eye"></i>
                    Ver Todos
                </a>
            </div>
        </div>
        <div class="card-body">
            {% if usuarios_recentes %}
                <div class="table-container">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Usuário</th>
                                <th>Email</th>
                                <th>Data Cadastro</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for usuario in usuarios_recentes %}
                            <tr>
                                <td>
                                    <div style="display: flex; align-items: center; gap: 12px;">
                                        <div class="user-avatar" style="width: 32px; height: 32px; font-size: 12px;">
                                            {{ usuario.first_name.0|default:usuario.username.0|upper }}
                                        </div>
                                        <div>
                                            <div style="font-weight: 600; color: var(--text-primary);">
                                                {{ usuario.get_full_name|default:usuario.username }}
                                            </div>
                                            <div style="font-size: 12px; color: var(--text-muted);">
                                                @{{ usuario.username }}
                                            </div>
                                        </div>
                                    </div>
                                </td>
                                <td>{{ usuario.email|default:"—" }}</td>
                                <td>{{ usuario.date_joined|date:"d/m/Y" }}</td>
                                <td>
                                    {% if usuario.is_active %}
                                        <span class="badge badge-success">Ativo</span>
                                    {% else %}
                                        <span class="badge badge-error">Inativo</span>
                                    {% endif %}
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            {% else %}
                <div style="text-align: center; padding: 48px 24px; color: var(--text-muted);">
                    <i class="fas fa-users" style="font-size: 48px; margin-bottom: 16px; opacity: 0.5;"></i>
                    <h4 style="margin-bottom: 8px;">Nenhum usuário encontrado</h4>
                    <p>Crie o primeiro usuário para começar</p>
                </div>
            {% endif %}
        </div>
    </div>

    <!-- Ações Rápidas -->
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Ações Rápidas</h3>
            <p class="card-subtitle">Acesso rápido às principais funcionalidades</p>
        </div>
        <div class="card-body">
            <div style="display: flex; flex-direction: column; gap: 16px;">
                <a href="{% url 'usuarios:criar_usuario' %}" class="btn btn-primary" style="justify-content: flex-start;">
                    <i class="fas fa-user-plus"></i>
                    Novo Usuário
                </a>
                
                <a href="{% url 'usuarios:criar_grupo' %}" class="btn btn-secondary" style="justify-content: flex-start;">
                    <i class="fas fa-users-cog"></i>
                    Novo Grupo
                </a>
                
                <a href="{% url 'usuarios:lista_grupos' %}" class="btn btn-secondary" style="justify-content: flex-start;">
                    <i class="fas fa-list"></i>
                    Ver Grupos
                </a>
                
                <hr style="border: none; border-top: 1px solid var(--border); margin: 8px 0;">
                
                <a href="{% url 'usuarios:meu_perfil' %}" class="btn btn-secondary" style="justify-content: flex-start;">
                    <i class="fas fa-user-edit"></i>
                    Meu Perfil
                </a>
            </div>
        </div>
    </div>
</div>
{% endblock %}

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\usuarios\templates\usuarios\form.html

{% extends 'auditorias/form_generico.html' %}

{% block form_content %}
<!-- Informações Básicas -->
<div style="margin-bottom: 32px;">
    <h4 style="color: var(--text-primary); margin-bottom: 16px; padding-bottom: 8px; border-bottom: 1px solid var(--border);">
        <i class="fas fa-user"></i>
        Informações Básicas
    </h4>
    
    <div class="form-row">
        <div class="form-group required">
            <label for="username" class="form-label">Username</label>
            <input type="text" 
                   id="username" 
                   name="username" 
                   class="form-control" 
                   value="{{ usuario.username|default:'' }}" 
                   required 
                   maxlength="150"
                   placeholder="Digite o username">
            <div class="field-help">Username único para login no sistema</div>
        </div>
        
        <div class="form-group required">
            <label for="email" class="form-label">Email</label>
            <input type="email" 
                   id="email" 
                   name="email" 
                   class="form-control" 
                   value="{{ usuario.email|default:'' }}" 
                   required 
                   placeholder="Digite o email">
            <div class="field-help">Email único para comunicações</div>
        </div>
    </div>
    
    <div class="form-row">
        <div class="form-group">
            <label for="first_name" class="form-label">Nome</label>
            <input type="text" 
                   id="first_name" 
                   name="first_name" 
                   class="form-control" 
                   value="{{ usuario.first_name|default:'' }}" 
                   maxlength="150"
                   placeholder="Digite o primeiro nome">
        </div>
        
        <div class="form-group">
            <label for="last_name" class="form-label">Sobrenome</label>
            <input type="text" 
                   id="last_name" 
                   name="last_name" 
                   class="form-control" 
                   value="{{ usuario.last_name|default:'' }}" 
                   maxlength="150"
                   placeholder="Digite o sobrenome">
        </div>
    </div>
</div>

<!-- Senha (apenas para criação) -->
{% if not usuario %}
<div style="margin-bottom: 32px;">
    <h4 style="color: var(--text-primary); margin-bottom: 16px; padding-bottom: 8px; border-bottom: 1px solid var(--border);">
        <i class="fas fa-lock"></i>
        Senha
    </h4>
    
    <div class="form-row">
        <div class="form-group required">
            <label for="password" class="form-label">Senha</label>
            <input type="password" 
                   id="password" 
                   name="password" 
                   class="form-control" 
                   required 
                   minlength="8"
                   placeholder="Digite a senha">
            <div class="field-help">Mínimo de 8 caracteres</div>
        </div>
        
        <div class="form-group required">
            <label for="password_confirm" class="form-label">Confirmar Senha</label>
            <input type="password" 
                   id="password_confirm" 
                   name="password_confirm" 
                   class="form-control" 
                   required 
                   minlength="8"
                   placeholder="Confirme a senha">
            <div class="field-help">Digite a senha novamente</div>
        </div>
    </div>
</div>
{% endif %}

<!-- Permissões -->
<div style="margin-bottom: 32px;">
    <h4 style="color: var(--text-primary); margin-bottom: 16px; padding-bottom: 8px; border-bottom: 1px solid var(--border);">
        <i class="fas fa-shield-alt"></i>
        Permissões
    </h4>
    
    <div class="form-row triple">
        <div class="form-group">
            <label class="form-label">Status Ativo</label>
            <div style="display: flex; align-items: center; gap: 12px;">
                <label class="toggle-switch">
                    <input type="checkbox" 
                           name="is_active" 
                           {% if usuario.is_active|default:True %}checked{% endif %}>
                    <span class="toggle-slider"></span>
                </label>
                <span style="color: var(--text-secondary); font-size: 14px;">
                    Usuário pode fazer login
                </span>
            </div>
        </div>
        
        <div class="form-group">
            <label class="form-label">Staff</label>
            <div style="display: flex; align-items: center; gap: 12px;">
                <label class="toggle-switch">
                    <input type="checkbox" 
                           name="is_staff" 
                           {% if usuario.is_staff %}checked{% endif %}>
                    <span class="toggle-slider"></span>
                </label>
                <span style="color: var(--text-secondary); font-size: 14px;">
                    Acesso ao admin
                </span>
            </div>
        </div>
        
        <div class="form-group">
            <label class="form-label">Superusuário</label>
            <div style="display: flex; align-items: center; gap: 12px;">
                <label class="toggle-switch">
                    <input type="checkbox" 
                           name="is_superuser" 
                           {% if usuario.is_superuser %}checked{% endif %}>
                    <span class="toggle-slider"></span>
                </label>
                <span style="color: var(--text-secondary); font-size: 14px;">
                    Todas as permissões
                </span>
            </div>
        </div>
    </div>
</div>

<!-- Grupos -->
<div style="margin-bottom: 32px;">
    <h4 style="color: var(--text-primary); margin-bottom: 16px; padding-bottom: 8px; border-bottom: 1px solid var(--border);">
        <i class="fas fa-users"></i>
        Grupos
    </h4>
    
    <div class="form-group">
        <label class="form-label">Grupos do Usuário</label>
        <div style="max-height: 200px; overflow-y: auto; border: 1px solid var(--border); border-radius: var(--radius-md); padding: 16px;">
            {% if grupos %}
                {% for grupo in grupos %}
                <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 12px;">
                    <input type="checkbox" 
                           name="grupos" 
                           value="{{ grupo.id }}" 
                           id="grupo_{{ grupo.id }}"
                           {% if usuario and grupo in usuario.groups.all %}checked{% endif %}>
                    <label for="grupo_{{ grupo.id }}" style="margin: 0; cursor: pointer; flex: 1;">
                        <div style="font-weight: 600; color: var(--text-primary);">{{ grupo.name }}</div>
                        <div style="font-size: 12px; color: var(--text-muted);">
                            {{ grupo.permissions.count }} permissão{{ grupo.permissions.count|pluralize:"ões" }}
                        </div>
                    </label>
                </div>
                {% endfor %}
            {% else %}
                <div style="text-align: center; color: var(--text-muted); padding: 24px;">
                    <i class="fas fa-users" style="font-size: 32px; margin-bottom: 12px; opacity: 0.5;"></i>
                    <p>Nenhum grupo disponível</p>
                </div>
            {% endif %}
        </div>
        <div class="field-help">Selecione os grupos aos quais o usuário pertence</div>
    </div>
</div>
{% endblock %}

_____________________________________

C:\Users\SV1830\Downloads\Gestao-auditorias-django\usuarios\templates\usuarios\lista.html

{% extends 'auditorias/lista_generica.html' %}

{% block table_headers %}
    <th style="width: 40px;">
        <input type="checkbox" id="selectAll" onchange="toggleSelectAll()">
    </th>
    <th>Usuário</th>
    <th>Email</th>
    <th>Grupos</th>
    <th>Status</th>
    <th>Último Login</th>
    <th style="width: 140px;">Ações</th>
{% endblock %}

{% block table_row %}
    <td>
        <input type="checkbox" name="selected_users" value="{{ object.pk }}" class="user-checkbox">
    </td>
    <td>
        <div style="display: flex; align-items: center; gap: 12px;">
            <div class="user-avatar" style="width: 40px; height: 40px; font-size: 14px;">
                {{ object.first_name.0|default:object.username.0|upper }}
            </div>
            <div>
                <div style="font-weight: 600; color: var(--text-primary); margin-bottom: 2px;">
                    {{ object.get_full_name|default:object.username }}
                    {% if object.is_superuser %}
                        <span class="badge badge-error" style="font-size: 10px; margin-left: 8px;">SUPER</span>
                    {% elif object.is_staff %}
                        <span class="badge badge-warning" style="font-size: 10px; margin-left: 8px;">STAFF</span>
                    {% endif %}
                </div>
                <div style="font-size: 12px; color: var(--text-muted);">
                    @{{ object.username }}
                </div>
            </div>
        </div>
    </td>
    <td>
        <div style="color: var(--text-secondary);">
            {{ object.email|default:"—" }}
        </div>
    </td>
    <td>
        {% if object.groups.all %}
            <div style="display: flex; flex-wrap: wrap; gap: 4px;">
                {% for grupo in object.groups.all %}
                <span class="badge badge-info" style="font-size: 10px;">
                    {{ grupo.name }}
                </span>
                {% endfor %}
            </div>
        {% else %}
            <span style="color: var(--text-muted); font-size: 12px;">Nenhum grupo</span>
        {% endif %}
    </td>
    <td>
        <div style="display: flex; align-items: center; gap: 8px;">
            {% if object.is_active %}
                <span class="badge badge-success">
                    <i class="fas fa-check-circle"></i>
                    Ativo
                </span>
            {% else %}
                <span class="badge badge-error">
                    <i class="fas fa-times-circle"></i>
                    Inativo
                </span>
            {% endif %}
        </div>
    </td>
    <td>
        {% if object.last_login %}
            <div style="color: var(--text-secondary); font-size: 14px;">
                {{ object.last_login|date:"d/m/Y" }}
            </div>
            <div style="font-size: 12px; color: var(--text-muted);">
                {{ object.last_login|date:"H:i" }}
            </div>
        {% else %}
            <span style="color: var(--text-muted); font-size: 12px;">Nunca</span>
        {% endif %}
    </td>
    <td>
        <div class="action-buttons">
            <a href="{% url 'usuarios:editar_usuario' object.pk %}" 
               class="btn btn-secondary btn-icon" 
               title="Editar usuário">
                <i class="fas fa-edit"></i>
            </a>
            <a href="{% url 'usuarios:alterar_senha_usuario' object.pk %}" 
               class="btn btn-warning btn-icon" 
               title="Alterar senha">
                <i class="fas fa-key"></i>
            </a>
            {% if object != request.user %}
            <button type="button" 
                    class="btn btn-danger btn-icon" 
                    title="Deletar usuário"
                    onclick="confirmDelete('{% url 'usuarios:deletar_usuario' object.pk %}', '{{ object.get_full_name|default:object.username }}')">
                <i class="fas fa-trash"></i>
            </button>
            {% endif %}
        </div>
    </td>
{% endblock %}

_____________________________________

